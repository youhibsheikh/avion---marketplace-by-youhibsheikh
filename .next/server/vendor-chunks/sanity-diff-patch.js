"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sanity-diff-patch";
exports.ids = ["vendor-chunks/sanity-diff-patch"];
exports.modules = {

/***/ "(ssr)/./node_modules/sanity-diff-patch/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/sanity-diff-patch/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffError: () => (/* binding */ DiffError),\n/* harmony export */   diffItem: () => (/* binding */ diffItem),\n/* harmony export */   diffPatch: () => (/* binding */ diffPatch)\n/* harmony export */ });\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\nconst IS_DOTTABLE_RE = /^[A-Za-z_][A-Za-z0-9_]*$/;\nfunction pathToString(path) {\n  return path.reduce((target, segment, i) => {\n    if (Array.isArray(segment))\n      return `${target}[${segment.join(\":\")}]`;\n    if (isKeyedObject(segment))\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (typeof segment == \"number\")\n      return `${target}[${segment}]`;\n    if (typeof segment == \"string\" && !IS_DOTTABLE_RE.test(segment))\n      return `${target}['${segment}']`;\n    if (typeof segment == \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    throw new Error(`Unsupported path segment \"${segment}\"`);\n  }, \"\");\n}\nfunction isKeyedObject(obj) {\n  return typeof obj == \"object\" && typeof obj._key == \"string\";\n}\nclass DiffError extends Error {\n  path;\n  value;\n  serializedPath;\n  constructor(message, path, value) {\n    const serializedPath = pathToString(path);\n    super(`${message} (at '${serializedPath}')`), this.path = path, this.serializedPath = serializedPath, this.value = value;\n  }\n}\nconst idPattern = /^[a-z0-9][a-z0-9_.-]+$/i, propPattern = /^[a-zA-Z_][a-zA-Z0-9_-]*$/, propStartPattern = /^[a-z_]/i;\nfunction validateProperty(property, value, path) {\n  if (!propStartPattern.test(property))\n    throw new DiffError(\"Keys must start with a letter (a-z)\", path.concat(property), value);\n  if (!propPattern.test(property))\n    throw new DiffError(\n      \"Keys can only contain letters, numbers and underscores\",\n      path.concat(property),\n      value\n    );\n  if (property === \"_key\" || property === \"_ref\" || property === \"_type\") {\n    if (typeof value != \"string\")\n      throw new DiffError(\"Keys must be strings\", path.concat(property), value);\n    if (!idPattern.test(value))\n      throw new DiffError(\"Invalid key - use less exotic characters\", path.concat(property), value);\n  }\n  return property;\n}\nconst ignoredKeys = [\"_id\", \"_type\", \"_createdAt\", \"_updatedAt\", \"_rev\"], defaultOptions = {\n  hideWarnings: !1,\n  diffMatchPatch: {\n    enabled: !0,\n    // Only use diff-match-patch if target string is longer than this threshold\n    lengthThresholdAbsolute: 30,\n    // Only use generated diff-match-patch if the patch length is less than or equal to\n    // (targetString * relative). Example: A 100 character target with a relative factor\n    // of 1.2 will allow a 120 character diff-match-patch. If larger than this number,\n    // it will fall back to a regular `set` patch.\n    lengthThresholdRelative: 1.2\n  }\n};\nfunction mergeOptions(options) {\n  return {\n    ...defaultOptions,\n    ...options,\n    diffMatchPatch: { ...defaultOptions.diffMatchPatch, ...options.diffMatchPatch || {} }\n  };\n}\nfunction diffPatch(itemA, itemB, opts) {\n  const options = mergeOptions(opts || {}), id = options.id || itemA._id === itemB._id && itemA._id, revisionLocked = options.ifRevisionID, ifRevisionID = typeof revisionLocked == \"boolean\" ? itemA._rev : revisionLocked, basePath = options.basePath || [];\n  if (!id)\n    throw new Error(\n      \"_id on itemA and itemB not present or differs, specify document id the mutations should be applied to\"\n    );\n  if (revisionLocked === !0 && !ifRevisionID)\n    throw new Error(\n      \"`ifRevisionID` is set to `true`, but no `_rev` was passed in item A. Either explicitly set `ifRevisionID` to a revision, or pass `_rev` as part of item A.\"\n    );\n  if (basePath.length === 0 && itemA._type !== itemB._type)\n    throw new Error(`_type is immutable and cannot be changed (${itemA._type} => ${itemB._type})`);\n  const operations = diffItem(itemA, itemB, options, basePath, []);\n  return serializePatches(operations, { id, ifRevisionID: revisionLocked ? ifRevisionID : void 0 });\n}\nfunction diffItem(itemA, itemB, opts = defaultOptions, path = [], patches = []) {\n  if (itemA === itemB)\n    return patches;\n  const aType = Array.isArray(itemA) ? \"array\" : typeof itemA, bType = Array.isArray(itemB) ? \"array\" : typeof itemB, aIsUndefined = aType === \"undefined\", bIsUndefined = bType === \"undefined\";\n  if (aIsUndefined && !bIsUndefined)\n    return patches.push({ op: \"set\", path, value: itemB }), patches;\n  if (!aIsUndefined && bIsUndefined)\n    return patches.push({ op: \"unset\", path }), patches;\n  const options = mergeOptions(opts), dataType = aIsUndefined ? bType : aType;\n  return dataType === \"object\" || dataType === \"array\" ? aType !== bType ? (patches.push({ op: \"set\", path, value: itemB }), patches) : dataType === \"array\" ? diffArray(itemA, itemB, options, path, patches) : diffObject(itemA, itemB, options, path, patches) : diffPrimitive(itemA, itemB, options, path, patches);\n}\nfunction diffObject(itemA, itemB, options, path, patches) {\n  const atRoot = path.length === 0, aKeys = Object.keys(itemA).filter(atRoot ? isNotIgnoredKey : yes).map((key) => validateProperty(key, itemA[key], path)), aKeysLength = aKeys.length, bKeys = Object.keys(itemB).filter(atRoot ? isNotIgnoredKey : yes).map((key) => validateProperty(key, itemB[key], path)), bKeysLength = bKeys.length;\n  for (let i = 0; i < aKeysLength; i++) {\n    const key = aKeys[i];\n    key in itemB || patches.push({ op: \"unset\", path: path.concat(key) });\n  }\n  for (let i = 0; i < bKeysLength; i++) {\n    const key = bKeys[i];\n    diffItem(itemA[key], itemB[key], options, path.concat([key]), patches);\n  }\n  return patches;\n}\nfunction diffArray(itemA, itemB, options, path, patches) {\n  if (itemB.length > itemA.length && patches.push({\n    op: \"insert\",\n    after: path.concat([-1]),\n    items: itemB.slice(itemA.length).map((item, i) => nullifyUndefined(item, path, i, options))\n  }), itemB.length < itemA.length) {\n    const isSingle = itemA.length - itemB.length === 1, unsetItems = itemA.slice(itemB.length);\n    isRevisionLocked(options) || !isUniquelyKeyed(unsetItems) ? patches.push({\n      op: \"unset\",\n      path: path.concat([isSingle ? itemB.length : [itemB.length, \"\"]])\n    }) : patches.push(\n      ...unsetItems.map(\n        (item) => ({ op: \"unset\", path: path.concat({ _key: item._key }) })\n      )\n    );\n  }\n  for (let i = 0; i < itemB.length; i++)\n    if (Array.isArray(itemB[i]))\n      throw new DiffError(\"Multi-dimensional arrays not supported\", path.concat(i), itemB[i]);\n  const overlapping = Math.min(itemA.length, itemB.length), segmentA = itemA.slice(0, overlapping), segmentB = itemB.slice(0, overlapping);\n  return isUniquelyKeyed(segmentA) && isUniquelyKeyed(segmentB) ? diffArrayByKey(segmentA, segmentB, options, path, patches) : diffArrayByIndex(segmentA, segmentB, options, path, patches);\n}\nfunction diffArrayByIndex(itemA, itemB, options, path, patches) {\n  for (let i = 0; i < itemA.length; i++)\n    diffItem(\n      itemA[i],\n      nullifyUndefined(itemB[i], path, i, options),\n      options,\n      path.concat(i),\n      patches\n    );\n  return patches;\n}\nfunction diffArrayByKey(itemA, itemB, options, path, patches) {\n  const keyedA = indexByKey(itemA), keyedB = indexByKey(itemB);\n  if (!arrayIsEqual(keyedA.keys, keyedB.keys))\n    return diffArrayByIndex(itemA, itemB, options, path, patches);\n  for (let i = 0; i < keyedB.keys.length; i++) {\n    const key = keyedB.keys[i], valueA = keyedA.index[key], valueB = nullifyUndefined(keyedB.index[key], path, i, options);\n    diffItem(valueA, valueB, options, path.concat({ _key: key }), patches);\n  }\n  return patches;\n}\nfunction getDiffMatchPatch(itemA, itemB, options, path) {\n  const { enabled, lengthThresholdRelative, lengthThresholdAbsolute } = options.diffMatchPatch, segment = path[path.length - 1];\n  if (!enabled || // Don't use for anything but strings\n  typeof itemA != \"string\" || typeof itemB != \"string\" || // Don't use for `_key`, `_ref` etc\n  typeof segment == \"string\" && segment[0] === \"_\" || // Don't use on short strings\n  itemB.length < lengthThresholdAbsolute)\n    return;\n  let strPatch = \"\";\n  try {\n    const patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makeDiff)(itemA, itemB), diff = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.cleanupEfficiency)(patch);\n    strPatch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.stringifyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makePatches)(diff));\n  } catch {\n    return;\n  }\n  return strPatch.length > itemB.length * lengthThresholdRelative ? void 0 : { op: \"diffMatchPatch\", path, value: strPatch };\n}\nfunction diffPrimitive(itemA, itemB, options, path, patches) {\n  const dmp = getDiffMatchPatch(itemA, itemB, options, path);\n  return patches.push(\n    dmp || {\n      op: \"set\",\n      path,\n      value: itemB\n    }\n  ), patches;\n}\nfunction isNotIgnoredKey(key) {\n  return ignoredKeys.indexOf(key) === -1;\n}\nfunction serializePatches(patches, options) {\n  if (patches.length === 0)\n    return [];\n  const { id, ifRevisionID } = options, set = patches.filter((patch) => patch.op === \"set\"), unset = patches.filter((patch) => patch.op === \"unset\"), insert = patches.filter((patch) => patch.op === \"insert\"), dmp = patches.filter((patch) => patch.op === \"diffMatchPatch\"), withSet = set.length > 0 && set.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.set[path] = item.value, patch;\n    },\n    { id, set: {} }\n  ), withUnset = unset.length > 0 && unset.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.unset.push(path), patch;\n    },\n    { id, unset: [] }\n  ), withInsert = insert.reduce((acc, item) => {\n    const after = pathToString(item.after);\n    return acc.concat({ id, insert: { after, items: item.items } });\n  }, []), withDmp = dmp.length > 0 && dmp.reduce(\n    (patch, item) => {\n      const path = pathToString(item.path);\n      return patch.diffMatchPatch[path] = item.value, patch;\n    },\n    { id, diffMatchPatch: {} }\n  );\n  return [withUnset, withSet, withDmp, ...withInsert].filter(\n    (item) => item !== !1\n  ).map((patch, i) => ({\n    patch: ifRevisionID && i === 0 ? { ...patch, ifRevisionID } : patch\n  }));\n}\nfunction isUniquelyKeyed(arr) {\n  const keys = [];\n  for (let i = 0; i < arr.length; i++) {\n    const key = getKey(arr[i]);\n    if (!key || keys.indexOf(key) !== -1)\n      return !1;\n    keys.push(key);\n  }\n  return !0;\n}\nfunction getKey(obj) {\n  return typeof obj == \"object\" && obj !== null && obj._key;\n}\nfunction indexByKey(arr) {\n  return arr.reduce(\n    (acc, item) => (acc.keys.push(item._key), acc.index[item._key] = item, acc),\n    { keys: [], index: {} }\n  );\n}\nfunction arrayIsEqual(itemA, itemB) {\n  return itemA.length === itemB.length && itemA.every((item, i) => itemB[i] === item);\n}\nfunction nullifyUndefined(item, path, index, options) {\n  if (typeof item < \"u\")\n    return item;\n  if (!options.hideWarnings) {\n    const serializedPath = pathToString(path.concat(index));\n    console.warn(`undefined value in array converted to null (at '${serializedPath}')`);\n  }\n  return null;\n}\nfunction isRevisionLocked(options) {\n  return !!options.ifRevisionID;\n}\nfunction yes(_) {\n  return !0;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sanity-diff-patch/dist/index.js\n");

/***/ })

};
;