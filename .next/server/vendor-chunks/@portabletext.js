/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @lightSyntaxTransform\n * @noflow\n * @nolint\n * @preventMunge\n * @preserve-invariant-messages\n */\n\n\"use no memo\";'use strict';\n\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);\n\nvar _a, _b;\nconst { useRef, useEffect, isValidElement } = React__namespace;\nconst ReactSecretInternals = (_a = React__namespace.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE) !== null && _a !== void 0 ? _a : React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\nconst $empty = Symbol.for('react.memo_cache_sentinel');\nconst c = typeof ((_b = React__namespace.__COMPILER_RUNTIME) === null || _b === void 0 ? void 0 : _b.c) === 'function'\n    ?\n        React__namespace.__COMPILER_RUNTIME.c\n    : function c(size) {\n        return React__namespace.useMemo(() => {\n            const $ = new Array(size);\n            for (let ii = 0; ii < size; ii++) {\n                $[ii] = $empty;\n            }\n            $[$empty] = true;\n            return $;\n        }, []);\n    };\nconst LazyGuardDispatcher = {};\n[\n    'readContext',\n    'useCallback',\n    'useContext',\n    'useEffect',\n    'useImperativeHandle',\n    'useInsertionEffect',\n    'useLayoutEffect',\n    'useMemo',\n    'useReducer',\n    'useRef',\n    'useState',\n    'useDebugValue',\n    'useDeferredValue',\n    'useTransition',\n    'useMutableSource',\n    'useSyncExternalStore',\n    'useId',\n    'unstable_isNewReconciler',\n    'getCacheSignal',\n    'getCacheForType',\n    'useCacheRefresh',\n].forEach(name => {\n    LazyGuardDispatcher[name] = () => {\n        throw new Error(`[React] Unexpected React hook call (${name}) from a React compiled function. ` +\n            \"Check that all hooks are called directly and named according to convention ('use[A-Z]') \");\n    };\n});\nlet originalDispatcher = null;\nLazyGuardDispatcher['useMemoCache'] = (count) => {\n    if (originalDispatcher == null) {\n        throw new Error('React Compiler internal invariant violation: unexpected null dispatcher');\n    }\n    else {\n        return originalDispatcher.useMemoCache(count);\n    }\n};\nvar GuardKind;\n(function (GuardKind) {\n    GuardKind[GuardKind[\"PushGuardContext\"] = 0] = \"PushGuardContext\";\n    GuardKind[GuardKind[\"PopGuardContext\"] = 1] = \"PopGuardContext\";\n    GuardKind[GuardKind[\"PushExpectHook\"] = 2] = \"PushExpectHook\";\n    GuardKind[GuardKind[\"PopExpectHook\"] = 3] = \"PopExpectHook\";\n})(GuardKind || (GuardKind = {}));\nfunction setCurrent(newDispatcher) {\n    ReactSecretInternals.ReactCurrentDispatcher.current = newDispatcher;\n    return ReactSecretInternals.ReactCurrentDispatcher.current;\n}\nconst guardFrames = [];\nfunction $dispatcherGuard(kind) {\n    const curr = ReactSecretInternals.ReactCurrentDispatcher.current;\n    if (kind === GuardKind.PushGuardContext) {\n        guardFrames.push(curr);\n        if (guardFrames.length === 1) {\n            originalDispatcher = curr;\n        }\n        if (curr === LazyGuardDispatcher) {\n            throw new Error(`[React] Unexpected call to custom hook or component from a React compiled function. ` +\n                \"Check that (1) all hooks are called directly and named according to convention ('use[A-Z]') \" +\n                'and (2) components are returned as JSX instead of being directly invoked.');\n        }\n        setCurrent(LazyGuardDispatcher);\n    }\n    else if (kind === GuardKind.PopGuardContext) {\n        const lastFrame = guardFrames.pop();\n        if (lastFrame == null) {\n            throw new Error('React Compiler internal error: unexpected null in guard stack');\n        }\n        if (guardFrames.length === 0) {\n            originalDispatcher = null;\n        }\n        setCurrent(lastFrame);\n    }\n    else if (kind === GuardKind.PushExpectHook) {\n        guardFrames.push(curr);\n        setCurrent(originalDispatcher);\n    }\n    else if (kind === GuardKind.PopExpectHook) {\n        const lastFrame = guardFrames.pop();\n        if (lastFrame == null) {\n            throw new Error('React Compiler internal error: unexpected null in guard stack');\n        }\n        setCurrent(lastFrame);\n    }\n    else {\n        throw new Error('React Compiler internal error: unreachable block' + kind);\n    }\n}\nfunction $reset($) {\n    for (let ii = 0; ii < $.length; ii++) {\n        $[ii] = $empty;\n    }\n}\nfunction $makeReadOnly() {\n    throw new Error('TODO: implement $makeReadOnly in react-compiler-runtime');\n}\nconst renderCounterRegistry = new Map();\nfunction clearRenderCounterRegistry() {\n    for (const counters of renderCounterRegistry.values()) {\n        counters.forEach(counter => {\n            counter.count = 0;\n        });\n    }\n}\nfunction registerRenderCounter(name, val) {\n    let counters = renderCounterRegistry.get(name);\n    if (counters == null) {\n        counters = new Set();\n        renderCounterRegistry.set(name, counters);\n    }\n    counters.add(val);\n}\nfunction removeRenderCounter(name, val) {\n    const counters = renderCounterRegistry.get(name);\n    if (counters == null) {\n        return;\n    }\n    counters.delete(val);\n}\nfunction useRenderCounter(name) {\n    const val = useRef(null);\n    if (val.current != null) {\n        val.current.count += 1;\n    }\n    useEffect(() => {\n        if (val.current == null) {\n            const counter = { count: 0 };\n            registerRenderCounter(name, counter);\n            val.current = counter;\n        }\n        return () => {\n            if (val.current !== null) {\n                removeRenderCounter(name, val.current);\n            }\n        };\n    });\n}\nconst seenErrors = new Set();\nfunction $structuralCheck(oldValue, newValue, variableName, fnName, kind, loc) {\n    function error(l, r, path, depth) {\n        const str = `${fnName}:${loc} [${kind}] ${variableName}${path} changed from ${l} to ${r} at depth ${depth}`;\n        if (seenErrors.has(str)) {\n            return;\n        }\n        seenErrors.add(str);\n        console.error(str);\n    }\n    const depthLimit = 2;\n    function recur(oldValue, newValue, path, depth) {\n        if (depth > depthLimit) {\n            return;\n        }\n        else if (oldValue === newValue) {\n            return;\n        }\n        else if (typeof oldValue !== typeof newValue) {\n            error(`type ${typeof oldValue}`, `type ${typeof newValue}`, path, depth);\n        }\n        else if (typeof oldValue === 'object') {\n            const oldArray = Array.isArray(oldValue);\n            const newArray = Array.isArray(newValue);\n            if (oldValue === null && newValue !== null) {\n                error('null', `type ${typeof newValue}`, path, depth);\n            }\n            else if (newValue === null) {\n                error(`type ${typeof oldValue}`, 'null', path, depth);\n            }\n            else if (oldValue instanceof Map) {\n                if (!(newValue instanceof Map)) {\n                    error(`Map instance`, `other value`, path, depth);\n                }\n                else if (oldValue.size !== newValue.size) {\n                    error(`Map instance with size ${oldValue.size}`, `Map instance with size ${newValue.size}`, path, depth);\n                }\n                else {\n                    for (const [k, v] of oldValue) {\n                        if (!newValue.has(k)) {\n                            error(`Map instance with key ${k}`, `Map instance without key ${k}`, path, depth);\n                        }\n                        else {\n                            recur(v, newValue.get(k), `${path}.get(${k})`, depth + 1);\n                        }\n                    }\n                }\n            }\n            else if (newValue instanceof Map) {\n                error('other value', `Map instance`, path, depth);\n            }\n            else if (oldValue instanceof Set) {\n                if (!(newValue instanceof Set)) {\n                    error(`Set instance`, `other value`, path, depth);\n                }\n                else if (oldValue.size !== newValue.size) {\n                    error(`Set instance with size ${oldValue.size}`, `Set instance with size ${newValue.size}`, path, depth);\n                }\n                else {\n                    for (const v of newValue) {\n                        if (!oldValue.has(v)) {\n                            error(`Set instance without element ${v}`, `Set instance with element ${v}`, path, depth);\n                        }\n                    }\n                }\n            }\n            else if (newValue instanceof Set) {\n                error('other value', `Set instance`, path, depth);\n            }\n            else if (oldArray || newArray) {\n                if (oldArray !== newArray) {\n                    error(`type ${oldArray ? 'array' : 'object'}`, `type ${newArray ? 'array' : 'object'}`, path, depth);\n                }\n                else if (oldValue.length !== newValue.length) {\n                    error(`array with length ${oldValue.length}`, `array with length ${newValue.length}`, path, depth);\n                }\n                else {\n                    for (let ii = 0; ii < oldValue.length; ii++) {\n                        recur(oldValue[ii], newValue[ii], `${path}[${ii}]`, depth + 1);\n                    }\n                }\n            }\n            else if (isValidElement(oldValue) || isValidElement(newValue)) {\n                if (isValidElement(oldValue) !== isValidElement(newValue)) {\n                    error(`type ${isValidElement(oldValue) ? 'React element' : 'object'}`, `type ${isValidElement(newValue) ? 'React element' : 'object'}`, path, depth);\n                }\n                else if (oldValue.type !== newValue.type) {\n                    error(`React element of type ${oldValue.type}`, `React element of type ${newValue.type}`, path, depth);\n                }\n                else {\n                    recur(oldValue.props, newValue.props, `[props of ${path}]`, depth + 1);\n                }\n            }\n            else {\n                for (const key in newValue) {\n                    if (!(key in oldValue)) {\n                        error(`object without key ${key}`, `object with key ${key}`, path, depth);\n                    }\n                }\n                for (const key in oldValue) {\n                    if (!(key in newValue)) {\n                        error(`object with key ${key}`, `object without key ${key}`, path, depth);\n                    }\n                    else {\n                        recur(oldValue[key], newValue[key], `${path}.${key}`, depth + 1);\n                    }\n                }\n            }\n        }\n        else if (typeof oldValue === 'function') {\n            return;\n        }\n        else if (isNaN(oldValue) || isNaN(newValue)) {\n            if (isNaN(oldValue) !== isNaN(newValue)) {\n                error(`${isNaN(oldValue) ? 'NaN' : 'non-NaN value'}`, `${isNaN(newValue) ? 'NaN' : 'non-NaN value'}`, path, depth);\n            }\n        }\n        else if (oldValue !== newValue) {\n            error(oldValue, newValue, path, depth);\n        }\n    }\n    recur(oldValue, newValue, '', 0);\n}\n\nexports.$dispatcherGuard = $dispatcherGuard;\nexports.$makeReadOnly = $makeReadOnly;\nexports.$reset = $reset;\nexports.$structuralCheck = $structuralCheck;\nexports.c = c;\nexports.clearRenderCounterRegistry = clearRenderCounterRegistry;\nexports.renderCounterRegistry = renderCounterRegistry;\nexports.useRenderCounter = useRenderCounter;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultElement: () => (/* binding */ DefaultElement),\n/* harmony export */   DefaultLeaf: () => (/* binding */ DefaultLeaf),\n/* harmony export */   DefaultPlaceholder: () => (/* binding */ DefaultPlaceholder),\n/* harmony export */   Editable: () => (/* binding */ Editable),\n/* harmony export */   NODE_TO_INDEX: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX),\n/* harmony export */   NODE_TO_PARENT: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT),\n/* harmony export */   ReactEditor: () => (/* binding */ ReactEditor),\n/* harmony export */   Slate: () => (/* binding */ Slate),\n/* harmony export */   useComposing: () => (/* binding */ useComposing),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useFocused: () => (/* binding */ useFocused),\n/* harmony export */   useReadOnly: () => (/* binding */ useReadOnly),\n/* harmony export */   useSelected: () => (/* binding */ useSelected),\n/* harmony export */   useSlate: () => (/* binding */ useSlate),\n/* harmony export */   useSlateSelection: () => (/* binding */ useSlateSelection),\n/* harmony export */   useSlateSelector: () => (/* binding */ useSlateSelector),\n/* harmony export */   useSlateStatic: () => (/* binding */ useSlateStatic),\n/* harmony export */   useSlateWithV: () => (/* binding */ useSlateWithV),\n/* harmony export */   withReact: () => (/* binding */ withReact)\n/* harmony export */ });\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! direction */ \"(ssr)/./node_modules/direction/index.js\");\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(direction__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/debounce */ \"(ssr)/./node_modules/lodash/debounce.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/throttle */ \"(ssr)/./node_modules/lodash/throttle.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! scroll-into-view-if-needed */ \"(ssr)/./node_modules/scroll-into-view-if-needed/dist/index.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! slate-dom */ \"(ssr)/./node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @juggle/resize-observer */ \"(ssr)/./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * A React context for sharing the editor object.\n */\nvar EditorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlateStatic = () => {\n  var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = slate_dom__WEBPACK_IMPORTED_MODULE_4__.DOMEditor;\n\nfunction ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = value => (value === null || value === void 0 ? void 0 : value.constructor.name) === 'DataTransfer';\nfunction createAndroidInputManager(_ref) {\n  var {\n    editor,\n    scheduleOnDOMSelectionChange,\n    onDOMSelectionChange\n  } = _ref;\n  var flushing = false;\n  var compositionEndTimeoutId = null;\n  var flushTimeoutId = null;\n  var actionTimeoutId = null;\n  var idCounter = 0;\n  var insertPositionHint = false;\n  var applyPendingSelection = () => {\n    var pendingSelection = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n    if (pendingSelection) {\n      var {\n        selection\n      } = editor;\n      var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, pendingSelection);\n      if (normalized && (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(normalized, selection))) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, normalized);\n      }\n    }\n  };\n  var performAction = () => {\n    var action = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n    if (!action) {\n      return;\n    }\n    if (action.at) {\n      var target = slate__WEBPACK_IMPORTED_MODULE_7__.Point.isPoint(action.at) ? (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizePoint)(editor, action.at) : (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, action.at);\n      if (!target) {\n        return;\n      }\n      var _targetRange = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, target);\n      if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, _targetRange)) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, target);\n      }\n    }\n    action.run();\n  };\n  var flush = () => {\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (actionTimeoutId) {\n      clearTimeout(actionTimeoutId);\n      actionTimeoutId = null;\n    }\n    if (!hasPendingDiffs() && !hasPendingAction()) {\n      applyPendingSelection();\n      return;\n    }\n    if (!flushing) {\n      flushing = true;\n      setTimeout(() => flushing = false);\n    }\n    if (hasPendingAction()) {\n      flushing = 'action';\n    }\n    var selectionRef = editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection, {\n      affinity: 'forward'\n    });\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n    debug('flush', slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor), slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor));\n    var scheduleSelectionChange = hasPendingDiffs();\n    var diff;\n    while (diff = (_EDITOR_TO_PENDING_DI = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]) {\n      var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n      var pendingMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n      if (pendingMarks !== undefined) {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n        editor.marks = pendingMarks;\n      }\n      if (pendingMarks && insertPositionHint === false) {\n        insertPositionHint = null;\n      }\n      var range = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.targetRange)(diff);\n      if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, range)) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n      }\n      if (diff.diff.text) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, diff.diff.text);\n      } else {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n      }\n      // Remove diff only after we have applied it to account for it when transforming\n      // pending ranges.\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter(_ref2 => {\n        var {\n          id\n        } = _ref2;\n        return id !== diff.id;\n      }));\n      if (!(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.verifyDiffState)(editor, diff)) {\n        scheduleSelectionChange = false;\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n        flushing = 'action';\n        // Ensure we don't restore the pending user (dom) selection\n        // since the document and dom state do not match.\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n      }\n    }\n    var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n    if (selection && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, editor.selection))) {\n      slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, selection);\n    }\n    if (hasPendingAction()) {\n      performAction();\n      return;\n    }\n    // COMPAT: The selectionChange event is fired after the action is performed,\n    // so we have to manually schedule it to ensure we don't 'throw away' the selection\n    // while rendering if we have pending changes.\n    if (scheduleSelectionChange) {\n      scheduleOnDOMSelectionChange();\n    }\n    scheduleOnDOMSelectionChange.flush();\n    onDOMSelectionChange.flush();\n    applyPendingSelection();\n    var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n    if (userMarks !== undefined) {\n      editor.marks = userMarks;\n      editor.onChange();\n    }\n  };\n  var handleCompositionEnd = _event => {\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n    }\n    compositionEndTimeoutId = setTimeout(() => {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n      flush();\n    }, RESOLVE_DELAY);\n  };\n  var handleCompositionStart = _event => {\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n      compositionEndTimeoutId = null;\n    }\n  };\n  var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n    var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var placeholderElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n    if (!placeholderElement) {\n      return;\n    }\n    if (hasPendingDiffs() || forceHide) {\n      placeholderElement.style.display = 'none';\n      return;\n    }\n    placeholderElement.style.removeProperty('display');\n  };\n  var storeDiff = (path, diff) => {\n    var _EDITOR_TO_PENDING_DI3;\n    var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n    var target = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, path);\n    var idx = pendingDiffs.findIndex(change => slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n    if (idx < 0) {\n      var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeStringDiff)(target.text, diff);\n      if (normalized) {\n        pendingDiffs.push({\n          path,\n          diff,\n          id: idCounter++\n        });\n      }\n      updatePlaceholderVisibility();\n      return;\n    }\n    var merged = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.mergeStringDiffs)(target.text, pendingDiffs[idx].diff, diff);\n    if (!merged) {\n      pendingDiffs.splice(idx, 1);\n      updatePlaceholderVisibility();\n      return;\n    }\n    pendingDiffs[idx] = _objectSpread$5(_objectSpread$5({}, pendingDiffs[idx]), {}, {\n      diff: merged\n    });\n  };\n  var scheduleAction = function scheduleAction(run) {\n    var {\n      at\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    insertPositionHint = false;\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n    scheduleOnDOMSelectionChange.cancel();\n    onDOMSelectionChange.cancel();\n    if (hasPendingAction()) {\n      flush();\n    }\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.set(editor, {\n      at,\n      run\n    });\n    // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n    // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n    // in this case and thus never actually perform the action.\n    actionTimeoutId = setTimeout(flush);\n  };\n  var handleDOMBeforeInput = event => {\n    var _targetRange2;\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n      return;\n    }\n    var {\n      inputType: type\n    } = event;\n    var targetRange = null;\n    var data = event.dataTransfer || event.data || undefined;\n    if (insertPositionHint !== false && type !== 'insertText' && type !== 'insertCompositionText') {\n      insertPositionHint = false;\n    }\n    var [nativeTargetRange] = event.getTargetRanges();\n    if (nativeTargetRange) {\n      targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    // COMPAT: SelectionChange event is fired after the action is performed, so we\n    // have to manually get the selection here to ensure it's up-to-date.\n    var window = ReactEditor.getWindow(editor);\n    var domSelection = window.getSelection();\n    if (!targetRange && domSelection) {\n      nativeTargetRange = domSelection;\n      targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n    targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n    if (!targetRange) {\n      return;\n    }\n    // By default, the input manager tries to store text diffs so that we can\n    // defer flushing them at a later point in time. We don't want to flush\n    // for every input event as this can be expensive. However, there are some\n    // scenarios where we cannot safely store the text diff and must instead\n    // schedule an action to let Slate normalize the editor state.\n    var canStoreDiff = true;\n    if (type.startsWith('delete')) {\n      if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n        var [_start, _end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n        var _leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _start.path);\n        if (_leaf.text.length === _start.offset && _end.offset === 0) {\n          var next = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.next(editor, {\n            at: _start.path,\n            match: slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText\n          });\n          if (next && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(next[1], _end.path)) {\n            targetRange = {\n              anchor: _end,\n              focus: _end\n            };\n          }\n        }\n      }\n      var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n      var [start, end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n      var [leaf, path] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.leaf(editor, start.path);\n      var diff = {\n        text: '',\n        start: start.offset,\n        end: end.offset\n      };\n      var pendingDiffs = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor);\n      var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find(change => slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n      var diffs = relevantPendingDiffs ? [relevantPendingDiffs.diff, diff] : [diff];\n      var text = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.applyStringDiff)(leaf.text, ...diffs);\n      if (text.length === 0) {\n        // Text leaf will be removed, so we need to schedule an\n        // action to remove it so that Slate can normalize instead\n        // of storing as a diff\n        canStoreDiff = false;\n      }\n      if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n        if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n          var point = {\n            path: targetRange.anchor.path,\n            offset: start.offset\n          };\n          var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, point, point);\n          handleUserSelect(range);\n          return storeDiff(targetRange.anchor.path, {\n            text: '',\n            end: end.offset,\n            start: start.offset\n          });\n        }\n        return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n          direction\n        }), {\n          at: targetRange\n        });\n      }\n    }\n    switch (type) {\n      case 'deleteByComposition':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteContent':\n      case 'deleteContentForward':\n        {\n          var {\n            anchor\n          } = targetRange;\n          if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange)) {\n            var targetNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n            if (anchor.offset < targetNode.text.length) {\n              return storeDiff(anchor.path, {\n                text: '',\n                start: anchor.offset,\n                end: anchor.offset + 1\n              });\n            }\n          }\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteContentBackward':\n        {\n          var _nativeTargetRange;\n          var {\n            anchor: _anchor\n          } = targetRange;\n          // If we have a mismatch between the native and slate selection being collapsed\n          // we are most likely deleting a zero-width placeholder and thus should perform it\n          // as an action to ensure correct behavior (mostly happens with mark placeholders)\n          var nativeCollapsed = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMSelection)(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n          if (canStoreDiff && nativeCollapsed && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n            return storeDiff(_anchor.path, {\n              text: '',\n              start: _anchor.offset - 1,\n              end: _anchor.offset\n            });\n          }\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor), {\n            at: targetRange\n          });\n        }\n      case 'deleteEntireSoftLine':\n        {\n          return scheduleAction(() => {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineBackward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineBackward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteHardLineForward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteSoftLineForward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteWordBackward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'deleteWordForward':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n      case 'insertLineBreak':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor), {\n            at: targetRange\n          });\n        }\n      case 'insertParagraph':\n        {\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor), {\n            at: targetRange\n          });\n        }\n      case 'insertCompositionText':\n      case 'deleteCompositionText':\n      case 'insertFromComposition':\n      case 'insertFromDrop':\n      case 'insertFromPaste':\n      case 'insertFromYank':\n      case 'insertReplacementText':\n      case 'insertText':\n        {\n          if (isDataTransfer(data)) {\n            return scheduleAction(() => ReactEditor.insertData(editor, data), {\n              at: targetRange\n            });\n          }\n          var _text = data !== null && data !== void 0 ? data : '';\n          // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n          // the placeholder itself and thus includes the zero-width space inside edit events.\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n            _text = _text.replace('\\uFEFF', '');\n          }\n          // Pastes from the Android clipboard will generate `insertText` events.\n          // If the copied text contains any newlines, Android will append an\n          // extra newline to the end of the copied text.\n          if (type === 'insertText' && /.*\\n.*\\n$/.test(_text)) {\n            _text = _text.slice(0, -1);\n          }\n          // If the text includes a newline, split it at newlines and paste each component\n          // string, with soft breaks in between each.\n          if (_text.includes('\\n')) {\n            return scheduleAction(() => {\n              var parts = _text.split('\\n');\n              parts.forEach((line, i) => {\n                if (line) {\n                  slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, line);\n                }\n                if (i !== parts.length - 1) {\n                  slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                }\n              });\n            }, {\n              at: targetRange\n            });\n          }\n          if (slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n            var [_start2, _end2] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n            var _diff = {\n              start: _start2.offset,\n              end: _end2.offset,\n              text: _text\n            };\n            // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n            // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n            // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n            // text events are fired with the correct target ranges, only the final 'insertComposition'\n            // isn't, so we can adjust the target range start offset if we are confident this is the\n            // swiftkey insert causing the issue.\n            if (_text && insertPositionHint && type === 'insertCompositionText') {\n              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n              var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n              if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                _diff.start -= 1;\n                insertPositionHint = null;\n                scheduleFlush();\n              } else {\n                insertPositionHint = false;\n              }\n            } else if (type === 'insertText') {\n              if (insertPositionHint === null) {\n                insertPositionHint = _diff;\n              } else if (insertPositionHint && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                insertPositionHint = _objectSpread$5(_objectSpread$5({}, insertPositionHint), {}, {\n                  text: insertPositionHint.text + _text\n                });\n              } else {\n                insertPositionHint = false;\n              }\n            } else {\n              insertPositionHint = false;\n            }\n            if (canStoreDiff) {\n              storeDiff(_start2.path, _diff);\n              return;\n            }\n          }\n          return scheduleAction(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text), {\n            at: targetRange\n          });\n        }\n    }\n  };\n  var hasPendingAction = () => {\n    return !!slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n  };\n  var hasPendingDiffs = () => {\n    var _EDITOR_TO_PENDING_DI4;\n    return !!((_EDITOR_TO_PENDING_DI4 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n  };\n  var hasPendingChanges = () => {\n    return hasPendingAction() || hasPendingDiffs();\n  };\n  var isFlushing = () => {\n    return flushing;\n  };\n  var handleUserSelect = range => {\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.set(editor, range);\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n    var {\n      selection\n    } = editor;\n    if (!range) {\n      return;\n    }\n    var pathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path, range.anchor.path);\n    var parentPathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n    if (pathChanged && insertPositionHint || parentPathChanged) {\n      insertPositionHint = false;\n    }\n    if (pathChanged || hasPendingDiffs()) {\n      flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n    }\n  };\n  var handleInput = () => {\n    if (hasPendingAction() || !hasPendingDiffs()) {\n      flush();\n    }\n  };\n  var handleKeyDown = _ => {\n    // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n    // directly next to a non-contenteditable element (= the placeholder).\n    // The only event fired soon enough for us to allow hiding the placeholder\n    // without swiftkey picking it up is the keydown event, so we have to hide it\n    // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n    if (!hasPendingDiffs()) {\n      updatePlaceholderVisibility(true);\n      setTimeout(updatePlaceholderVisibility);\n    }\n  };\n  var scheduleFlush = () => {\n    if (!hasPendingAction()) {\n      actionTimeoutId = setTimeout(flush);\n    }\n  };\n  var handleDomMutations = mutations => {\n    if (hasPendingDiffs() || hasPendingAction()) {\n      return;\n    }\n    if (mutations.some(mutation => (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations))) {\n      var _EDITOR_TO_FORCE_REND;\n      // Cause a re-render to restore the dom state if we encounter tracked mutations without\n      // a corresponding pending action.\n      (_EDITOR_TO_FORCE_REND = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n    }\n  };\n  return {\n    flush,\n    scheduleFlush,\n    hasPendingDiffs,\n    hasPendingAction,\n    hasPendingChanges,\n    isFlushing,\n    handleUserSelect,\n    handleCompositionEnd,\n    handleCompositionStart,\n    handleDOMBeforeInput,\n    handleKeyDown,\n    handleDomMutations,\n    handleInput\n  };\n}\n\nfunction useIsMounted() {\n  var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return isMountedRef.current;\n}\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\nvar useIsomorphicLayoutEffect = slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_3__.useEffect;\n\nfunction useMutationObserver(node, callback, options) {\n  var [mutationObserver] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => new MutationObserver(callback));\n  useIsomorphicLayoutEffect(() => {\n    // Discard mutations caused during render phase. This works due to react calling\n    // useLayoutEffect synchronously after the render phase before the next tick.\n    mutationObserver.takeRecords();\n  });\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    mutationObserver.observe(node.current, options);\n    return () => mutationObserver.disconnect();\n  }, [mutationObserver, node, options]);\n}\n\nvar _excluded$2 = [\"node\"];\nfunction ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar MUTATION_OBSERVER_CONFIG$1 = {\n  subtree: true,\n  childList: true,\n  characterData: true\n};\nvar useAndroidInputManager = !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? () => null : _ref => {\n  var {\n      node\n    } = _ref,\n    options = _objectWithoutProperties(_ref, _excluded$2);\n  if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n    return null;\n  }\n  var editor = useSlateStatic();\n  var isMounted = useIsMounted();\n  var [inputManager] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => createAndroidInputManager(_objectSpread$4({\n    editor\n  }, options)));\n  useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n  if (isMounted) {\n    inputManager.flush();\n  }\n  return inputManager;\n};\n\nfunction ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Leaf content strings.\n */\nvar String$1 = props => {\n  var {\n    isLast,\n    leaf,\n    parent,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(path);\n  var isMarkPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]);\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n      length: slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(parent).length\n    });\n  }\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n      isLineBreak: true,\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  }\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\n * Leaf strings with text in them.\n */\nvar TextString = props => {\n  var {\n    text,\n    isTrailing = false\n  } = props;\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var getTextContent = () => {\n    return \"\".concat(text !== null && text !== void 0 ? text : '').concat(isTrailing ? '\\n' : '');\n  };\n  var [initialText] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(getTextContent);\n  // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n  // useLayoutEffect: updating our span before browser paint\n  useIsomorphicLayoutEffect(() => {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    var textWithTrailing = getTextContent();\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing;\n    }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n  });\n  // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n  // We defer to the layout effect above to update the `textContent` of the span element when needed.\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText$1, {\n    ref: ref\n  }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.memo)( /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, ref) => {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref\n  }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */\nvar ZeroWidthString = props => {\n  var {\n    length = 0,\n    isLineBreak = false,\n    isMarkPlaceholder = false\n  } = props;\n  var attributes = {\n    'data-slate-zero-width': isLineBreak ? 'n' : 'z',\n    'data-slate-length': length\n  };\n  if (isMarkPlaceholder) {\n    attributes['data-slate-mark-placeholder'] = true;\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$3({}, attributes), !(slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_IOS) || !isLineBreak ? '\\uFEFF' : null, isLineBreak ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null) : null);\n};\n\nfunction ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nvar PLACEHOLDER_DELAY = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? 300 : 0;\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n  if (placeholderResizeObserver.current) {\n    placeholderResizeObserver.current.disconnect();\n    if (releaseObserver) {\n      placeholderResizeObserver.current = null;\n    }\n  }\n}\nfunction clearTimeoutRef(timeoutRef) {\n  if (timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = null;\n  }\n}\n/**\n * Individual leaves in a text node with unique formatting.\n */\nvar Leaf = props => {\n  var {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultLeaf, _objectSpread$2({}, props))\n  } = props;\n  var editor = useSlateStatic();\n  var placeholderResizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var placeholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var [showPlaceholder, setShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n  var showPlaceholderTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var callbackPlaceholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(placeholderEl => {\n    disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n    if (placeholderEl == null) {\n      var _leaf$onPlaceholderRe;\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n      (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n    } else {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n      if (!placeholderResizeObserver.current) {\n        // Create a new observer and observe the placeholder element.\n        var ResizeObserver$1 = window.ResizeObserver || _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__.ResizeObserver;\n        placeholderResizeObserver.current = new ResizeObserver$1(() => {\n          var _leaf$onPlaceholderRe2;\n          (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n        });\n      }\n      placeholderResizeObserver.current.observe(placeholderEl);\n      placeholderRef.current = placeholderEl;\n    }\n  }, [placeholderRef, leaf, editor]);\n  var children = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(String$1, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n  var leafIsPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (leafIsPlaceholder) {\n      if (!showPlaceholderTimeoutRef.current) {\n        // Delay the placeholder, so it will not render in a selection\n        showPlaceholderTimeoutRef.current = setTimeout(() => {\n          setShowPlaceholder(true);\n          showPlaceholderTimeoutRef.current = null;\n        }, PLACEHOLDER_DELAY);\n      }\n    } else {\n      clearTimeoutRef(showPlaceholderTimeoutRef);\n      setShowPlaceholder(false);\n    }\n    return () => clearTimeoutRef(showPlaceholderTimeoutRef);\n  }, [leafIsPlaceholder, setShowPlaceholder]);\n  if (leafIsPlaceholder && showPlaceholder) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          top: 0,\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n          // Fixes https://github.com/udecode/plate/issues/2315\n          WebkitUserModify: slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT ? 'inherit' : undefined\n        },\n        contentEditable: false,\n        ref: callbackPlaceholderRef\n      }\n    };\n    children = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, renderPlaceholder(placeholderProps), children);\n  }\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes,\n    children,\n    leaf,\n    text\n  });\n};\nvar MemoizedLeaf = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().memo(Leaf, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(next.leaf, prev.leaf) && next.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL] === prev.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = props => {\n  var {\n    attributes,\n    children\n  } = props;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$2({}, attributes), children);\n};\n\n/**\n * Text.\n */\nvar Text = props => {\n  var {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var leaves = slate__WEBPACK_IMPORTED_MODULE_7__.Text.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  }\n  // Update element-related weak maps with the DOM element ref.\n  var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(span => {\n    var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (span) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(text, span);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(span, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(text);\n      if (ref.current) {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.delete(ref.current);\n      }\n    }\n    ref.current = span;\n  }, [ref, editor, key, text]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: callbackRef\n  }, children);\n};\nvar MemoizedText = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().memo(Text, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTextDecorationsEqual)(next.decorations, prev.decorations);\n});\n\nfunction ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Element.\n */\nvar Element = props => {\n  var {\n    decorations,\n    element,\n    renderElement = p => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultElement, _objectSpread$1({}, p)),\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(ref => {\n    // Update element-related weak maps with the DOM element ref.\n    var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (ref) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(element, ref);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(element);\n    }\n  }, [editor, key, element]);\n  var children = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  });\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  var attributes = {\n    'data-slate-node': 'element',\n    ref\n  };\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  }\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, element)) {\n    var text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element);\n    var dir = direction__WEBPACK_IMPORTED_MODULE_0___default()(text);\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  }\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n    var Tag = isInline ? 'span' : 'div';\n    var [[_text]] = slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(element);\n    children = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(_text, 0);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(_text, element);\n  }\n  return renderElement({\n    attributes,\n    children,\n    element\n  });\n};\nvar MemoizedElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().memo(Element, (prev, next) => {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual)(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(prev.selection, next.selection));\n});\n/**\n * The default element renderer.\n */\nvar DefaultElement = props => {\n  var {\n    attributes,\n    children,\n    element\n  } = props;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, _objectSpread$1(_objectSpread$1({}, attributes), {}, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\nvar DecorateContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(() => []);\n/**\n * Get the current `decorate` prop of the editable.\n */\nvar useDecorate = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(DecorateContext);\n};\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\nvar SelectedContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `selected` state of an element.\n */\nvar useSelected = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectedContext);\n};\n\n/**\n * Children.\n */\nvar useChildren = props => {\n  var {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var decorate = useDecorate();\n  var editor = useSlateStatic();\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.set(editor, false);\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isInline(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, node);\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, p);\n    var sel = selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n    for (var dec of decorations) {\n      var d = slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(dec, range);\n      if (d) {\n        ds.push(d);\n      }\n    }\n    if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n)) {\n      children.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SelectedContext.Provider, {\n        key: \"provider-\".concat(key.id),\n        value: !!sel\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      })));\n    } else {\n      children.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n  }\n  return children;\n};\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\nvar ReadOnlyContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `readOnly` state of the editor.\n */\nvar useReadOnly = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ReadOnlyContext);\n};\n\nvar SlateContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */\nvar useSlate = () => {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  var {\n    editor\n  } = context;\n  return editor;\n};\nvar useSlateWithV = () => {\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  return context;\n};\n\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n  var animationFrameIdRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n  var onUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n    if (receivedUserInput.current) {\n      return;\n    }\n    receivedUserInput.current = true;\n    var window = ReactEditor.getWindow(editor);\n    window.cancelAnimationFrame(animationFrameIdRef.current);\n    animationFrameIdRef.current = window.requestAnimationFrame(() => {\n      receivedUserInput.current = false;\n    });\n  }, [editor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => () => cancelAnimationFrame(animationFrameIdRef.current), []);\n  return {\n    receivedUserInput,\n    onUserInput\n  };\n}\n\nvar createRestoreDomManager = (editor, receivedUserInput) => {\n  var bufferedMutations = [];\n  var clear = () => {\n    bufferedMutations = [];\n  };\n  var registerMutations = mutations => {\n    if (!receivedUserInput.current) {\n      return;\n    }\n    var trackedMutations = mutations.filter(mutation => (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations));\n    bufferedMutations.push(...trackedMutations);\n  };\n  function restoreDOM() {\n    if (bufferedMutations.length > 0) {\n      bufferedMutations.reverse().forEach(mutation => {\n        if (mutation.type === 'characterData') {\n          // We don't want to restore the DOM for characterData mutations\n          // because this interrupts the composition.\n          return;\n        }\n        mutation.removedNodes.forEach(node => {\n          mutation.target.insertBefore(node, mutation.nextSibling);\n        });\n        mutation.addedNodes.forEach(node => {\n          mutation.target.removeChild(node);\n        });\n      });\n      // Clear buffered mutations to ensure we don't undo them twice\n      clear();\n    }\n  }\n  return {\n    registerMutations,\n    restoreDOM,\n    clear\n  };\n};\n\nvar MUTATION_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nclass RestoreDOMComponent extends react__WEBPACK_IMPORTED_MODULE_3__.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"context\", null);\n    _defineProperty(this, \"manager\", null);\n    _defineProperty(this, \"mutationObserver\", null);\n  }\n  observe() {\n    var _this$mutationObserve;\n    var {\n      node\n    } = this.props;\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n    (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n  }\n  componentDidMount() {\n    var {\n      receivedUserInput\n    } = this.props;\n    var editor = this.context;\n    this.manager = createRestoreDomManager(editor, receivedUserInput);\n    this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n    this.observe();\n  }\n  getSnapshotBeforeUpdate() {\n    var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n    var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n    if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n      var _this$manager;\n      (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n    }\n    (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n    (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n    return null;\n  }\n  componentDidUpdate() {\n    var _this$manager3;\n    (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n    this.observe();\n  }\n  componentWillUnmount() {\n    var _this$mutationObserve4;\n    (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n  }\n  render() {\n    return this.props.children;\n  }\n}\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? RestoreDOMComponent : _ref => {\n  var {\n    children\n  } = _ref;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, children);\n};\n\n/**\n * A React context for sharing the `composing` state of the editor.\n */\nvar ComposingContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `composing` state of the editor.\n */\nvar useComposing = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ComposingContext);\n};\n\nvar _excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\", \"disableDefaultStyles\"],\n  _excluded2 = [\"text\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar Children = props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, useChildren(props));\n/**\n * Editable.\n */\nvar Editable = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, forwardedRef) => {\n  var defaultRenderPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(props => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultPlaceholder, _objectSpread({}, props)), []);\n  var {\n      autoFocus,\n      decorate = defaultDecorate,\n      onDOMBeforeInput: propsOnDOMBeforeInput,\n      placeholder,\n      readOnly = false,\n      renderElement,\n      renderLeaf,\n      renderPlaceholder = defaultRenderPlaceholder,\n      scrollSelectionIntoView = defaultScrollSelectionIntoView,\n      style: userStyle = {},\n      as: Component = 'div',\n      disableDefaultStyles = false\n    } = props,\n    attributes = _objectWithoutProperties(props, _excluded$1);\n  var editor = useSlate();\n  // Rerender editor when composition status changed\n  var [isComposing, setIsComposing] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var deferredOperations = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n  var [placeholderHeight, setPlaceholderHeight] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n  var processing = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n  var {\n    onUserInput,\n    receivedUserInput\n  } = useTrackUserInput();\n  var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(s => s + 1, 0);\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n  // Update internal state on each render.\n  slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_READ_ONLY.set(editor, readOnly);\n  // Keep track of some state for the event handler logic.\n  var state = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n    isDraggingInternally: false,\n    isUpdatingSelection: false,\n    latestElement: null,\n    hasMarkPlaceholder: false\n  }), []);\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]);\n  /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */\n  var androidInputManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  var onDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default()(() => {\n    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n      onDOMSelectionChange();\n      return;\n    }\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (!processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n      processing.current = true;\n      var active = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getActiveElement)();\n      if (active) {\n        document.execCommand('indent');\n      } else {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n      }\n      processing.current = false;\n      return;\n    }\n    var androidInputManager = androidInputManagerRef.current;\n    if ((slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n      var _root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var {\n        activeElement\n      } = _root;\n      var _el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(_root);\n      if (activeElement === _el) {\n        state.latestElement = activeElement;\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n      } else {\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n      }\n      if (!domSelection) {\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n      }\n      var {\n        anchorNode,\n        focusNode\n      } = domSelection;\n      var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n      var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);\n      if (anchorNodeSelectable && focusNodeInEditor) {\n        var range = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        if (range) {\n          if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n          } else {\n            androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n          }\n        }\n      }\n      // Deselect the editor if the dom selection is not selectable in readonly mode\n      if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n      }\n    }\n  }, 100), [editor, readOnly, state]);\n  var scheduleOnDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(onDOMSelectionChange, 0), [onDOMSelectionChange]);\n  androidInputManagerRef.current = useAndroidInputManager({\n    node: ref,\n    onDOMSelectionChange,\n    scheduleOnDOMSelectionChange\n  });\n  useIsomorphicLayoutEffect(() => {\n    var _androidInputManagerR, _androidInputManagerR2;\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n    if (ref.current && (window = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getDefaultView)(ref.current))) {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_WINDOW.set(editor, window);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.set(editor, ref.current);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(editor, ref.current);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n    }\n    // Make sure the DOM selection state is in sync.\n    var {\n      selection\n    } = editor;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n    if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n      return;\n    }\n    var setDomSelection = forceChange => {\n      var hasDomSelection = domSelection.type !== 'None';\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return;\n      }\n      // Get anchorNode and focusNode\n      var focusNode = domSelection.focusNode;\n      var anchorNode;\n      // COMPAT: In firefox the normal selection way does not work\n      // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n      if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && domSelection.rangeCount > 1) {\n        var firstRange = domSelection.getRangeAt(0);\n        var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n        // Right to left\n        if (firstRange.startContainer === focusNode) {\n          anchorNode = lastRange.endContainer;\n        } else {\n          // Left to right\n          anchorNode = firstRange.startContainer;\n        }\n      } else {\n        anchorNode = domSelection.anchorNode;\n      }\n      // verify that the dom selection is in the editor\n      var editorElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n      if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n        hasDomSelectionInEditor = true;\n      }\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          // domSelection is not necessarily a valid Slate range\n          // (e.g. when clicking on contentEditable:false element)\n          suppressThrow: true\n        });\n        if (slateRange && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(slateRange, selection)) {\n          var _anchorNode;\n          if (!state.hasMarkPlaceholder) {\n            return;\n          }\n          // Ensure selection is inside the mark placeholder\n          if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute('data-slate-mark-placeholder')) {\n            return;\n          }\n        }\n      }\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        return;\n      }\n      // Otherwise the DOM selection is out of sync, so update it.\n      state.isUpdatingSelection = true;\n      var newDomRange = null;\n      try {\n        newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n      } catch (e) {\n        // Ignore, dom and state might be out of sync\n      }\n      if (newDomRange) {\n        if (ReactEditor.isComposing(editor) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n          domSelection.collapseToEnd();\n        } else if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n        scrollSelectionIntoView(editor, newDomRange);\n      } else {\n        domSelection.removeAllRanges();\n      }\n      return newDomRange;\n    };\n    // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n    if (domSelection.rangeCount <= 1) {\n      setDomSelection();\n    }\n    var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === 'action';\n    if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ensureSelection) {\n      setTimeout(() => {\n        state.isUpdatingSelection = false;\n      });\n      return;\n    }\n    var timeoutId = null;\n    var animationFrameId = requestAnimationFrame(() => {\n      if (ensureSelection) {\n        var ensureDomSelection = forceChange => {\n          try {\n            var el = ReactEditor.toDOMNode(editor, editor);\n            el.focus();\n            setDomSelection(forceChange);\n          } catch (e) {\n            // Ignore, dom and state might be out of sync\n          }\n        };\n        // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n        // This essentially would make setting the slate selection during an update meaningless, so we force it\n        // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n        // visible flicker.\n        ensureDomSelection();\n        timeoutId = setTimeout(() => {\n          // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n          // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n          // the animation frame to ensure it displays the correct state.\n          ensureDomSelection(true);\n          state.isUpdatingSelection = false;\n        });\n      }\n    });\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  var onDOMBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if (processing !== null && processing !== void 0 && processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n      var ranges = event.getTargetRanges();\n      var range = ranges[0];\n      var newRange = new window.Range();\n      newRange.setStart(range.startContainer, range.startOffset);\n      newRange.setEnd(range.endContainer, range.endOffset);\n      // Translate the DOM Range into a Slate Range\n      var slateRange = ReactEditor.toSlateRange(editor, newRange, {\n        exactMatch: false,\n        suppressThrow: false\n      });\n      slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, slateRange);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      return;\n    }\n    onUserInput();\n    if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var _EDITOR_TO_USER_SELEC;\n      // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n      if (androidInputManagerRef.current) {\n        return androidInputManagerRef.current.handleDOMBeforeInput(event);\n      }\n      // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n      scheduleOnDOMSelectionChange.flush();\n      onDOMSelectionChange.flush();\n      var {\n        selection\n      } = editor;\n      var {\n        inputType: type\n      } = event;\n      var data = event.dataTransfer || event.data || undefined;\n      var isCompositionChange = type === 'insertCompositionText' || type === 'deleteCompositionText';\n      // COMPAT: use composition change events as a hint to where we should insert\n      // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n      if (isCompositionChange && ReactEditor.isComposing(editor)) {\n        return;\n      }\n      var native = false;\n      if (type === 'insertText' && selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection) &&\n      // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) &&\n      // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        native = true;\n        // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n        if (editor.marks) {\n          native = false;\n        }\n        // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n          var _node$parentElement, _window$getComputedSt;\n          // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of anchor nodes.\n          var {\n            anchor\n          } = selection;\n          var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);\n          var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest('a');\n          var _window = ReactEditor.getWindow(editor);\n          if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n            var _lastText$textContent;\n            // Find the last text node inside the anchor.\n            var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n            if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n              native = false;\n            }\n          }\n          // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n          // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n          if (native && node.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === 'pre') {\n            var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n              at: anchor.path,\n              match: n => slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n)\n            });\n            if (block && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(block[0]).includes('\\t')) {\n              native = false;\n            }\n          }\n        }\n      }\n      // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n      // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n      if ((!type.startsWith('delete') || type.startsWith('deleteBy')) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n        var [targetRange] = event.getTargetRanges();\n        if (targetRange) {\n          var _range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          if (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, _range)) {\n            native = false;\n            var selectionRef = !isCompositionChange && editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection);\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range);\n            if (selectionRef) {\n              slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n            }\n          }\n        }\n      }\n      // Composition change types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n      if (isCompositionChange) {\n        return;\n      }\n      if (!native) {\n        event.preventDefault();\n      }\n      // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n      if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n          direction\n        });\n        return;\n      }\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n            break;\n          }\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n            break;\n          }\n        case 'deleteContentBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n            break;\n          }\n        case 'deleteEntireSoftLine':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteWordBackward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'deleteWordForward':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'insertLineBreak':\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n          break;\n        case 'insertParagraph':\n          {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n            break;\n          }\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              if (ReactEditor.isComposing(editor)) {\n                setIsComposing(false);\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n              }\n            }\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(() => slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data));\n              } else {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data);\n              }\n            }\n            break;\n          }\n      }\n      // Restore the actual user section if nothing manually set it.\n      var toRestore = (_EDITOR_TO_USER_SELEC = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.delete(editor);\n      if (toRestore && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, toRestore))) {\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, toRestore);\n      }\n    }\n  }, [editor, onDOMSelectionChange, onUserInput, propsOnDOMBeforeInput, readOnly, scheduleOnDOMSelectionChange]);\n  var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(node => {\n    if (node == null) {\n      onDOMSelectionChange.cancel();\n      scheduleOnDOMSelectionChange.cancel();\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.delete(editor);\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n      if (ref.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    } else {\n      // Attach a native DOM event handler for `beforeinput` events, because React's\n      // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n      // real `beforeinput` events sadly... (2019/11/04)\n      // https://github.com/facebook/react/issues/11211\n      if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        node.addEventListener('beforeinput', onDOMBeforeInput);\n      }\n    }\n    ref.current = node;\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(node);\n    } else if (forwardedRef) {\n      forwardedRef.current = node;\n    }\n  }, [onDOMSelectionChange, scheduleOnDOMSelectionChange, editor, onDOMBeforeInput, forwardedRef]);\n  useIsomorphicLayoutEffect(() => {\n    var window = ReactEditor.getWindow(editor);\n    // Attach a native DOM event handler for `selectionchange`, because React's\n    // built-in `onSelect` handler doesn't fire for all selection changes. It's\n    // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n    // want to fire for any change to the selection inside the editor.\n    // (2019/11/04) https://github.com/facebook/react/issues/5785\n    window.document.addEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    // Listen for dragend and drop globally. In Firefox, if a drop handler\n    // initiates an operation that causes the originally dragged element to\n    // unmount, that element will not emit a dragend event. (2024/06/21)\n    var stoppedDragging = () => {\n      state.isDraggingInternally = false;\n    };\n    window.document.addEventListener('dragend', stoppedDragging);\n    window.document.addEventListener('drop', stoppedDragging);\n    return () => {\n      window.document.removeEventListener('selectionchange', scheduleOnDOMSelectionChange);\n      window.document.removeEventListener('dragend', stoppedDragging);\n      window.document.removeEventListener('drop', stoppedDragging);\n    };\n  }, [scheduleOnDOMSelectionChange, state]);\n  var decorations = decorate([editor, []]);\n  var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(editor)).length === 1 && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(editor) === '' && !isComposing;\n  var placeHolderResizeHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(placeholderEl => {\n    if (placeholderEl && showPlaceholder) {\n      var _placeholderEl$getBou;\n      setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n    } else {\n      setPlaceholderHeight(undefined);\n    }\n  }, [showPlaceholder]);\n  if (showPlaceholder) {\n    var start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, []);\n    decorations.push({\n      [slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      onPlaceholderResize: placeHolderResizeHandler,\n      anchor: start,\n      focus: start\n    });\n  }\n  var {\n    marks\n  } = editor;\n  state.hasMarkPlaceholder = false;\n  if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection) && marks) {\n    var {\n      anchor\n    } = editor.selection;\n    var leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n    var rest = _objectWithoutProperties(leaf, _excluded2);\n    // While marks isn't a 'complete' text, we can still use loose Text.equals\n    // here which only compares marks anyway.\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(leaf, marks, {\n      loose: true\n    })) {\n      state.hasMarkPlaceholder = true;\n      var unset = Object.fromEntries(Object.keys(rest).map(mark => [mark, null]));\n      decorations.push(_objectSpread(_objectSpread(_objectSpread({\n        [slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]: true\n      }, unset), marks), {}, {\n        anchor,\n        focus: anchor\n      }));\n    }\n  }\n  // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n  // before we receive the composition end event.\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    setTimeout(() => {\n      var {\n        selection\n      } = editor;\n      if (selection) {\n        var {\n          anchor: _anchor\n        } = selection;\n        var _text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _anchor.path);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (marks && !slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(_text, marks, {\n          loose: true\n        })) {\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n          return;\n        }\n      }\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n    });\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ComposingContext.Provider, {\n    value: isComposing\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(RestoreDOM, {\n    node: ref,\n    receivedUserInput: receivedUserInput\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Component, _objectSpread(_objectSpread({\n    role: readOnly ? undefined : 'textbox',\n    \"aria-multiline\": readOnly ? undefined : true\n  }, attributes), {}, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: callbackRef,\n    style: _objectSpread(_objectSpread({}, disableDefaultStyles ? {} : _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, placeholderHeight ? {\n      minHeight: placeholderHeight\n    } : {})), userStyle),\n    onBeforeInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n        event.preventDefault();\n        if (!ReactEditor.isComposing(editor)) {\n          var _text2 = event.data;\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text2);\n        }\n      }\n    }, [attributes.onBeforeInput, editor, readOnly]),\n    onInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (isEventHandled(event, attributes.onInput)) {\n        return;\n      }\n      if (androidInputManagerRef.current) {\n        androidInputManagerRef.current.handleInput();\n        return;\n      }\n      // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n      for (var op of deferredOperations.current) {\n        op();\n      }\n      deferredOperations.current = [];\n      // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n      // there's a chance that content might be placed in the browser's undo stack.\n      // This means undo can be triggered even when the div is not focused,\n      // and it only triggers the input event for the node. (2024/10/09)\n      if (!ReactEditor.isFocused(editor)) {\n        var native = event.nativeEvent;\n        var maybeHistoryEditor = editor;\n        if (native.inputType === 'historyUndo' && typeof maybeHistoryEditor.undo === 'function') {\n          maybeHistoryEditor.undo();\n          return;\n        }\n        if (native.inputType === 'historyRedo' && typeof maybeHistoryEditor.redo === 'function') {\n          maybeHistoryEditor.redo();\n          return;\n        }\n      }\n    }, [attributes.onInput, editor]),\n    onBlur: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      }\n      // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n      var {\n        relatedTarget\n      } = event;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n      if (relatedTarget === el) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n      if ((0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMElement)(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      }\n      // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n      if (relatedTarget != null && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n      // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n      if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n        var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n        domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n      }\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n    }, [readOnly, state.isUpdatingSelection, state.latestElement, editor, attributes.onBlur]),\n    onClick: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, path) || slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, path) !== node) {\n          return;\n        }\n        if (event.detail === slate_dom__WEBPACK_IMPORTED_MODULE_4__.TRIPLE_CLICK && path.length >= 1) {\n          var blockPath = path;\n          if (!(slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, node))) {\n            var _block$;\n            var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n              match: n => slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n),\n              at: path\n            });\n            blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n          }\n          var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, blockPath);\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n          return;\n        }\n        if (readOnly) {\n          return;\n        }\n        var _start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, path);\n        var end = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, path);\n        var startVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n          at: _start\n        });\n        var endVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n          at: end\n        });\n        if (startVoid && endVoid && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(startVoid[1], endVoid[1])) {\n          var _range2 = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, _start);\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range2);\n        }\n      }\n    }, [editor, attributes.onClick, readOnly]),\n    onCompositionEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR3;\n        if (ReactEditor.isComposing(editor)) {\n          Promise.resolve().then(() => {\n            setIsComposing(false);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n          });\n        }\n        (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n        if (isEventHandled(event, attributes.onCompositionEnd) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n          return;\n        }\n        // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX_LEGACY && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_IOS && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WECHATBROWSER && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_UC_MOBILE && event.data) {\n          var placeholderMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n          // Ensure we insert text with the marks the user was actually seeing\n          if (placeholderMarks !== undefined) {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n            editor.marks = placeholderMarks;\n          }\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, event.data);\n          var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n          if (userMarks !== undefined) {\n            editor.marks = userMarks;\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd, editor]),\n    onCompositionUpdate: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        if (!ReactEditor.isComposing(editor)) {\n          setIsComposing(true);\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n        }\n      }\n    }, [attributes.onCompositionUpdate, editor]),\n    onCompositionStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        var _androidInputManagerR4;\n        (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n        if (isEventHandled(event, attributes.onCompositionStart) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n          return;\n        }\n        setIsComposing(true);\n        var {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n          slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n          return;\n        }\n      }\n    }, [attributes.onCompositionStart, editor]),\n    onCopy: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy, editor]),\n    onCut: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var {\n          selection\n        } = editor;\n        if (selection) {\n          if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n          } else {\n            var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onCut]),\n    onDragOver: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver, editor]),\n    onDragStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n          at: path,\n          voids: true\n        });\n        // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n        if (voidMatch) {\n          var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, path);\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n        }\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag');\n      }\n    }, [readOnly, editor, attributes.onDragStart, state]),\n    onDrop: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault();\n        // Keep a reference to the dragged range before updating selection\n        var draggedRange = editor.selection;\n        // Find the range where the drop happened\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n        if (state.isDraggingInternally) {\n          if (draggedRange && !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(draggedRange, range) && !slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n            at: range,\n            voids: true\n          })) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor, {\n              at: draggedRange\n            });\n          }\n        }\n        ReactEditor.insertData(editor, data);\n        // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n    }, [readOnly, editor, attributes.onDrop, state]),\n    onDragEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n        attributes.onDragEnd(event);\n      }\n    }, [readOnly, state, attributes, editor]),\n    onFocus: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, state, editor, attributes.onFocus]),\n    onKeyDown: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n        var _androidInputManagerR5;\n        (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n        var {\n          nativeEvent\n        } = event;\n        // COMPAT: The composition end event isn't fired reliably in all browsers,\n        // so we sometimes might end up stuck in a composition state even though we\n        // aren't composing any more.\n        if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n          slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n          setIsComposing(false);\n        }\n        if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n          return;\n        }\n        var {\n          selection\n        } = editor;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = direction__WEBPACK_IMPORTED_MODULE_0___default()(slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element)) === 'rtl';\n        // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n          return;\n        }\n        // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        }\n        // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: isRTL ? 'end' : 'start'\n            });\n          }\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: isRTL ? 'start' : 'end'\n            });\n          }\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        }\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isBold(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isItalic(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSoftBreak(nativeEvent)) {\n            event.preventDefault();\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n        } else {\n          if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_CHROME || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n              var currentNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n              if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(currentNode) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, currentNode) && (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isInline(editor, currentNode) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, currentNode))) {\n                event.preventDefault();\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, editor, attributes.onKeyDown]),\n    onPaste: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        // COMPAT: Safari InputEvents generated by pasting won't include\n        // application/x-slate-fragment items, so use the\n        // ClipboardEvent here. (2023/03/15)\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isPlainTextOnlyPaste)(event.nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, editor, attributes.onPaste])\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))))));\n});\n/**\n * The default placeholder element\n */\nvar DefaultPlaceholder = _ref => {\n  var {\n    attributes,\n    children\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread({}, attributes), children, slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null))\n  );\n};\n/**\n * A default memoized decorate function.\n */\nvar defaultDecorate = () => [];\n/**\n * A default implement to scroll dom range into view.\n */\nvar defaultScrollSelectionIntoView = (editor, domRange) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection))) {\n    var leafEl = domRange.startContainer.parentElement;\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    (0,scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(leafEl, {\n      scrollMode: 'if-needed'\n    });\n    // @ts-expect-error an unorthodox delete D:\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\n * Check if an event is overrided by a handler.\n */\nvar isEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */\nvar isDOMEventTargetInput = event => {\n  return (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */\nvar isDOMEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.defaultPrevented;\n};\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\nvar FocusedContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `focused` state of the editor.\n */\nvar useFocused = () => {\n  return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(FocusedContext);\n};\n\nfunction isError(error) {\n  return error instanceof Error;\n}\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */\nvar SlateSelectorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nvar refEquality = (a, b) => a === b;\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */\nfunction useSlateSelector(selector) {\n  var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n  var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(s => s + 1, 0);\n  var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n  if (!context) {\n    throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n  }\n  var {\n    getSlate,\n    addEventListener\n  } = context;\n  var latestSubscriptionCallbackError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n  var latestSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(() => null);\n  var latestSelectedState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n  var selectedState;\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(getSlate());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n    }\n    throw err;\n  }\n  useIsomorphicLayoutEffect(() => {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(() => {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(getSlate());\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        if (err instanceof Error) {\n          latestSubscriptionCallbackError.current = err;\n        } else {\n          latestSubscriptionCallbackError.current = new Error(String(err));\n        }\n      }\n      forceRender();\n    }\n    var unsubscribe = addEventListener(checkForUpdates);\n    checkForUpdates();\n    return () => unsubscribe();\n  },\n  // don't rerender on equalityFn change since we want to be able to define it inline\n  [addEventListener, getSlate]);\n  return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */\nfunction useSelectorContext(editor) {\n  var eventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]).current;\n  var slateRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)({\n    editor\n  }).current;\n  var onChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(editor => {\n    slateRef.editor = editor;\n    eventListeners.forEach(listener => listener(editor));\n  }, [eventListeners, slateRef]);\n  var selectorContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n    return {\n      getSlate: () => slateRef.editor,\n      addEventListener: callback => {\n        eventListeners.push(callback);\n        return () => {\n          eventListeners.splice(eventListeners.indexOf(callback), 1);\n        };\n      }\n    };\n  }, [eventListeners, slateRef]);\n  return {\n    selectorContext,\n    onChange\n  };\n}\n\nvar REACT_MAJOR_VERSION = parseInt(react__WEBPACK_IMPORTED_MODULE_3___default().version.split('.')[0], 10);\n\nvar _excluded = [\"editor\", \"children\", \"onChange\", \"onSelectionChange\", \"onValueChange\", \"initialValue\"];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\nvar Slate = props => {\n  var {\n      editor,\n      children,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n      initialValue\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  var [context, setContext] = react__WEBPACK_IMPORTED_MODULE_3___default().useState(() => {\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Node.isNodeList(initialValue)) {\n      throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(initialValue)));\n    }\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(editor)) {\n      throw new Error(\"[Slate] editor is invalid! You passed: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(editor)));\n    }\n    editor.children = initialValue;\n    Object.assign(editor, rest);\n    return {\n      v: 0,\n      editor\n    };\n  });\n  var {\n    selectorContext,\n    onChange: handleSelectorChange\n  } = useSelectorContext(editor);\n  var onContextChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(options => {\n    var _options$operation;\n    if (onChange) {\n      onChange(editor.children);\n    }\n    switch (options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type) {\n      case 'set_selection':\n        onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n        break;\n      default:\n        onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n    }\n    setContext(prevContext => ({\n      v: prevContext.v + 1,\n      editor\n    }));\n    handleSelectorChange(editor);\n  }, [editor, handleSelectorChange, onChange, onSelectionChange, onValueChange]);\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n    return () => {\n      slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, () => {});\n    };\n  }, [editor, onContextChange]);\n  var [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(ReactEditor.isFocused(editor));\n  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n    setIsFocused(ReactEditor.isFocused(editor));\n  }, [editor]);\n  useIsomorphicLayoutEffect(() => {\n    var fn = () => setIsFocused(ReactEditor.isFocused(editor));\n    if (REACT_MAJOR_VERSION >= 17) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn);\n      document.addEventListener('focusout', fn);\n      return () => {\n        document.removeEventListener('focusin', fn);\n        document.removeEventListener('focusout', fn);\n      };\n    } else {\n      document.addEventListener('focus', fn, true);\n      document.addEventListener('blur', fn, true);\n      return () => {\n        document.removeEventListener('focus', fn, true);\n        document.removeEventListener('blur', fn, true);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateSelectorContext.Provider, {\n    value: selectorContext\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(EditorContext.Provider, {\n    value: context.editor\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children))));\n};\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\nvar useEditor = () => {\n  var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */\nvar useSlateSelection = () => {\n  return useSlateSelector(editor => editor.selection, isSelectionEqual);\n};\nvar isSelectionEqual = (a, b) => {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n  return slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(a, b);\n};\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\nvar withReact = function withReact(editor) {\n  var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x-slate-fragment';\n  var e = editor;\n  e = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.withDOM)(e, clipboardFormatKey);\n  var {\n    onChange\n  } = e;\n  e.onChange = options => {\n    // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n    // that the children and selection can get out of sync for one render\n    // pass. So we have to use this unstable API to ensure it batches them.\n    // (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? (react_dom__WEBPACK_IMPORTED_MODULE_6___default().unstable_batchedUpdates) : callback => callback();\n    maybeBatchUpdates(() => {\n      onChange(options);\n    });\n  };\n  return e;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/block-tools/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@portabletext/block-tools/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockContentFeatures: () => (/* binding */ getBlockContentFeatures),\n/* harmony export */   htmlToBlocks: () => (/* binding */ htmlToBlocks),\n/* harmony export */   normalizeBlock: () => (/* binding */ normalizeBlock),\n/* harmony export */   randomKey: () => (/* binding */ randomKey)\n/* harmony export */ });\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n\n\n\n\n\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\";\n}\nconst objectToString = Object.prototype.toString;\nfunction resolveJsType(val) {\n  switch (objectToString.call(val)) {\n    case \"[object Function]\":\n      return \"function\";\n    case \"[object Date]\":\n      return \"date\";\n    case \"[object RegExp]\":\n      return \"regexp\";\n    case \"[object Arguments]\":\n      return \"arguments\";\n    case \"[object Array]\":\n      return \"array\";\n    case \"[object String]\":\n      return \"string\";\n  }\n  return val === null ? \"null\" : val === void 0 ? \"undefined\" : val && typeof val == \"object\" && \"nodeType\" in val && val.nodeType === 1 ? \"element\" : val === Object(val) ? \"object\" : typeof val;\n}\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 };\nnew Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nconst PRESERVE_WHITESPACE_TAGS = [\"pre\", \"textarea\", \"code\"], BLOCK_DEFAULT_STYLE = \"normal\", DEFAULT_BLOCK = Object.freeze({\n  _type: \"block\",\n  markDefs: [],\n  style: BLOCK_DEFAULT_STYLE\n}), DEFAULT_SPAN = Object.freeze({\n  _type: \"span\",\n  marks: []\n}), HTML_BLOCK_TAGS = {\n  p: DEFAULT_BLOCK,\n  blockquote: { ...DEFAULT_BLOCK, style: \"blockquote\" }\n}, HTML_SPAN_TAGS = {\n  span: { object: \"text\" }\n}, HTML_LIST_CONTAINER_TAGS = {\n  ol: { object: null },\n  ul: { object: null }\n}, HTML_HEADER_TAGS = {\n  h1: { ...DEFAULT_BLOCK, style: \"h1\" },\n  h2: { ...DEFAULT_BLOCK, style: \"h2\" },\n  h3: { ...DEFAULT_BLOCK, style: \"h3\" },\n  h4: { ...DEFAULT_BLOCK, style: \"h4\" },\n  h5: { ...DEFAULT_BLOCK, style: \"h5\" },\n  h6: { ...DEFAULT_BLOCK, style: \"h6\" }\n}, HTML_MISC_TAGS = {\n  br: { ...DEFAULT_BLOCK, style: BLOCK_DEFAULT_STYLE }\n}, HTML_DECORATOR_TAGS = {\n  b: \"strong\",\n  strong: \"strong\",\n  i: \"em\",\n  em: \"em\",\n  u: \"underline\",\n  s: \"strike-through\",\n  strike: \"strike-through\",\n  del: \"strike-through\",\n  code: \"code\",\n  sup: \"sup\",\n  sub: \"sub\",\n  ins: \"ins\",\n  mark: \"mark\",\n  small: \"small\"\n}, HTML_LIST_ITEM_TAGS = {\n  li: {\n    ...DEFAULT_BLOCK,\n    style: BLOCK_DEFAULT_STYLE,\n    level: 1,\n    listItem: \"bullet\"\n  }\n}, ELEMENT_MAP = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_SPAN_TAGS,\n  ...HTML_LIST_CONTAINER_TAGS,\n  ...HTML_LIST_ITEM_TAGS,\n  ...HTML_HEADER_TAGS,\n  ...HTML_MISC_TAGS\n};\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(ELEMENT_MAP).filter((tag) => \"style\" in tag).map((tag) => tag.style)\n);\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(HTML_DECORATOR_TAGS)\n);\nfunction blockContentFeatures(blockContentType) {\n  if (!blockContentType)\n    throw new Error(\"Parameter 'blockContentType' required\");\n  const blockType = blockContentType.of.find(findBlockType);\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockSchemaType)(blockType))\n    throw new Error(\"'block' type is not defined in this schema (required).\");\n  const ofType = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockChildrenObjectField)?.type?.of;\n  if (!ofType)\n    throw new Error(\"No `of` declaration found for blocks `children` field\");\n  const spanType = ofType.find(\n    (member) => member.name === \"span\"\n  );\n  if (!spanType)\n    throw new Error(\n      \"No `span` type found in `block` schema type `children` definition\"\n    );\n  const inlineObjectTypes = ofType.filter(\n    (inlineType) => inlineType.name !== \"span\" && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isObjectSchemaType)(inlineType)\n  ), blockObjectTypes = blockContentType.of.filter(\n    (memberType) => memberType.name !== blockType.name && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isObjectSchemaType)(memberType)\n  );\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    annotations: resolveEnabledAnnotationTypes(spanType),\n    lists: resolveEnabledListItems(blockType),\n    types: {\n      block: blockContentType,\n      span: spanType,\n      inlineObjects: inlineObjectTypes,\n      blockObjects: blockObjectTypes\n    }\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockStyleObjectField);\n  if (!styleField)\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\"\n    );\n  const textStyles = getTitledListValuesFromEnumListOptions(\n    styleField.type.options\n  );\n  if (textStyles.length === 0)\n    throw new Error(\n      \"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    );\n  return textStyles;\n}\nfunction resolveEnabledAnnotationTypes(spanType) {\n  return spanType.annotations.map((annotation) => ({\n    title: annotation.title,\n    type: annotation,\n    value: annotation.name,\n    icon: annotation.icon\n  }));\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockListObjectField);\n  if (!listField)\n    throw new Error(\n      \"A field with name 'list' is not defined in the block type (required).\"\n    );\n  const listItems = getTitledListValuesFromEnumListOptions(\n    listField.type.options\n  );\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction getTitledListValuesFromEnumListOptions(options) {\n  const list = options ? options.list : void 0;\n  return Array.isArray(list) ? list.map(\n    (item) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isTitledListValue)(item) ? item : { title: item, value: item }\n  ) : [];\n}\nconst _XPathResult = {\n  ANY_TYPE: 0,\n  NUMBER_TYPE: 1,\n  STRING_TYPE: 2,\n  BOOLEAN_TYPE: 3,\n  UNORDERED_NODE_ITERATOR_TYPE: 4,\n  ORDERED_NODE_ITERATOR_TYPE: 5,\n  UNORDERED_NODE_SNAPSHOT_TYPE: 6,\n  ORDERED_NODE_SNAPSHOT_TYPE: 7,\n  ANY_UNORDERED_NODE_TYPE: 8,\n  FIRST_ORDERED_NODE_TYPE: 9\n};\nvar preprocessGDocs = (_html, doc, options) => {\n  const whitespaceOnPasteMode = options?.unstable_whitespaceOnPasteMode || \"preserve\";\n  let gDocsRootOrSiblingNode = doc.evaluate(\n    '//*[@id and contains(@id, \"docs-internal-guid\")]',\n    doc,\n    null,\n    _XPathResult.ORDERED_NODE_ITERATOR_TYPE,\n    null\n  ).iterateNext();\n  if (gDocsRootOrSiblingNode) {\n    const isWrappedRootTag = tagName(gDocsRootOrSiblingNode) === \"b\";\n    switch (isWrappedRootTag || (gDocsRootOrSiblingNode = doc.body), whitespaceOnPasteMode) {\n      case \"normalize\":\n        normalizeWhitespace(gDocsRootOrSiblingNode);\n        break;\n      case \"remove\":\n        removeAllWhitespace(gDocsRootOrSiblingNode);\n        break;\n    }\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--) {\n      const elm = childNodes.snapshotItem(i);\n      elm?.setAttribute(\"data-is-google-docs\", \"true\"), (elm?.parentElement === gDocsRootOrSiblingNode || !isWrappedRootTag && elm.parentElement === doc.body) && (elm?.setAttribute(\"data-is-root-node\", \"true\"), tagName(elm)), tagName(elm) === \"li\" && elm.firstChild && tagName(elm?.firstChild) === \"img\" && elm.removeChild(elm.firstChild);\n    }\n    return isWrappedRootTag && doc.body.firstElementChild?.replaceWith(\n      ...Array.from(gDocsRootOrSiblingNode.childNodes)\n    ), doc;\n  }\n  return doc;\n};\nconst unwantedWordDocumentPaths = [\n  \"/html/text()\",\n  \"/html/head/text()\",\n  \"/html/body/text()\",\n  \"/html/body/ul/text()\",\n  \"/html/body/ol/text()\",\n  \"//comment()\",\n  \"//style\",\n  \"//xml\",\n  \"//script\",\n  \"//meta\",\n  \"//link\"\n];\nvar preprocessHTML = (_html, doc) => {\n  const bodyTextNodes = doc.evaluate(\n    \"/html/body/text()\",\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {\n    const node = bodyTextNodes.snapshotItem(i), text = node.textContent || \"\";\n    if (text.replace(/[^\\S\\n]+$/g, \"\")) {\n      const newNode = doc.createElement(\"span\");\n      newNode.appendChild(doc.createTextNode(text)), node.parentNode?.replaceChild(newNode, node);\n    } else\n      node.parentNode?.removeChild(node);\n  }\n  const unwantedNodes = doc.evaluate(\n    unwantedWordDocumentPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted && unwanted.parentNode?.removeChild(unwanted);\n  }\n  return doc;\n}, preprocessNotion = (html, doc) => {\n  const NOTION_REGEX = /<!-- notionvc:.*?-->/g;\n  if (html.match(NOTION_REGEX)) {\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--)\n      childNodes.snapshotItem(i)?.setAttribute(\"data-is-notion\", \"true\");\n    return doc;\n  }\n  return doc;\n}, preprocessWhitespace = (_2, doc) => {\n  function processNode(node) {\n    if (node.nodeType === _XPathResult.BOOLEAN_TYPE && !PRESERVE_WHITESPACE_TAGS.includes(\n      node.parentElement?.tagName.toLowerCase() || \"\"\n    ))\n      node.textContent = node.textContent?.replace(/\\s\\s+/g, \" \").replace(/[\\r\\n]+/g, \" \") || \"\";\n    else\n      for (let i = 0; i < node.childNodes.length; i++)\n        processNode(node.childNodes[i]);\n  }\n  return processNode(doc.body), doc;\n};\nconst WORD_HTML_REGEX = /(class=\"?Mso|style=(?:\"|')[^\"]*?\\bmso-|w:WordDocument|<o:\\w+>|<\\/font>)/, unwantedPaths = [\n  \"//o:p\",\n  \"//span[@style='mso-list:Ignore']\",\n  \"//span[@style='mso-list: Ignore']\"\n], mappedPaths = [\n  \"//p[@class='MsoTocHeading']\",\n  \"//p[@class='MsoTitle']\",\n  \"//p[@class='MsoToaHeading']\",\n  \"//p[@class='MsoSubtitle']\",\n  \"//span[@class='MsoSubtleEmphasis']\",\n  \"//span[@class='MsoIntenseEmphasis']\"\n], elementMap = {\n  MsoTocHeading: [\"h3\"],\n  MsoTitle: [\"h1\"],\n  MsoToaHeading: [\"h2\"],\n  MsoSubtitle: [\"h5\"],\n  MsoSubtleEmphasis: [\"span\", \"em\"],\n  MsoIntenseEmphasis: [\"span\", \"em\", \"strong\"]\n  // Remove cruft\n};\nfunction isWordHtml(html) {\n  return WORD_HTML_REGEX.test(html);\n}\nvar preprocessWord = (html, doc) => {\n  if (!isWordHtml(html))\n    return doc;\n  const unwantedNodes = doc.evaluate(\n    unwantedPaths.join(\"|\"),\n    doc,\n    (prefix) => prefix === \"o\" ? \"urn:schemas-microsoft-com:office:office\" : null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted?.parentNode && unwanted.parentNode.removeChild(unwanted);\n  }\n  const mappedElements = doc.evaluate(\n    mappedPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = mappedElements.snapshotLength - 1; i >= 0; i--) {\n    const mappedElm = mappedElements.snapshotItem(i), tags = elementMap[mappedElm.className], text = doc.createTextNode(mappedElm.textContent || \"\");\n    if (!tags)\n      continue;\n    const parentElement = doc.createElement(tags[0]);\n    let parent = parentElement, child = parentElement;\n    tags.slice(1).forEach((tag) => {\n      child = doc.createElement(tag), parent.appendChild(child), parent = child;\n    }), child.appendChild(text), mappedElm?.parentNode?.replaceChild(parentElement, mappedElm);\n  }\n  return doc;\n}, preprocessors = [\n  preprocessWhitespace,\n  preprocessNotion,\n  preprocessWord,\n  preprocessGDocs,\n  preprocessHTML\n];\nfunction createRuleOptions(blockContentType) {\n  const features = blockContentFeatures(blockContentType), enabledBlockStyles = features.styles.map(\n    (item) => item.value || item.title\n  ), enabledSpanDecorators = features.decorators.map(\n    (item) => item.value || item.title\n  ), enabledBlockAnnotations = features.annotations.map(\n    (item) => item.value || item.title || \"\"\n  ), enabledListTypes = features.lists.map(\n    (item) => item.value || item.title || \"\"\n  );\n  return {\n    enabledBlockStyles,\n    enabledSpanDecorators,\n    enabledBlockAnnotations,\n    enabledListTypes\n  };\n}\nfunction tagName(el) {\n  if (el && \"tagName\" in el)\n    return el.tagName.toLowerCase();\n}\nfunction preprocess(html, parseHtml, options) {\n  const cleanHTML = O(html), doc = parseHtml(normalizeHtmlBeforePreprocess(cleanHTML));\n  return preprocessors.forEach((processor) => {\n    processor(cleanHTML, doc, options);\n  }), doc;\n}\nfunction normalizeHtmlBeforePreprocess(html) {\n  return html.trim();\n}\nfunction defaultParseHtml() {\n  if (resolveJsType(DOMParser) === \"undefined\")\n    throw new Error(\n      \"The native `DOMParser` global which the `Html` deserializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.\"\n    );\n  return (html) => new DOMParser().parseFromString(html, \"text/html\");\n}\nfunction flattenNestedBlocks(blocks2) {\n  let depth = 0;\n  const flattened = [], traverse = (nodes) => {\n    const toRemove = [];\n    nodes.forEach((node) => {\n      depth === 0 && flattened.push(node), (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(node) && (depth > 0 && (toRemove.push(node), flattened.push(node)), depth++, traverse(node.children)), node._type === \"__block\" && (toRemove.push(node), flattened.push(node.block));\n    }), toRemove.forEach((node) => {\n      nodes.splice(nodes.indexOf(node), 1);\n    }), depth--;\n  };\n  return traverse(blocks2), flattened;\n}\nfunction nextSpan(block, index) {\n  const next = block.children[index + 1];\n  return next && next._type === \"span\" ? next : null;\n}\nfunction prevSpan(block, index) {\n  const prev = block.children[index - 1];\n  return prev && prev._type === \"span\" ? prev : null;\n}\nfunction isWhiteSpaceChar(text) {\n  return [\"\\xA0\", \" \"].includes(text);\n}\nfunction trimWhitespace(blocks2) {\n  return blocks2.forEach((block) => {\n    (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(block) && block.children.forEach((child, index) => {\n      if (!isMinimalSpan(child))\n        return;\n      const nextChild = nextSpan(block, index), prevChild = prevSpan(block, index);\n      index === 0 && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), index === block.children.length - 1 && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(Math.max(0, child.text.length - 1))) && nextChild && isMinimalSpan(nextChild) && /\\s/.test(nextChild.text.slice(0, 1)) && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(0, 1)) && prevChild && isMinimalSpan(prevChild) && /\\s/.test(prevChild.text.slice(Math.max(0, prevChild.text.length - 1))) && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), child.text || block.children.splice(index, 1), prevChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text) ? (prevChild.text += \" \", block.children.splice(index, 1)) : nextChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(nextChild.marks, child.marks) && isWhiteSpaceChar(child.text) && (nextChild.text = ` ${nextChild.text}`, block.children.splice(index, 1));\n    });\n  }), blocks2;\n}\nfunction ensureRootIsBlocks(blocks2) {\n  return blocks2.reduce((memo, node, i, original) => {\n    if (node._type === \"block\")\n      return memo.push(node), memo;\n    if (node._type === \"__block\")\n      return memo.push(node.block), memo;\n    const lastBlock = memo[memo.length - 1];\n    if (i > 0 && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(original[i - 1]) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(lastBlock))\n      return lastBlock.children.push(node), memo;\n    const block = {\n      ...DEFAULT_BLOCK,\n      children: [node]\n    };\n    return memo.push(block), memo;\n  }, []);\n}\nfunction isNodeList(node) {\n  return Object.prototype.toString.call(node) === \"[object NodeList]\";\n}\nfunction isMinimalSpan(node) {\n  return node._type === \"span\";\n}\nfunction isMinimalBlock(node) {\n  return node._type === \"block\";\n}\nfunction isPlaceholderDecorator(node) {\n  return node._type === \"__decorator\";\n}\nfunction isPlaceholderAnnotation(node) {\n  return node._type === \"__annotation\";\n}\nfunction isElement(node) {\n  return node.nodeType === 1;\n}\nfunction normalizeWhitespace(rootNode) {\n  let emptyBlockCount = 0, lastParent = null;\n  const nodesToRemove = [];\n  for (let child = rootNode.firstChild; child; child = child.nextSibling) {\n    if (!isElement(child)) {\n      normalizeWhitespace(child), emptyBlockCount = 0;\n      continue;\n    }\n    const elm = child;\n    isWhitespaceBlock(elm) ? (lastParent && elm.parentElement === lastParent ? (emptyBlockCount++, emptyBlockCount > 1 && nodesToRemove.push(elm)) : emptyBlockCount = 1, lastParent = elm.parentElement) : (normalizeWhitespace(child), emptyBlockCount = 0);\n  }\n  nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction removeAllWhitespace(rootNode) {\n  const nodesToRemove = [];\n  function collectNodesToRemove(currentNode) {\n    if (isElement(currentNode)) {\n      const elm = currentNode;\n      if (tagName(elm) === \"br\" && (tagName(elm.nextElementSibling) === \"p\" || tagName(elm.previousElementSibling) === \"p\")) {\n        nodesToRemove.push(elm);\n        return;\n      }\n      if ((tagName(elm) === \"p\" || tagName(elm) === \"br\") && elm?.firstChild?.textContent?.trim() === \"\") {\n        nodesToRemove.push(elm);\n        return;\n      }\n      for (let child = elm.firstChild; child; child = child.nextSibling)\n        collectNodesToRemove(child);\n    }\n  }\n  collectNodesToRemove(rootNode), nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction isWhitespaceBlock(elm) {\n  return [\"p\", \"br\"].includes(tagName(elm) || \"\") && !elm.textContent?.trim();\n}\nconst LIST_CONTAINER_TAGS = Object.keys(HTML_LIST_CONTAINER_TAGS);\nfunction isEmphasis$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style\\s*:\\s*italic/.test(style || \"\");\n}\nfunction isStrong$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight\\s*:\\s*700/.test(style || \"\");\n}\nfunction isUnderline$1(el) {\n  if (!isElement(el) || tagName(el.parentNode) === \"a\")\n    return !1;\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*underline/.test(style || \"\");\n}\nfunction isStrikethrough(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*(?:.*line-through.*;)/.test(style || \"\");\n}\nfunction isGoogleDocs(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-google-docs\");\n}\nfunction isRootNode(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-root-node\");\n}\nfunction getListItemStyle$1(el) {\n  const parentTag = tagName(el.parentNode);\n  if (!(parentTag && !LIST_CONTAINER_TAGS.includes(parentTag)))\n    return tagName(el.parentNode) === \"ul\" ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel$1(el) {\n  let level = 0;\n  if (tagName(el) === \"li\") {\n    let parentNode = el.parentNode;\n    for (; parentNode; ) {\n      const parentTag = tagName(parentNode);\n      parentTag && LIST_CONTAINER_TAGS.includes(parentTag) && level++, parentNode = parentNode.parentNode;\n    }\n  } else\n    level = 1;\n  return level;\n}\nconst blocks = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_HEADER_TAGS\n};\nfunction getBlockStyle(el, enabledBlockStyles) {\n  const childTag = tagName(el.firstChild), block = childTag && blocks[childTag];\n  return block && enabledBlockStyles.includes(block.style) ? block.style : BLOCK_DEFAULT_STYLE;\n}\nfunction createGDocsRules(_blockContentType, options) {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"span\" && isGoogleDocs(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong$1(el) && span.marks.push(\"strong\"), isUnderline$1(el) && span.marks.push(\"underline\"), isStrikethrough(el) && span.marks.push(\"strike-through\"), isEmphasis$1(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    },\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"li\" && isGoogleDocs(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle$1(el),\n            level: getListItemLevel$1(el),\n            style: getBlockStyle(el, options.enabledBlockStyles),\n            children: next(el.firstChild?.childNodes || [])\n          };\n      }\n    },\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el.classList.contains(\"apple-interchange-newline\"))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el?.parentNode?.textContent === \"\")\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && isRootNode(el))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n      }\n    }\n  ];\n}\nfunction keyGenerator() {\n  return randomKey(12);\n}\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(rnds8), rnds8;\n}\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i)\n  byteToHex[i] = (i + 256).toString(16).slice(1);\nfunction randomKey(length) {\n  return whatwgRNG(length).reduce((str, n) => str + byteToHex[n], \"\").slice(0, length);\n}\nfunction resolveListItem(listNodeTagName, enabledListTypes) {\n  if (listNodeTagName === \"ul\" && enabledListTypes.includes(\"bullet\"))\n    return \"bullet\";\n  if (listNodeTagName === \"ol\" && enabledListTypes.includes(\"number\"))\n    return \"number\";\n}\nfunction createHTMLRules(_blockContentType, options) {\n  return [\n    // Text nodes\n    {\n      deserialize(el) {\n        if (tagName(el) === \"pre\")\n          return;\n        const isValidText = (el.nodeType === 3 && (el.textContent || \"\").replace(/[\\r\\n]/g, \" \").replace(/\\s\\s+/g, \" \") === \" \" && el.nextSibling && el.nextSibling.nodeType !== 3 && el.previousSibling && el.previousSibling.nodeType !== 3 || el.textContent !== \" \") && tagName(el.parentNode) !== \"body\";\n        if (el.nodeName === \"#text\" && isValidText)\n          return {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: (el.textContent || \"\").replace(/\\s\\s+/g, \" \")\n          };\n      }\n    },\n    // Pre element\n    {\n      deserialize(el) {\n        if (tagName(el) !== \"pre\")\n          return;\n        const isCodeEnabled = options.enabledBlockStyles.includes(\"code\");\n        return {\n          _type: \"block\",\n          style: \"normal\",\n          markDefs: [],\n          children: [\n            {\n              ...DEFAULT_SPAN,\n              marks: isCodeEnabled ? [\"code\"] : [],\n              text: el.textContent || \"\"\n            }\n          ]\n        };\n      }\n    },\n    // Blockquote element\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"blockquote\")\n          return;\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        };\n        delete blocks2.blockquote;\n        const children = [];\n        return el.childNodes.forEach((node, index) => {\n          if (node.nodeType === 1 && Object.keys(blocks2).includes(\n            node.localName.toLowerCase()\n          )) {\n            if (!el.ownerDocument)\n              return;\n            const span = el.ownerDocument.createElement(\"span\");\n            span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), node.childNodes.forEach((cn) => {\n              span.appendChild(cn.cloneNode(!0));\n            }), index !== el.childNodes.length && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), children.push(span);\n          } else\n            children.push(node);\n        }), {\n          _type: \"block\",\n          style: \"blockquote\",\n          markDefs: [],\n          children: next(children)\n        };\n      }\n    },\n    // Block elements\n    {\n      deserialize(el, next) {\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        }, tag = tagName(el);\n        let block = tag ? blocks2[tag] : void 0;\n        if (block)\n          return el.parentNode && tagName(el.parentNode) === \"li\" ? next(el.childNodes) : (options.enabledBlockStyles.includes(block.style) || (block = DEFAULT_BLOCK), {\n            ...block,\n            children: next(el.childNodes)\n          });\n      }\n    },\n    // Ignore span tags\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_SPAN_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Ignore div tags\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"div\")\n          return next(el.childNodes);\n      }\n    },\n    // Ignore list containers\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_LIST_CONTAINER_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Deal with br's\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\")\n          return {\n            ...DEFAULT_SPAN,\n            text: `\n`\n          };\n      }\n    },\n    // Deal with list items\n    {\n      deserialize(el, next, block) {\n        const tag = tagName(el), listItem = tag ? HTML_LIST_ITEM_TAGS[tag] : void 0, parentTag = tagName(el.parentNode) || \"\";\n        if (!listItem || !el.parentNode || !HTML_LIST_CONTAINER_TAGS[parentTag])\n          return;\n        const enabledListItem = resolveListItem(\n          parentTag,\n          options.enabledListTypes\n        );\n        return enabledListItem ? (listItem.listItem = enabledListItem, {\n          ...listItem,\n          children: next(el.childNodes)\n        }) : block({ _type: \"block\", children: next(el.childNodes) });\n      }\n    },\n    // Deal with decorators - this is a limited set of known html elements that we know how to deserialize\n    {\n      deserialize(el, next) {\n        const decorator = HTML_DECORATOR_TAGS[tagName(el) || \"\"];\n        if (!(!decorator || !options.enabledSpanDecorators.includes(decorator)))\n          return {\n            _type: \"__decorator\",\n            name: decorator,\n            children: next(el.childNodes)\n          };\n      }\n    },\n    // Special case for hyperlinks, add annotation (if allowed by schema),\n    // If not supported just write out the link text and href in plain text.\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"a\")\n          return;\n        const linkEnabled = options.enabledBlockAnnotations.includes(\"link\"), href = isElement(el) && el.getAttribute(\"href\");\n        if (!href)\n          return next(el.childNodes);\n        let markDef;\n        return linkEnabled ? (markDef = {\n          _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n          _type: \"link\",\n          href\n        }, {\n          _type: \"__annotation\",\n          markDef,\n          children: next(el.childNodes)\n        }) : el.appendChild(el.ownerDocument.createTextNode(` (${href})`)) && next(el.childNodes);\n      }\n    }\n  ];\n}\nfunction isEmphasis(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style:italic/.test(style || \"\");\n}\nfunction isStrong(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight:700/.test(style || \"\") || /font-weight:600/.test(style || \"\");\n}\nfunction isUnderline(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration:underline/.test(style || \"\");\n}\nfunction isNotion(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-notion\");\n}\nfunction createNotionRules(_blockContentType) {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"span\" && isNotion(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong(el) && span.marks.push(\"strong\"), isUnderline(el) && span.marks.push(\"underline\"), isEmphasis(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    }\n  ];\n}\nfunction getListItemStyle(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (style && style.match(/lfo\\d+/))\n    return style.match(\"lfo1\") ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (!style)\n    return;\n  const levelMatch = style.match(/level\\d+/);\n  if (!levelMatch)\n    return;\n  const [level] = levelMatch[0].match(/\\d/) || [];\n  return (level ? Number.parseInt(level, 10) : 1) || 1;\n}\nfunction isWordListElement(el) {\n  return isElement(el) && el.className ? el.className === \"MsoListParagraphCxSpFirst\" || el.className === \"MsoListParagraphCxSpMiddle\" || el.className === \"MsoListParagraphCxSpLast\" : !1;\n}\nfunction createWordRules() {\n  return [\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"p\" && isWordListElement(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle(el),\n            level: getListItemLevel(el),\n            style: BLOCK_DEFAULT_STYLE,\n            children: next(el.childNodes)\n          };\n      }\n    }\n  ];\n}\nfunction createRules(blockContentType, options) {\n  return [\n    ...createWordRules(),\n    ...createNotionRules(),\n    ...createGDocsRules(blockContentType, options),\n    ...createHTMLRules(blockContentType, options)\n  ];\n}\nclass HtmlDeserializer {\n  blockContentType;\n  rules;\n  parseHtml;\n  _markDefs = [];\n  /**\n   * Create a new serializer respecting a Sanity block content type's schema\n   *\n   * @param blockContentType - Schema type for array containing _at least_ a block child type\n   * @param options - Options for the deserialization process\n   */\n  constructor(blockContentType, options = {}) {\n    const { rules = [], unstable_whitespaceOnPasteMode = \"preserve\" } = options;\n    if (!blockContentType)\n      throw new Error(\"Parameter 'blockContentType' is required\");\n    const standardRules = createRules(blockContentType, {\n      ...createRuleOptions(blockContentType),\n      keyGenerator: options.keyGenerator\n    });\n    this.rules = [...rules, ...standardRules];\n    const parseHtml = options.parseHtml || defaultParseHtml();\n    this.blockContentType = blockContentType, this.parseHtml = (html) => preprocess(html, parseHtml, { unstable_whitespaceOnPasteMode }).body;\n  }\n  /**\n   * Deserialize HTML.\n   *\n   * @param html - The HTML to deserialize, as a string\n   * @returns Array of blocks - either portable text blocks or other allowed blocks\n   */\n  deserialize = (html) => {\n    this._markDefs = [];\n    const { parseHtml } = this, fragment = parseHtml(html), children = Array.from(fragment.childNodes), blocks2 = trimWhitespace(\n      flattenNestedBlocks(\n        ensureRootIsBlocks(this.deserializeElements(children))\n      )\n    );\n    this._markDefs.length > 0 && blocks2.filter(\n      (block) => block._type === \"block\"\n    ).forEach((block) => {\n      block.markDefs = block.markDefs || [], block.markDefs = block.markDefs.concat(\n        this._markDefs.filter((def) => lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__(\n          block.children.map((child) => child.marks || [])\n        ).includes(def._key))\n      );\n    });\n    const type = this.blockContentType.of.find(findBlockType);\n    return type ? blocks2.map((block) => (block._type === \"block\" && (block._type = type.name), block)) : blocks2;\n  };\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param elements - Array of DOM elements to deserialize\n   * @returns\n   */\n  deserializeElements = (elements = []) => {\n    let nodes = [];\n    return elements.forEach((element) => {\n      nodes = nodes.concat(this.deserializeElement(element));\n    }), nodes;\n  };\n  /**\n   * Deserialize a DOM element\n   *\n   * @param element - Deserialize a DOM element\n   * @returns\n   */\n  deserializeElement = (element) => {\n    const next = (elements) => {\n      if (isNodeList(elements))\n        return this.deserializeElements(Array.from(elements));\n      if (Array.isArray(elements))\n        return this.deserializeElements(elements);\n      if (elements)\n        return this.deserializeElement(elements);\n    }, block = (props) => ({\n      _type: \"__block\",\n      block: props\n    });\n    let node;\n    for (let i = 0; i < this.rules.length; i++) {\n      const rule = this.rules[i];\n      if (!rule.deserialize)\n        continue;\n      const ret = rule.deserialize(element, next, block), type = resolveJsType(ret);\n      if (type !== \"array\" && type !== \"object\" && type !== \"null\" && type !== \"undefined\")\n        throw new Error(\n          `A rule returned an invalid deserialized representation: \"${node}\".`\n        );\n      if (ret !== void 0) {\n        {\n          if (ret === null)\n            throw new Error(\"Deserializer rule returned `null`\");\n          Array.isArray(ret) ? node = ret : isPlaceholderDecorator(ret) ? node = this.deserializeDecorator(ret) : isPlaceholderAnnotation(ret) ? node = this.deserializeAnnotation(ret) : node = ret;\n        }\n        if (ret && !Array.isArray(ret) && isMinimalBlock(ret) && \"listItem\" in ret) {\n          let parent = element.parentNode?.parentNode;\n          for (; parent && tagName(parent) === \"li\"; )\n            parent = parent.parentNode?.parentNode, ret.level = ret.level ? ret.level + 1 : 1;\n        }\n        ret && !Array.isArray(ret) && isMinimalBlock(ret) && ret.style === \"blockquote\" && ret.children.forEach((child, index) => {\n          isMinimalSpan(child) && child.text === \"\\r\" && (child.text = `\n\n`, (index === 0 || index === ret.children.length - 1) && ret.children.splice(index, 1));\n        });\n        break;\n      }\n    }\n    return node || next(element.childNodes) || [];\n  };\n  /**\n   * Deserialize a `__decorator` type\n   * (an internal made up type to process decorators exclusively)\n   *\n   * @param decorator -\n   * @returns array of ...\n   */\n  deserializeDecorator = (decorator) => {\n    const { name } = decorator, applyDecorator = (node) => {\n      if (isPlaceholderDecorator(node))\n        return this.deserializeDecorator(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(name);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyDecorator);\n      }\n      return node;\n    };\n    return decorator.children.reduce((children, node) => {\n      const ret = applyDecorator(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n  /**\n   * Deserialize a `__annotation` object.\n   * (an internal made up type to process annotations exclusively)\n   *\n   * @param annotation -\n   * @returns Array of...\n   */\n  deserializeAnnotation = (annotation) => {\n    const { markDef } = annotation;\n    this._markDefs.push(markDef);\n    const applyAnnotation = (node) => {\n      if (isPlaceholderAnnotation(node))\n        return this.deserializeAnnotation(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(markDef._key);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyAnnotation);\n      }\n      return node;\n    };\n    return annotation.children.reduce((children, node) => {\n      const ret = applyAnnotation(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n}\nfunction normalizeBlock(node, options = {}) {\n  if (node._type !== (options.blockTypeName || \"block\"))\n    return \"_key\" in node ? node : {\n      ...node,\n      _key: options.keyGenerator ? options.keyGenerator() : keyGenerator()\n    };\n  const block = {\n    _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n    children: [],\n    markDefs: [],\n    ...node\n  }, lastChild = block.children[block.children.length - 1];\n  if (!lastChild)\n    return block.children = [\n      {\n        _type: \"span\",\n        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n        text: \"\",\n        marks: []\n      }\n    ], block;\n  const usedMarkDefs = [], allowedDecorators = options.allowedDecorators && Array.isArray(options.allowedDecorators) ? options.allowedDecorators : !1;\n  return block.children = block.children.reduce(\n    (acc, child) => {\n      const previousChild = acc[acc.length - 1];\n      return previousChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(child) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(previousChild) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(previousChild.marks, child.marks) ? (lastChild && lastChild === child && child.text === \"\" && block.children.length > 1 || (previousChild.text += child.text), acc) : (acc.push(child), acc);\n    },\n    []\n  ).map((child) => {\n    if (!child)\n      throw new Error(\"missing child\");\n    return child._key = options.keyGenerator ? options.keyGenerator() : keyGenerator(), (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(child) && (child.marks ? allowedDecorators && (child.marks = child.marks.filter((mark) => {\n      const isAllowed = allowedDecorators.includes(mark), isUsed = block.markDefs?.some((def) => def._key === mark);\n      return isAllowed || isUsed;\n    })) : child.marks = [], usedMarkDefs.push(...child.marks)), child;\n  }), block.markDefs = (block.markDefs || []).filter(\n    (markDef) => usedMarkDefs.includes(markDef._key)\n  ), block;\n}\nfunction htmlToBlocks(html, blockContentType, options = {}) {\n  return new HtmlDeserializer(blockContentType, options).deserialize(html).map((block) => normalizeBlock(block, { keyGenerator: options.keyGenerator }));\n}\nfunction getBlockContentFeatures(blockContentType) {\n  return blockContentFeatures(blockContentType);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coreBehavior: () => (/* binding */ coreBehavior),\n/* harmony export */   coreBehaviors: () => (/* binding */ coreBehaviors),\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   isCustomBehaviorEvent: () => (/* binding */ isCustomBehaviorEvent),\n/* harmony export */   isHotkey: () => (/* binding */ isHotkey),\n/* harmony export */   raise: () => (/* binding */ raise)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var _util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n\n\n\nconst IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nfunction isCustomBehaviorEvent(event) {\n  return event.type.startsWith(\"custom.\");\n}\nfunction raise(event) {\n  return {\n    type: \"raise\",\n    event\n  };\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\nconst arrowDownOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowDown = isHotkey(\"ArrowDown\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)({\n      context\n    });\n    return isArrowDown && focusBlockObject && !nextBlock;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"after\"\n  }]]\n}, arrowUpOnLonelyBlockObject = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    const isArrowUp = isHotkey(\"ArrowUp\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)({\n      context\n    });\n    return isArrowUp && focusBlockObject && !previousBlock;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"before\"\n  }, {\n    type: \"select.previous block\"\n  }]]\n}, breakingBlockObject = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context\n    });\n    return (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }) && focusBlockObject !== void 0;\n  },\n  actions: [() => [{\n    type: \"insert.text block\",\n    placement: \"after\"\n  }]]\n}, deletingEmptyTextBlockAfterBlockObject = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [{\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }, {\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  }]]\n}, deletingEmptyTextBlockBeforeBlockObject = {\n  on: \"delete.forward\",\n  guard: ({\n    context\n  }) => {\n    const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)({\n      context\n    });\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [{\n    type: \"delete.block\",\n    blockPath: focusTextBlock.path\n  }, {\n    type: \"select\",\n    selection: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  }]]\n}, coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, coreDecoratorBehaviors = {\n  strongShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+b\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"strong\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"strong\"\n    })]]\n  },\n  emShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+i\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"em\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"em\"\n    })]]\n  },\n  underlineShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+u\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"underline\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"underline\"\n    })]]\n  },\n  codeShortcut: {\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => isHotkey(\"mod+'\", event.keyboardEvent) && context.schema.decorators.some((decorator) => decorator.value === \"code\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"code\"\n    })]]\n  }\n}, MAX_LIST_LEVEL = 10, clearListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [{\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  }]]\n}, unindentListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)({\n      context\n    }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)({\n      context\n    });\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [{\n    type: \"text block.set\",\n    level,\n    at: focusTextBlock.path\n  }]]\n}, clearListOnEnter = {\n  on: \"insert.break\",\n  guard: ({\n    context\n  }) => {\n    const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)({\n      context\n    }), focusListBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getFocusListBlock)({\n      context\n    });\n    return !selectionCollapsed || !focusListBlock || !(0,_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [{\n    type: \"text block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  }]]\n}, indentListOnTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => ({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1)),\n    at: selectedListBlock.path\n  }))]\n}, unindentListOnShiftTab = {\n  on: \"key.down\",\n  guard: ({\n    context,\n    event\n  }) => {\n    if (!isHotkey(\"Shift+Tab\", event.keyboardEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)({\n      context\n    }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => ({\n    type: \"text block.set\",\n    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1)),\n    at: selectedListBlock.path\n  }))]\n}, coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab\n}, softReturn = {\n  on: \"insert.soft break\",\n  actions: [() => [{\n    type: \"insert.text\",\n    text: `\n`\n  }]]\n}, coreBehaviors = [softReturn, coreDecoratorBehaviors.strongShortcut, coreDecoratorBehaviors.emShortcut, coreDecoratorBehaviors.underlineShortcut, coreDecoratorBehaviors.codeShortcut, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab], coreBehavior = {\n  softReturn,\n  decorators: coreDecoratorBehaviors,\n  blockObjects: coreBlockObjectBehaviors,\n  lists: coreListBehaviors\n};\n\n//# sourceMappingURL=behavior.core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockTextBefore: () => (/* binding */ getBlockTextBefore),\n/* harmony export */   getSelectionText: () => (/* binding */ getSelectionText)\n/* harmony export */ });\n/* harmony import */ var _util_reverse_selection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.reverse-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js\");\n/* harmony import */ var _util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-keyed-segment.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\n\n\nconst getSelectionText = ({\n  context\n}) => {\n  let text = \"\";\n  const {\n    value,\n    selection\n  } = context;\n  if (!value || !selection)\n    return text;\n  const forwardSelection = selection.backward ? (0,_util_reverse_selection_js__WEBPACK_IMPORTED_MODULE_0__.reverseSelection)(selection) : selection;\n  if (!forwardSelection)\n    return text;\n  for (const block of value)\n    if (!((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[0]) && block._key !== forwardSelection.anchor.path[0]._key) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextSpan)(child)) {\n          if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[2]) && child._key === forwardSelection.anchor.path[2]._key && (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[2]) && child._key === forwardSelection.focus.path[2]._key) {\n            text = text + child.text.slice(forwardSelection.anchor.offset, forwardSelection.focus.offset);\n            break;\n          }\n          if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.anchor.path[2]) && child._key === forwardSelection.anchor.path[2]._key) {\n            text = text + child.text.slice(forwardSelection.anchor.offset);\n            continue;\n          }\n          if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[2]) && child._key === forwardSelection.focus.path[2]._key) {\n            text = text + child.text.slice(0, forwardSelection.focus.offset);\n            break;\n          }\n          text.length > 0 && (text = text + child.text);\n        }\n      if ((0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(forwardSelection.focus.path[0]) && block._key === forwardSelection.focus.path[0]._key)\n        break;\n    }\n  return text;\n}, getBlockTextBefore = ({\n  context\n}) => {\n  if (!context.selection)\n    return \"\";\n  const point = (context.selection.backward ? (0,_util_reverse_selection_js__WEBPACK_IMPORTED_MODULE_0__.reverseSelection)(context.selection) : context.selection).anchor, key = (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(point.path[0]) ? point.path[0]._key : void 0, block = key ? context.value.find((block2) => block2._key === key) : void 0;\n  if (!block)\n    return \"\";\n  const startOfBlock = (0,_util_reverse_selection_js__WEBPACK_IMPORTED_MODULE_0__.getBlockStartPoint)({\n    node: block,\n    path: [{\n      _key: block._key\n    }]\n  });\n  return getSelectionText({\n    context: {\n      ...context,\n      value: context.value,\n      selection: {\n        anchor: startOfBlock,\n        focus: point\n      }\n    }\n  });\n};\n\n//# sourceMappingURL=selector.get-text-before.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1GO0FBQ3ZCO0FBQ2dCO0FBQzVFO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGdEQUFnRCw0RUFBZ0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsVUFBVSx5RUFBYyw2RkFBNkYsc0VBQXVCO0FBQzVJO0FBQ0EsWUFBWSxpRUFBa0I7QUFDOUIsY0FBYyx5RUFBYyw0RkFBNEYseUVBQWM7QUFDdEk7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5RUFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxjQUFjLHlFQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlFQUFjO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsOENBQThDLDRFQUFnQix1REFBdUQseUVBQWM7QUFDbkk7QUFDQTtBQUNBLHVCQUF1Qiw4RUFBa0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFJRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uMi1lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzPzkxMTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmV2ZXJzZVNlbGVjdGlvbiwgZ2V0QmxvY2tTdGFydFBvaW50IH0gZnJvbSBcIi4vdXRpbC5yZXZlcnNlLXNlbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHsgaXNLZXllZFNlZ21lbnQgfSBmcm9tIFwiLi91dGlsLmlzLWtleWVkLXNlZ21lbnQuanNcIjtcbmltcG9ydCB7IGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrLCBpc1BvcnRhYmxlVGV4dFNwYW4gfSBmcm9tIFwiQHNhbml0eS90eXBlc1wiO1xuY29uc3QgZ2V0U2VsZWN0aW9uVGV4dCA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgbGV0IHRleHQgPSBcIlwiO1xuICBjb25zdCB7XG4gICAgdmFsdWUsXG4gICAgc2VsZWN0aW9uXG4gIH0gPSBjb250ZXh0O1xuICBpZiAoIXZhbHVlIHx8ICFzZWxlY3Rpb24pXG4gICAgcmV0dXJuIHRleHQ7XG4gIGNvbnN0IGZvcndhcmRTZWxlY3Rpb24gPSBzZWxlY3Rpb24uYmFja3dhcmQgPyByZXZlcnNlU2VsZWN0aW9uKHNlbGVjdGlvbikgOiBzZWxlY3Rpb247XG4gIGlmICghZm9yd2FyZFNlbGVjdGlvbilcbiAgICByZXR1cm4gdGV4dDtcbiAgZm9yIChjb25zdCBibG9jayBvZiB2YWx1ZSlcbiAgICBpZiAoIShpc0tleWVkU2VnbWVudChmb3J3YXJkU2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdKSAmJiBibG9jay5fa2V5ICE9PSBmb3J3YXJkU2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdLl9rZXkpICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBibG9jay5jaGlsZHJlbilcbiAgICAgICAgaWYgKGlzUG9ydGFibGVUZXh0U3BhbihjaGlsZCkpIHtcbiAgICAgICAgICBpZiAoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXSkgJiYgY2hpbGQuX2tleSA9PT0gZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXS5fa2V5ICYmIGlzS2V5ZWRTZWdtZW50KGZvcndhcmRTZWxlY3Rpb24uZm9jdXMucGF0aFsyXSkgJiYgY2hpbGQuX2tleSA9PT0gZm9yd2FyZFNlbGVjdGlvbi5mb2N1cy5wYXRoWzJdLl9rZXkpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0ICsgY2hpbGQudGV4dC5zbGljZShmb3J3YXJkU2VsZWN0aW9uLmFuY2hvci5vZmZzZXQsIGZvcndhcmRTZWxlY3Rpb24uZm9jdXMub2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXSkgJiYgY2hpbGQuX2tleSA9PT0gZm9yd2FyZFNlbGVjdGlvbi5hbmNob3IucGF0aFsyXS5fa2V5KSB7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dCArIGNoaWxkLnRleHQuc2xpY2UoZm9yd2FyZFNlbGVjdGlvbi5hbmNob3Iub2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNLZXllZFNlZ21lbnQoZm9yd2FyZFNlbGVjdGlvbi5mb2N1cy5wYXRoWzJdKSAmJiBjaGlsZC5fa2V5ID09PSBmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLnBhdGhbMl0uX2tleSkge1xuICAgICAgICAgICAgdGV4dCA9IHRleHQgKyBjaGlsZC50ZXh0LnNsaWNlKDAsIGZvcndhcmRTZWxlY3Rpb24uZm9jdXMub2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZXh0Lmxlbmd0aCA+IDAgJiYgKHRleHQgPSB0ZXh0ICsgY2hpbGQudGV4dCk7XG4gICAgICAgIH1cbiAgICAgIGlmIChpc0tleWVkU2VnbWVudChmb3J3YXJkU2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0pICYmIGJsb2NrLl9rZXkgPT09IGZvcndhcmRTZWxlY3Rpb24uZm9jdXMucGF0aFswXS5fa2V5KVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIHJldHVybiB0ZXh0O1xufSwgZ2V0QmxvY2tUZXh0QmVmb3JlID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBpZiAoIWNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybiBcIlwiO1xuICBjb25zdCBwb2ludCA9IChjb250ZXh0LnNlbGVjdGlvbi5iYWNrd2FyZCA/IHJldmVyc2VTZWxlY3Rpb24oY29udGV4dC5zZWxlY3Rpb24pIDogY29udGV4dC5zZWxlY3Rpb24pLmFuY2hvciwga2V5ID0gaXNLZXllZFNlZ21lbnQocG9pbnQucGF0aFswXSkgPyBwb2ludC5wYXRoWzBdLl9rZXkgOiB2b2lkIDAsIGJsb2NrID0ga2V5ID8gY29udGV4dC52YWx1ZS5maW5kKChibG9jazIpID0+IGJsb2NrMi5fa2V5ID09PSBrZXkpIDogdm9pZCAwO1xuICBpZiAoIWJsb2NrKVxuICAgIHJldHVybiBcIlwiO1xuICBjb25zdCBzdGFydE9mQmxvY2sgPSBnZXRCbG9ja1N0YXJ0UG9pbnQoe1xuICAgIG5vZGU6IGJsb2NrLFxuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfV1cbiAgfSk7XG4gIHJldHVybiBnZXRTZWxlY3Rpb25UZXh0KHtcbiAgICBjb250ZXh0OiB7XG4gICAgICAuLi5jb250ZXh0LFxuICAgICAgdmFsdWU6IGNvbnRleHQudmFsdWUsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydE9mQmxvY2ssXG4gICAgICAgIGZvY3VzOiBwb2ludFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuZXhwb3J0IHtcbiAgZ2V0QmxvY2tUZXh0QmVmb3JlLFxuICBnZXRTZWxlY3Rpb25UZXh0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGuards: () => (/* binding */ createGuards),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction createGuards({\n  schema\n}) {\n  function isListBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListBlock)(block) && block._type === schema.block.name;\n  }\n  function isTextBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._type === schema.block.name;\n  }\n  return {\n    isListBlock,\n    isTextBlock\n  };\n}\nconst getFocusBlock = ({\n  context\n}) => {\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusListBlock = ({\n  context\n}) => {\n  const guards = createGuards(context), focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && guards.isListBlock(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusTextBlock = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusBlockObject = ({\n  context\n}) => {\n  const focusBlock = getFocusBlock({\n    context\n  });\n  return focusBlock && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = ({\n  context\n}) => {\n  const focusBlock = getFocusTextBlock({\n    context\n  });\n  if (!focusBlock)\n    return;\n  const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[2]) ? context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = ({\n  context\n}) => {\n  const focusChild = getFocusChild({\n    context\n  });\n  return focusChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getFirstBlock = ({\n  context\n}) => {\n  const node = context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getLastBlock = ({\n  context\n}) => {\n  const node = context.value[context.value.length - 1] ? context.value[context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getSelectedBlocks = ({\n  context\n}) => {\n  if (!context.selection)\n    return [];\n  const selectedBlocks = [], startKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, endKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0;\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getSelectionStartBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getSelectionEndBlock = ({\n  context\n}) => {\n  if (!context.selection)\n    return;\n  const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getPreviousBlock = ({\n  context\n}) => {\n  let previousBlock;\n  const selectionStartBlock = getSelectionStartBlock({\n    context\n  });\n  if (!selectionStartBlock)\n    return;\n  let foundSelectionStartBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = !0;\n      break;\n    }\n    previousBlock = {\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    };\n  }\n  if (foundSelectionStartBlock && previousBlock)\n    return previousBlock;\n}, getNextBlock = ({\n  context\n}) => {\n  let nextBlock;\n  const selectionEndBlock = getSelectionEndBlock({\n    context\n  });\n  if (!selectionEndBlock)\n    return;\n  let foundSelectionEndBlock = !1;\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = !0;\n      continue;\n    }\n    if (foundSelectionEndBlock) {\n      nextBlock = {\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      };\n      break;\n    }\n  }\n  if (foundSelectionEndBlock && nextBlock)\n    return nextBlock;\n}, isSelectionCollapsed = ({\n  context\n}) => JSON.stringify(context.selection?.anchor.path) === JSON.stringify(context.selection?.focus.path) && context.selection?.anchor.offset === context.selection?.focus.offset;\n\n//# sourceMappingURL=selector.is-selection-collapsed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1IO0FBQ25IO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxXQUFXLHNFQUF1QjtBQUNsQztBQUNBO0FBQ0EsV0FBVyxzRUFBdUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQ0FBbUMsMkRBQVk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLEdBQUc7QUFDSCx1QkFBdUIsc0VBQXVCO0FBQzlDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsd0JBQXdCLHNFQUF1QjtBQUMvQztBQUNBO0FBQ0EsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxtQ0FBbUMsMkRBQVk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsR0FBRztBQUNILHVCQUF1QixpRUFBa0I7QUFDekM7QUFDQTtBQUNBLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EscUVBQXFFLDJEQUFZLG9GQUFvRiwyREFBWSwySEFBMkgsMkRBQVksc0ZBQXNGLDJEQUFZO0FBQzFaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsMkNBQTJDLDJEQUFZLG9GQUFvRiwyREFBWTtBQUN2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSwyQ0FBMkMsMkRBQVksc0ZBQXNGLDJEQUFZO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSixDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQWlCQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uMi1lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcz80Y2UwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUG9ydGFibGVUZXh0TGlzdEJsb2NrLCBpc1BvcnRhYmxlVGV4dFRleHRCbG9jaywgaXNLZXlTZWdtZW50LCBpc1BvcnRhYmxlVGV4dFNwYW4gfSBmcm9tIFwiQHNhbml0eS90eXBlc1wiO1xuZnVuY3Rpb24gY3JlYXRlR3VhcmRzKHtcbiAgc2NoZW1hXG59KSB7XG4gIGZ1bmN0aW9uIGlzTGlzdEJsb2NrKGJsb2NrKSB7XG4gICAgcmV0dXJuIGlzUG9ydGFibGVUZXh0TGlzdEJsb2NrKGJsb2NrKSAmJiBibG9jay5fdHlwZSA9PT0gc2NoZW1hLmJsb2NrLm5hbWU7XG4gIH1cbiAgZnVuY3Rpb24gaXNUZXh0QmxvY2soYmxvY2spIHtcbiAgICByZXR1cm4gaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soYmxvY2spICYmIGJsb2NrLl90eXBlID09PSBzY2hlbWEuYmxvY2submFtZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzTGlzdEJsb2NrLFxuICAgIGlzVGV4dEJsb2NrXG4gIH07XG59XG5jb25zdCBnZXRGb2N1c0Jsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBrZXkgPSBjb250ZXh0LnNlbGVjdGlvbiAmJiBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdLl9rZXkgOiB2b2lkIDAsIG5vZGUgPSBrZXkgPyBjb250ZXh0LnZhbHVlLmZpbmQoKGJsb2NrKSA9PiBibG9jay5fa2V5ID09PSBrZXkpIDogdm9pZCAwO1xuICByZXR1cm4gbm9kZSAmJiBrZXkgPyB7XG4gICAgbm9kZSxcbiAgICBwYXRoOiBbe1xuICAgICAgX2tleToga2V5XG4gICAgfV1cbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZvY3VzTGlzdEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBndWFyZHMgPSBjcmVhdGVHdWFyZHMoY29udGV4dCksIGZvY3VzQmxvY2sgPSBnZXRGb2N1c0Jsb2NrKHtcbiAgICBjb250ZXh0XG4gIH0pO1xuICByZXR1cm4gZm9jdXNCbG9jayAmJiBndWFyZHMuaXNMaXN0QmxvY2soZm9jdXNCbG9jay5ub2RlKSA/IHtcbiAgICBub2RlOiBmb2N1c0Jsb2NrLm5vZGUsXG4gICAgcGF0aDogZm9jdXNCbG9jay5wYXRoXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c1RleHRCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3QgZm9jdXNCbG9jayA9IGdldEZvY3VzQmxvY2soe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIHJldHVybiBmb2N1c0Jsb2NrICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGZvY3VzQmxvY2subm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNCbG9jay5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQmxvY2sucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNCbG9ja09iamVjdCA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3QgZm9jdXNCbG9jayA9IGdldEZvY3VzQmxvY2soe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIHJldHVybiBmb2N1c0Jsb2NrICYmICFpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhmb2N1c0Jsb2NrLm5vZGUpID8ge1xuICAgIG5vZGU6IGZvY3VzQmxvY2subm9kZSxcbiAgICBwYXRoOiBmb2N1c0Jsb2NrLnBhdGhcbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZvY3VzQ2hpbGQgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGNvbnN0IGZvY3VzQmxvY2sgPSBnZXRGb2N1c1RleHRCbG9jayh7XG4gICAgY29udGV4dFxuICB9KTtcbiAgaWYgKCFmb2N1c0Jsb2NrKVxuICAgIHJldHVybjtcbiAgY29uc3Qga2V5ID0gY29udGV4dC5zZWxlY3Rpb24gJiYgaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMl0pID8gY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFsyXS5fa2V5IDogdm9pZCAwLCBub2RlID0ga2V5ID8gZm9jdXNCbG9jay5ub2RlLmNoaWxkcmVuLmZpbmQoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogWy4uLmZvY3VzQmxvY2sucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiBrZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNTcGFuID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBmb2N1c0NoaWxkID0gZ2V0Rm9jdXNDaGlsZCh7XG4gICAgY29udGV4dFxuICB9KTtcbiAgcmV0dXJuIGZvY3VzQ2hpbGQgJiYgaXNQb3J0YWJsZVRleHRTcGFuKGZvY3VzQ2hpbGQubm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNDaGlsZC5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQ2hpbGQucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rmlyc3RCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3Qgbm9kZSA9IGNvbnRleHQudmFsdWVbMF07XG4gIHJldHVybiBub2RlID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IG5vZGUuX2tleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRMYXN0QmxvY2sgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBjb250ZXh0LnZhbHVlW2NvbnRleHQudmFsdWUubGVuZ3RoIC0gMV0gPyBjb250ZXh0LnZhbHVlW2NvbnRleHQudmFsdWUubGVuZ3RoIC0gMV0gOiB2b2lkIDA7XG4gIHJldHVybiBub2RlID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IG5vZGUuX2tleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRTZWxlY3RlZEJsb2NrcyA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgaWYgKCFjb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm4gW107XG4gIGNvbnN0IHNlbGVjdGVkQmxvY2tzID0gW10sIHN0YXJ0S2V5ID0gY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdLl9rZXkgOiB2b2lkIDAgOiBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0uX2tleSA6IHZvaWQgMCwgZW5kS2V5ID0gY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0uX2tleSA6IHZvaWQgMCA6IGlzS2V5U2VnbWVudChjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdKSA/IGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0uX2tleSA6IHZvaWQgMDtcbiAgaWYgKCFzdGFydEtleSB8fCAhZW5kS2V5KVxuICAgIHJldHVybiBzZWxlY3RlZEJsb2NrcztcbiAgZm9yIChjb25zdCBibG9jayBvZiBjb250ZXh0LnZhbHVlKSB7XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IHN0YXJ0S2V5KSB7XG4gICAgICBpZiAoc2VsZWN0ZWRCbG9ja3MucHVzaCh7XG4gICAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgfV1cbiAgICAgIH0pLCBzdGFydEtleSA9PT0gZW5kS2V5KVxuICAgICAgICBicmVhaztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYmxvY2suX2tleSA9PT0gZW5kS2V5KSB7XG4gICAgICBzZWxlY3RlZEJsb2Nrcy5wdXNoKHtcbiAgICAgICAgbm9kZTogYmxvY2ssXG4gICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9XVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMCAmJiBzZWxlY3RlZEJsb2Nrcy5wdXNoKHtcbiAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgcGF0aDogW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc2VsZWN0ZWRCbG9ja3M7XG59LCBnZXRTZWxlY3Rpb25TdGFydEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBpZiAoIWNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3Qga2V5ID0gY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdLl9rZXkgOiB2b2lkIDAgOiBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0uX2tleSA6IHZvaWQgMCwgbm9kZSA9IGtleSA/IGNvbnRleHQudmFsdWUuZmluZCgoYmxvY2spID0+IGJsb2NrLl9rZXkgPT09IGtleSkgOiB2b2lkIDA7XG4gIHJldHVybiBub2RlICYmIGtleSA/IHtcbiAgICBub2RlLFxuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBrZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0U2VsZWN0aW9uRW5kQmxvY2sgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGlmICghY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBrZXkgPSBjb250ZXh0LnNlbGVjdGlvbi5iYWNrd2FyZCA/IGlzS2V5U2VnbWVudChjb250ZXh0LnNlbGVjdGlvbi5hbmNob3IucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5hbmNob3IucGF0aFswXS5fa2V5IDogdm9pZCAwIDogaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXS5fa2V5IDogdm9pZCAwLCBub2RlID0ga2V5ID8gY29udGV4dC52YWx1ZS5maW5kKChibG9jaykgPT4gYmxvY2suX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGtleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRQcmV2aW91c0Jsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBsZXQgcHJldmlvdXNCbG9jaztcbiAgY29uc3Qgc2VsZWN0aW9uU3RhcnRCbG9jayA9IGdldFNlbGVjdGlvblN0YXJ0QmxvY2soe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIGlmICghc2VsZWN0aW9uU3RhcnRCbG9jaylcbiAgICByZXR1cm47XG4gIGxldCBmb3VuZFNlbGVjdGlvblN0YXJ0QmxvY2sgPSAhMTtcbiAgZm9yIChjb25zdCBibG9jayBvZiBjb250ZXh0LnZhbHVlKSB7XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IHNlbGVjdGlvblN0YXJ0QmxvY2subm9kZS5fa2V5KSB7XG4gICAgICBmb3VuZFNlbGVjdGlvblN0YXJ0QmxvY2sgPSAhMDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwcmV2aW91c0Jsb2NrID0ge1xuICAgICAgbm9kZTogYmxvY2ssXG4gICAgICBwYXRoOiBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9XVxuICAgIH07XG4gIH1cbiAgaWYgKGZvdW5kU2VsZWN0aW9uU3RhcnRCbG9jayAmJiBwcmV2aW91c0Jsb2NrKVxuICAgIHJldHVybiBwcmV2aW91c0Jsb2NrO1xufSwgZ2V0TmV4dEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBsZXQgbmV4dEJsb2NrO1xuICBjb25zdCBzZWxlY3Rpb25FbmRCbG9jayA9IGdldFNlbGVjdGlvbkVuZEJsb2NrKHtcbiAgICBjb250ZXh0XG4gIH0pO1xuICBpZiAoIXNlbGVjdGlvbkVuZEJsb2NrKVxuICAgIHJldHVybjtcbiAgbGV0IGZvdW5kU2VsZWN0aW9uRW5kQmxvY2sgPSAhMTtcbiAgZm9yIChjb25zdCBibG9jayBvZiBjb250ZXh0LnZhbHVlKSB7XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IHNlbGVjdGlvbkVuZEJsb2NrLm5vZGUuX2tleSkge1xuICAgICAgZm91bmRTZWxlY3Rpb25FbmRCbG9jayA9ICEwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChmb3VuZFNlbGVjdGlvbkVuZEJsb2NrKSB7XG4gICAgICBuZXh0QmxvY2sgPSB7XG4gICAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgfV1cbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGZvdW5kU2VsZWN0aW9uRW5kQmxvY2sgJiYgbmV4dEJsb2NrKVxuICAgIHJldHVybiBuZXh0QmxvY2s7XG59LCBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9ICh7XG4gIGNvbnRleHRcbn0pID0+IEpTT04uc3RyaW5naWZ5KGNvbnRleHQuc2VsZWN0aW9uPy5hbmNob3IucGF0aCkgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRleHQuc2VsZWN0aW9uPy5mb2N1cy5wYXRoKSAmJiBjb250ZXh0LnNlbGVjdGlvbj8uYW5jaG9yLm9mZnNldCA9PT0gY29udGV4dC5zZWxlY3Rpb24/LmZvY3VzLm9mZnNldDtcbmV4cG9ydCB7XG4gIGNyZWF0ZUd1YXJkcyxcbiAgZ2V0Rmlyc3RCbG9jayxcbiAgZ2V0Rm9jdXNCbG9jayxcbiAgZ2V0Rm9jdXNCbG9ja09iamVjdCxcbiAgZ2V0Rm9jdXNDaGlsZCxcbiAgZ2V0Rm9jdXNMaXN0QmxvY2ssXG4gIGdldEZvY3VzU3BhbixcbiAgZ2V0Rm9jdXNUZXh0QmxvY2ssXG4gIGdldExhc3RCbG9jayxcbiAgZ2V0TmV4dEJsb2NrLFxuICBnZXRQcmV2aW91c0Jsb2NrLFxuICBnZXRTZWxlY3RlZEJsb2NrcyxcbiAgZ2V0U2VsZWN0aW9uRW5kQmxvY2ssXG4gIGdldFNlbGVjdGlvblN0YXJ0QmxvY2ssXG4gIGlzU2VsZWN0aW9uQ29sbGFwc2VkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.is-keyed-segment.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js\");\n\n\nfunction blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint;\n  for (const block of value)\n    if (block._key === blockOffset.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      for (const child of block.children)\n        if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n          if (offsetLeft === 0) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: 0\n            };\n            break;\n          }\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n        }\n    }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(selectionPoint.path[0]) ? selectionPoint.path[0]._key : void 0, spanKey = (0,_util_is_keyed_segment_js__WEBPACK_IMPORTED_MODULE_1__.isKeyedSegment)(selectionPoint.path[2]) ? selectionPoint.path[2]._key : void 0;\n  if (!(!blockKey || !spanKey)) {\n    for (const block of value)\n      if (block._key === blockKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (child._key === spanKey)\n              return {\n                path: [{\n                  _key: block._key\n                }],\n                offset: offset + selectionPoint.offset\n              };\n            offset += child.text.length;\n          }\n      }\n  }\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\nfunction isEmptyTextBlock(block) {\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block))\n    return !1;\n  const onlyText = block.children.every(_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan), blockText = getTextBlockText(block);\n  return onlyText && blockText === \"\";\n}\n\n//# sourceMappingURL=util.is-empty-text-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE0RTtBQUNoQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLG1EQUFtRCxzRUFBdUI7QUFDMUU7QUFDQSxZQUFZLGlFQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQix5RUFBYywyRUFBMkUseUVBQWM7QUFDMUg7QUFDQTtBQUNBLHFDQUFxQyxzRUFBdUI7QUFDNUQ7QUFDQSxjQUFjLGlFQUFrQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxzRUFBdUI7QUFDOUI7QUFDQSx3Q0FBd0MsNkRBQWtCO0FBQzFEO0FBQ0E7QUFNRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uMi1lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzPzQyMDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2ssIGlzUG9ydGFibGVUZXh0U3BhbiB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5pbXBvcnQgeyBpc0tleWVkU2VnbWVudCB9IGZyb20gXCIuL3V0aWwuaXMta2V5ZWQtc2VnbWVudC5qc1wiO1xuZnVuY3Rpb24gYmxvY2tPZmZzZXRUb1NwYW5TZWxlY3Rpb25Qb2ludCh7XG4gIHZhbHVlLFxuICBibG9ja09mZnNldFxufSkge1xuICBsZXQgb2Zmc2V0TGVmdCA9IGJsb2NrT2Zmc2V0Lm9mZnNldCwgc2VsZWN0aW9uUG9pbnQ7XG4gIGZvciAoY29uc3QgYmxvY2sgb2YgdmFsdWUpXG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrT2Zmc2V0LnBhdGhbMF0uX2tleSAmJiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhibG9jaykpIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pXG4gICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgaWYgKG9mZnNldExlZnQgPT09IDApIHtcbiAgICAgICAgICAgIHNlbGVjdGlvblBvaW50ID0ge1xuICAgICAgICAgICAgICBwYXRoOiBbLi4uYmxvY2tPZmZzZXQucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvZmZzZXRMZWZ0IDw9IGNoaWxkLnRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Qb2ludCA9IHtcbiAgICAgICAgICAgICAgcGF0aDogWy4uLmJsb2NrT2Zmc2V0LnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0TGVmdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvZmZzZXRMZWZ0IC09IGNoaWxkLnRleHQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICByZXR1cm4gc2VsZWN0aW9uUG9pbnQ7XG59XG5mdW5jdGlvbiBzcGFuU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0KHtcbiAgdmFsdWUsXG4gIHNlbGVjdGlvblBvaW50XG59KSB7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBjb25zdCBibG9ja0tleSA9IGlzS2V5ZWRTZWdtZW50KHNlbGVjdGlvblBvaW50LnBhdGhbMF0pID8gc2VsZWN0aW9uUG9pbnQucGF0aFswXS5fa2V5IDogdm9pZCAwLCBzcGFuS2V5ID0gaXNLZXllZFNlZ21lbnQoc2VsZWN0aW9uUG9pbnQucGF0aFsyXSkgPyBzZWxlY3Rpb25Qb2ludC5wYXRoWzJdLl9rZXkgOiB2b2lkIDA7XG4gIGlmICghKCFibG9ja0tleSB8fCAhc3BhbktleSkpIHtcbiAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIHZhbHVlKVxuICAgICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrS2V5ICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKVxuICAgICAgICAgIGlmIChpc1BvcnRhYmxlVGV4dFNwYW4oY2hpbGQpKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gc3BhbktleSlcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICsgc2VsZWN0aW9uUG9pbnQub2Zmc2V0XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvZmZzZXQgKz0gY2hpbGQudGV4dC5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRUZXh0QmxvY2tUZXh0KGJsb2NrKSB7XG4gIHJldHVybiBibG9jay5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBjaGlsZC50ZXh0ID8/IFwiXCIpLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBpc0VtcHR5VGV4dEJsb2NrKGJsb2NrKSB7XG4gIGlmICghaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soYmxvY2spKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgb25seVRleHQgPSBibG9jay5jaGlsZHJlbi5ldmVyeShpc1BvcnRhYmxlVGV4dFNwYW4pLCBibG9ja1RleHQgPSBnZXRUZXh0QmxvY2tUZXh0KGJsb2NrKTtcbiAgcmV0dXJuIG9ubHlUZXh0ICYmIGJsb2NrVGV4dCA9PT0gXCJcIjtcbn1cbmV4cG9ydCB7XG4gIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQsXG4gIGdldFRleHRCbG9ja1RleHQsXG4gIGlzRW1wdHlUZXh0QmxvY2ssXG4gIHNwYW5TZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmlzLWVtcHR5LXRleHQtYmxvY2suanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKeyedSegment: () => (/* binding */ isKeyedSegment)\n/* harmony export */ });\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && segment !== null && \"_key\" in segment;\n}\n\n//# sourceMappingURL=util.is-keyed-segment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1rZXllZC1zZWdtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uMi1lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1rZXllZC1zZWdtZW50LmpzPzVjOTQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNLZXllZFNlZ21lbnQoc2VnbWVudCkge1xuICByZXR1cm4gdHlwZW9mIHNlZ21lbnQgPT0gXCJvYmplY3RcIiAmJiBzZWdtZW50ICE9PSBudWxsICYmIFwiX2tleVwiIGluIHNlZ21lbnQ7XG59XG5leHBvcnQge1xuICBpc0tleWVkU2VnbWVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuaXMta2V5ZWQtc2VnbWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-keyed-segment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockStartPoint: () => (/* binding */ getBlockStartPoint),\n/* harmony export */   reverseSelection: () => (/* binding */ reverseSelection)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction getBlockStartPoint({\n  node,\n  path\n}) {\n  return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(node) ? {\n    path: [...path, \"children\", {\n      _key: node.children[0]._key\n    }],\n    offset: 0\n  } : {\n    path,\n    offset: 0\n  };\n}\nfunction reverseSelection(selection) {\n  return selection.backward ? {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !1\n  } : {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !0\n  };\n}\n\n//# sourceMappingURL=util.reverse-selection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5yZXZlcnNlLXNlbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELFNBQVMsc0VBQXVCO0FBQ2hDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uMi1lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5yZXZlcnNlLXNlbGVjdGlvbi5qcz8wYjg0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrIH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmZ1bmN0aW9uIGdldEJsb2NrU3RhcnRQb2ludCh7XG4gIG5vZGUsXG4gIHBhdGhcbn0pIHtcbiAgcmV0dXJuIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKG5vZGUpID8ge1xuICAgIHBhdGg6IFsuLi5wYXRoLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgIF9rZXk6IG5vZGUuY2hpbGRyZW5bMF0uX2tleVxuICAgIH1dLFxuICAgIG9mZnNldDogMFxuICB9IDoge1xuICAgIHBhdGgsXG4gICAgb2Zmc2V0OiAwXG4gIH07XG59XG5mdW5jdGlvbiByZXZlcnNlU2VsZWN0aW9uKHNlbGVjdGlvbikge1xuICByZXR1cm4gc2VsZWN0aW9uLmJhY2t3YXJkID8ge1xuICAgIGFuY2hvcjogc2VsZWN0aW9uLmZvY3VzLFxuICAgIGZvY3VzOiBzZWxlY3Rpb24uYW5jaG9yLFxuICAgIGJhY2t3YXJkOiAhMVxuICB9IDoge1xuICAgIGFuY2hvcjogc2VsZWN0aW9uLmZvY3VzLFxuICAgIGZvY3VzOiBzZWxlY3Rpb24uYW5jaG9yLFxuICAgIGJhY2t3YXJkOiAhMFxuICB9O1xufVxuZXhwb3J0IHtcbiAgZ2V0QmxvY2tTdGFydFBvaW50LFxuICByZXZlcnNlU2VsZWN0aW9uXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5yZXZlcnNlLXNlbGVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.reverse-selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/behaviors/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coreBehavior: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.coreBehavior),\n/* harmony export */   coreBehaviors: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.coreBehaviors),\n/* harmony export */   createCodeEditorBehaviors: () => (/* binding */ createCodeEditorBehaviors),\n/* harmony export */   createEmojiPickerBehaviors: () => (/* binding */ createEmojiPickerBehaviors),\n/* harmony export */   createLinkBehaviors: () => (/* binding */ createLinkBehaviors),\n/* harmony export */   createMarkdownBehaviors: () => (/* binding */ createMarkdownBehaviors),\n/* harmony export */   defineBehavior: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior),\n/* harmony export */   raise: () => (/* reexport safe */ _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.raise)\n/* harmony export */ });\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_chunks-es/selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var _chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../_chunks-es/selector.get-text-before.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_chunks-es/util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n\n\n\n\n\n\n\nfunction createCodeEditorBehaviors(config) {\n  return [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const isMoveUpShortcut = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(config.moveBlockUpShortcut, event.keyboardEvent), firstBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFirstBlock)({\n        context\n      }), selectedBlocks = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n        context\n      }), blocksAbove = firstBlock?.node._key !== selectedBlocks[0]?.node._key;\n      return !isMoveUpShortcut || !blocksAbove ? !1 : {\n        paths: selectedBlocks.map((block) => block.path)\n      };\n    },\n    actions: [(_, {\n      paths\n    }) => paths.map((at) => ({\n      type: \"move.block up\",\n      at\n    }))]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const isMoveDownShortcut = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(config.moveBlockDownShortcut, event.keyboardEvent), lastBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getLastBlock)({\n        context\n      }), selectedBlocks = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n        context\n      }), blocksBelow = lastBlock?.node._key !== selectedBlocks[selectedBlocks.length - 1]?.node._key;\n      return !isMoveDownShortcut || !blocksBelow ? !1 : {\n        paths: selectedBlocks.map((block) => block.path).reverse()\n      };\n    },\n    actions: [(_, {\n      paths\n    }) => paths.map((at) => ({\n      type: \"move.block down\",\n      at\n    }))]\n  })];\n}\nconst emojiCharRegEx = /^[a-zA-Z-_0-9]{1}$/, incompleteEmojiRegEx = /:([a-zA-Z-_0-9]+)$/, emojiRegEx = /:([a-zA-Z-_0-9]+):$/;\nfunction createEmojiPickerBehaviors(config) {\n  const emojiPickerActor = (0,xstate__WEBPACK_IMPORTED_MODULE_2__.A)(createEmojiPickerMachine());\n  return emojiPickerActor.start(), emojiPickerActor.subscribe((state) => {\n    config.onMatchesChanged({\n      matches: state.context.matches\n    }), config.onSelectedIndexChanged({\n      selectedIndex: state.context.selectedIndex\n    });\n  }), [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text === \":\")\n        return !1;\n      if (!emojiCharRegEx.test(event.text))\n        return {\n          emojis: []\n        };\n      const focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), emojiKeyword = `${(0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      })}${event.text}`.match(incompleteEmojiRegEx)?.[1];\n      return !focusBlock || emojiKeyword === void 0 ? {\n        emojis: []\n      } : {\n        emojis: config.matchEmojis({\n          keyword: emojiKeyword\n        })\n      };\n    },\n    actions: [(_, params) => [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"emojis found\",\n          matches: params.emojis\n        });\n      }\n    }]]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \":\")\n        return !1;\n      const matches = emojiPickerActor.getSnapshot().context.matches, selectedIndex = emojiPickerActor.getSnapshot().context.selectedIndex, emoji = matches[selectedIndex] ? config.parseMatch({\n        match: matches[selectedIndex]\n      }) : void 0, focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      }), emojiKeyword = `${textBefore}:`.match(emojiRegEx)?.[1];\n      if (!focusBlock || emojiKeyword === void 0)\n        return !1;\n      const emojiStringLength = emojiKeyword.length + 2;\n      return emoji ? {\n        focusBlock,\n        emoji,\n        emojiStringLength,\n        textBeforeLength: textBefore.length + 1\n      } : !1;\n    },\n    actions: [() => [{\n      type: \"insert.text\",\n      text: \":\"\n    }], (_, params) => [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"select\"\n        });\n      }\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength - params.emojiStringLength\n      },\n      focus: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength\n      }\n    }, {\n      type: \"insert.text\",\n      text: params.emoji\n    }]]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"key.down\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const matches = emojiPickerActor.getSnapshot().context.matches;\n      if (matches.length === 0)\n        return !1;\n      if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"Escape\", event.keyboardEvent))\n        return {\n          action: \"reset\"\n        };\n      const isEnter = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"Enter\", event.keyboardEvent), isTab = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"Tab\", event.keyboardEvent);\n      if (isEnter || isTab) {\n        const selectedIndex = emojiPickerActor.getSnapshot().context.selectedIndex, emoji = matches[selectedIndex] ? config.parseMatch({\n          match: matches[selectedIndex]\n        }) : void 0;\n        if (!emoji)\n          return !1;\n        const focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n          context\n        }), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n          context\n        }), emojiKeyword = textBefore.match(incompleteEmojiRegEx)?.[1];\n        if (!focusBlock || emojiKeyword === void 0)\n          return !1;\n        const emojiStringLength = emojiKeyword.length + 1;\n        return emoji ? {\n          action: \"select\",\n          focusBlock,\n          emoji,\n          emojiStringLength,\n          textBeforeLength: textBefore.length\n        } : !1;\n      }\n      const isArrowDown = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"ArrowDown\", event.keyboardEvent), isArrowUp = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.isHotkey)(\"ArrowUp\", event.keyboardEvent);\n      return isArrowDown && matches.length > 0 ? {\n        action: \"navigate down\"\n      } : isArrowUp && matches.length > 0 ? {\n        action: \"navigate up\"\n      } : !1;\n    },\n    actions: [(_, params) => params.action === \"select\" ? [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"select\"\n        });\n      }\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength - params.emojiStringLength\n      },\n      focus: {\n        path: params.focusBlock.path,\n        offset: params.textBeforeLength\n      }\n    }, {\n      type: \"insert.text\",\n      text: params.emoji\n    }] : params.action === \"navigate up\" ? [\n      // If we are navigating then we want to hijack the key event and\n      // turn it into a noop.\n      {\n        type: \"noop\"\n      },\n      {\n        type: \"effect\",\n        effect: () => {\n          emojiPickerActor.send({\n            type: \"navigate up\"\n          });\n        }\n      }\n    ] : params.action === \"navigate down\" ? [\n      // If we are navigating then we want to hijack the key event and\n      // turn it into a noop.\n      {\n        type: \"noop\"\n      },\n      {\n        type: \"effect\",\n        effect: () => {\n          emojiPickerActor.send({\n            type: \"navigate down\"\n          });\n        }\n      }\n    ] : [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"reset\"\n        });\n      }\n    }]]\n  }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.unit !== \"character\" || emojiPickerActor.getSnapshot().context.matches.length === 0)\n        return !1;\n      const focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      }), emojiKeyword = textBefore.slice(0, textBefore.length - 1).match(incompleteEmojiRegEx)?.[1];\n      return !focusBlock || emojiKeyword === void 0 ? {\n        emojis: []\n      } : {\n        emojis: config.matchEmojis({\n          keyword: emojiKeyword\n        })\n      };\n    },\n    actions: [(_, params) => [{\n      type: \"effect\",\n      effect: () => {\n        emojiPickerActor.send({\n          type: \"emojis found\",\n          matches: params.emojis\n        });\n      }\n    }]]\n  })];\n}\nfunction createEmojiPickerMachine() {\n  return (0,xstate__WEBPACK_IMPORTED_MODULE_4__.setup)({\n    types: {\n      context: {},\n      events: {}\n    },\n    actions: {\n      \"assign matches\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        matches: ({\n          event\n        }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_4__.assertEvent)(event, \"emojis found\"), event.matches)\n      }),\n      \"reset matches\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        matches: []\n      }),\n      \"reset selected index\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        selectedIndex: 0\n      }),\n      \"increment selected index\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        selectedIndex: ({\n          context\n        }) => context.selectedIndex === context.matches.length - 1 ? 0 : context.selectedIndex + 1\n      }),\n      \"decrement selected index\": (0,xstate__WEBPACK_IMPORTED_MODULE_5__.a)({\n        selectedIndex: ({\n          context\n        }) => context.selectedIndex === 0 ? context.matches.length - 1 : context.selectedIndex - 1\n      })\n    },\n    guards: {\n      \"no matches\": ({\n        context\n      }) => context.matches.length === 0\n    }\n  }).createMachine({\n    id: \"emoji picker\",\n    context: {\n      matches: [],\n      selectedIndex: 0\n    },\n    initial: \"idle\",\n    states: {\n      idle: {\n        on: {\n          \"emojis found\": {\n            actions: \"assign matches\",\n            target: \"showing matches\"\n          }\n        }\n      },\n      \"showing matches\": {\n        always: {\n          guard: \"no matches\",\n          target: \"idle\"\n        },\n        exit: [\"reset selected index\"],\n        on: {\n          \"emojis found\": {\n            actions: \"assign matches\"\n          },\n          \"navigate down\": {\n            actions: \"increment selected index\"\n          },\n          \"navigate up\": {\n            actions: \"decrement selected index\"\n          },\n          reset: {\n            target: \"idle\",\n            actions: [\"reset selected index\", \"reset matches\"]\n          },\n          select: {\n            target: \"idle\",\n            actions: [\"reset selected index\", \"reset matches\"]\n          }\n        }\n      }\n    }\n  });\n}\nfunction looksLikeUrl(text) {\n  let looksLikeUrl2 = !1;\n  try {\n    const url = new URL(text);\n    if (!sensibleProtocols.includes(url.protocol))\n      return !1;\n    looksLikeUrl2 = !0;\n  } catch {\n  }\n  return looksLikeUrl2;\n}\nconst sensibleProtocols = [\"http:\", \"https:\", \"mailto:\", \"tel:\"];\nfunction createLinkBehaviors(config) {\n  const pasteLinkOnSelection = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"paste\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), text = event.data.getData(\"text/plain\"), url = looksLikeUrl(text) ? text : void 0, annotation = url !== void 0 ? config.linkAnnotation?.({\n        url,\n        schema: context.schema\n      }) : void 0;\n      return annotation && !selectionCollapsed ? {\n        annotation\n      } : !1;\n    },\n    actions: [(_, {\n      annotation\n    }) => [{\n      type: \"annotation.add\",\n      annotation\n    }]]\n  }), pasteLinkAtCaret = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"paste\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      }), selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      });\n      if (!focusSpan || !selectionCollapsed)\n        return !1;\n      const text = event.data.getData(\"text/plain\"), url = looksLikeUrl(text) ? text : void 0, annotation = url !== void 0 ? config.linkAnnotation?.({\n        url,\n        schema: context.schema\n      }) : void 0;\n      return url && annotation && selectionCollapsed ? {\n        focusSpan,\n        annotation,\n        url\n      } : !1;\n    },\n    actions: [(_, {\n      annotation,\n      url\n    }) => [{\n      type: \"insert.span\",\n      text: url,\n      annotations: [annotation]\n    }]]\n  });\n  return [pasteLinkOnSelection, pasteLinkAtCaret];\n}\nfunction createMarkdownBehaviors(config) {\n  const automaticBlockquoteOnSpace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.getTextBlockText)(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(context);\n      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {\n        focusTextBlock,\n        style: blockquoteStyle\n      } : !1;\n    },\n    actions: [() => [{\n      type: \"insert.text\",\n      text: \" \"\n    }], (_, {\n      focusTextBlock,\n      style\n    }) => [{\n      type: \"text block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }, {\n      type: \"text block.set\",\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: 2\n      }\n    }]]\n  }), automaticHr = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const hrCharacter = event.text === \"-\" ? \"-\" : event.text === \"*\" ? \"*\" : event.text === \"_\" ? \"_\" : void 0;\n      if (hrCharacter === void 0)\n        return !1;\n      const hrObject = config.horizontalRuleObject?.(context), focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      });\n      if (!hrObject || !focusBlock || !selectionCollapsed)\n        return !1;\n      const textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)({\n        context\n      }), hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3\n        }\n      };\n      return textBefore === `${hrCharacter}${hrCharacter}` ? {\n        hrObject,\n        focusBlock,\n        hrCharacter,\n        hrBlockOffsets\n      } : !1;\n    },\n    actions: [(_, {\n      hrCharacter\n    }) => [{\n      type: \"insert.text\",\n      text: hrCharacter\n    }], (_, {\n      hrObject,\n      hrBlockOffsets\n    }) => [{\n      type: \"insert.block object\",\n      placement: \"before\",\n      blockObject: hrObject\n    }, {\n      type: \"delete.text\",\n      ...hrBlockOffsets\n    }]]\n  }), automaticHrOnPaste = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"paste\",\n    guard: ({\n      context,\n      event\n    }) => {\n      const text = event.data.getData(\"text/plain\"), hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/gm, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(context), focusBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlock)({\n        context\n      });\n      return !hrCharacters || !hrObject || !focusBlock ? !1 : {\n        hrCharacters,\n        hrObject,\n        focusBlock\n      };\n    },\n    actions: [(_, {\n      hrCharacters\n    }) => [{\n      type: \"insert.text\",\n      text: hrCharacters\n    }], (_, {\n      hrObject,\n      focusBlock\n    }) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_7__.isPortableTextTextBlock)(focusBlock.node) ? [{\n      type: \"insert.text block\",\n      textBlock: {\n        children: focusBlock.node.children\n      },\n      placement: \"after\"\n    }, {\n      type: \"insert.block object\",\n      blockObject: hrObject,\n      placement: \"after\"\n    }, {\n      type: \"delete.block\",\n      blockPath: focusBlock.path\n    }] : [{\n      type: \"insert.block object\",\n      blockObject: hrObject,\n      placement: \"after\"\n    }]]\n  }), automaticHeadingOnSpace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.getTextBlockText)(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0;\n      if (blockOffset.offset !== level)\n        return !1;\n      const style = level !== void 0 ? config.headingStyle?.({\n        schema: context.schema,\n        level\n      }) : void 0;\n      return level !== void 0 && style !== void 0 ? {\n        focusTextBlock,\n        style,\n        level\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [event], (_, {\n      focusTextBlock,\n      style,\n      level\n    }) => [{\n      type: \"text block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }, {\n      type: \"text block.set\",\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: level + 1\n      }\n    }]]\n  }), clearStyleOnBackspace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      context\n    }) => {\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(context);\n      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {\n        defaultStyle,\n        focusTextBlock\n      } : !1;\n    },\n    actions: [(_, {\n      defaultStyle,\n      focusTextBlock\n    }) => [{\n      type: \"text block.set\",\n      style: defaultStyle,\n      at: focusTextBlock.path\n    }]]\n  }), automaticListOnSpace = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      context,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n        context\n      }), focusTextBlock = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n        context\n      }), focusSpan = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n        context\n      });\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.spanSelectionPointToBlockOffset)({\n        value: context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_6__.getTextBlockText)(focusTextBlock.node), defaultStyle = config.defaultStyle?.(context), looksLikeUnorderedList = /^(-|\\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;\n      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle\n        };\n      const looksLikeOrderedList = /^1\\./.test(blockText), orderedListStyle = config.orderedListStyle?.(context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;\n      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {\n        focusTextBlock,\n        listItem: orderedListStyle,\n        listItemLength: 2,\n        style: defaultStyle\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [event], (_, {\n      focusTextBlock,\n      style,\n      listItem,\n      listItemLength\n    }) => [{\n      type: \"text block.set\",\n      listItem,\n      level: 1,\n      style,\n      at: focusTextBlock.path\n    }, {\n      type: \"delete.text\",\n      anchor: {\n        path: focusTextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: focusTextBlock.path,\n        offset: listItemLength + 1\n      }\n    }]]\n  });\n  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/behaviors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   editorMachine: () => (/* binding */ editorMachine),\n/* harmony export */   keyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/./node_modules/lodash.startcase/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/./node_modules/lodash/noop.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/./node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/./node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/./node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./_chunks-es/selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var _chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./_chunks-es/util.is-empty-text-block.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-empty-text-block.js\");\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _portabletext_block_tools__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @portabletext/block-tools */ \"(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createEditorSchema(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find((field) => field.name === \"children\");\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\"Valid types for block children not found in schema (required)\");\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter((memberType) => memberType.name !== \"span\") || [], blockObjectTypes = portableTextType.of?.filter((field) => field.name !== blockType.name) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === \"style\");\n  if (!styleField)\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\");\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style) => style.value);\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\");\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find((btField) => btField.name === \"listItem\");\n  if (!listField)\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\");\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction defineSchema(definition) {\n  return definition;\n}\nfunction compileSchemaDefinition(definition) {\n  const blockObjects = definition?.blockObjects?.map((blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with the name `image`\n    name: blockObject.name === \"image\" ? \"tmp-image\" : blockObject.name,\n    title: blockObject.name === \"image\" && blockObject.title === void 0 ? \"Image\" : blockObject.title,\n    fields: []\n  })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n    type: \"object\",\n    name: inlineObject.name,\n    title: inlineObject.title,\n    fields: []\n  })) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [...blockObjects.map((blockObject) => ({\n      type: blockObject.name\n    })), {\n      type: \"block\",\n      name: \"block\",\n      of: inlineObjects.map((inlineObject) => ({\n        type: inlineObject.name\n      })),\n      marks: {\n        decorators: definition?.decorators?.map((decorator) => ({\n          title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(decorator.name),\n          value: decorator.name\n        })) ?? [],\n        annotations: definition?.annotations?.map((annotation) => ({\n          name: annotation.name,\n          type: \"object\",\n          title: annotation.title\n        })) ?? []\n      },\n      lists: definition?.lists?.map((list) => ({\n        value: list.name,\n        title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(list.name)\n      })) ?? [],\n      styles: definition?.styles?.map((style) => ({\n        value: style.name,\n        title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(style.name)\n      })) ?? []\n    }]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createEditorSchema(schema);\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) => blockObject.name === \"tmp-image\" ? {\n      ...blockObject,\n      name: \"image\",\n      type: {\n        ...blockObject.type,\n        name: \"image\"\n      }\n    } : blockObject)\n  };\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_5__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_5__ && debug__WEBPACK_IMPORTED_MODULE_5__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_5__(namespace) : debug__WEBPACK_IMPORTED_MODULE_5__(rootName);\n}\nfunction createKeyedPath(point, value, types) {\n  const blockPath = [point.path[0]];\n  if (!value)\n    return null;\n  const block = value[blockPath[0]];\n  if (!block)\n    return null;\n  const keyedBlockPath = [{\n    _key: block._key\n  }];\n  if (block._type !== types.block.name)\n    return keyedBlockPath;\n  let keyedChildPath;\n  const childPath = point.path.slice(0, 2), child = Array.isArray(block.children) && block.children[childPath[1]];\n  return child && (keyedChildPath = [\"children\", {\n    _key: child._key\n  }]), keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath;\n}\nfunction toSlatePath(path, editor) {\n  if (!editor)\n    return [];\n  const [block, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: [],\n    match: (n) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isKeySegment)(path[0]) && n._key === path[0]._key\n  }))[0] || [void 0, void 0];\n  if (!block || !slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block))\n    return [];\n  if (editor.isVoid(block))\n    return [blockPath[0], 0];\n  const childPath = [path[2]], childIndex = block.children.findIndex((child) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__([{\n    _key: child._key\n  }], childPath));\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex];\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);\n  }\n  return [blockPath[0], 0];\n}\nfunction toPortableTextRange(value, range, types) {\n  if (!range)\n    return null;\n  let anchor = null, focus = null;\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types);\n  anchorPath && range.anchor && (anchor = {\n    path: anchorPath,\n    offset: range.anchor.offset\n  });\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types);\n  focusPath && range.focus && (focus = {\n    path: focusPath,\n    offset: range.focus.offset\n  });\n  const backward = !!(slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(range) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(range));\n  return anchor && focus ? {\n    anchor,\n    focus,\n    backward\n  } : null;\n}\nfunction toSlateRange(selection, editor) {\n  if (!selection || !editor)\n    return null;\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset\n  }, focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset\n  };\n  return focus.path.length === 0 || anchor.path.length === 0 ? null : focus ? {\n    anchor,\n    focus\n  } : null;\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block, voidChildren = [{\n      _key: VOID_CHILD_KEY,\n      _type: \"span\",\n      text: \"\",\n      marks: []\n    }];\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: voidChildren,\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].value), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: voidChildren,\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].value && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), IS_DRAGGING = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_ELEMENT = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_ELEMENT_TARGET = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_TARGET_POSITION = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), DefaultObject = (props) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { style: t0, children: [\n    \"[\",\n    props.value._type,\n    \": \",\n    props.value._key,\n    \"]\"\n  ] }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;\n};\nDefaultObject.displayName = \"DefaultObject\";\nconst debug$j = debugWithName(\"components:DraggableBlock\"), DraggableBlock = (t0) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(51), {\n    children,\n    element,\n    readOnly,\n    blockRef\n  } = t0, editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSlateStatic)(), dragGhostRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(void 0), [isDragOver, setIsDragOver] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n  let t1, t2;\n  $[0] !== editor || $[1] !== element ? (t2 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, element), $[0] = editor, $[1] = element, $[2] = t2) : t2 = $[2], t1 = t2;\n  const isVoid = t1;\n  let t3, t4;\n  $[3] !== editor || $[4] !== element ? (t4 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isInline(editor, element), $[3] = editor, $[4] = element, $[5] = t4) : t4 = $[5], t3 = t4;\n  const isInline = t3, [blockElement, setBlockElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n  let t5, t6;\n  $[6] !== blockRef || $[7] !== editor || $[8] !== element ? (t5 = () => setBlockElement(blockRef ? blockRef.current : slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(editor, element)), t6 = [editor, element, blockRef], $[6] = blockRef, $[7] = editor, $[8] = element, $[9] = t5, $[10] = t6) : (t5 = $[9], t6 = $[10]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t5, t6);\n  let t7;\n  $[11] !== blockElement || $[12] !== editor || $[13] !== element ? (t7 = (event) => {\n    const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor);\n    if (!isMyDragOver || !blockElement)\n      return;\n    event.preventDefault(), event.dataTransfer.dropEffect = \"move\", IS_DRAGGING_ELEMENT_TARGET.set(editor, element);\n    const elementRect = blockElement.getBoundingClientRect(), offset = elementRect.top, height = elementRect.height, Y = event.pageY, loc = Math.abs(offset - Y);\n    if (element === editor.children[0] || (loc < height / 2 ? IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"top\") : IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"bottom\")), isMyDragOver === element) {\n      event.dataTransfer.dropEffect = \"none\";\n      return;\n    }\n    setIsDragOver(!0);\n  }, $[11] = blockElement, $[12] = editor, $[13] = element, $[14] = t7) : t7 = $[14];\n  const handleDragOver = t7;\n  let t8;\n  $[15] === Symbol.for(\"react.memo_cache_sentinel\") ? (t8 = () => {\n    setIsDragOver(!1);\n  }, $[15] = t8) : t8 = $[15];\n  const handleDragLeave = t8;\n  let t9;\n  $[16] !== editor || $[17] !== element ? (t9 = (event_0) => {\n    const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor);\n    if (targetBlock) {\n      IS_DRAGGING.set(editor, !1), event_0.preventDefault(), event_0.stopPropagation(), IS_DRAGGING_ELEMENT_TARGET.delete(editor), dragGhostRef.current && (debug$j(\"Removing drag ghost\"), document.body.removeChild(dragGhostRef.current));\n      const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);\n      IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor);\n      let targetPath = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findPath(editor, targetBlock);\n      const myPath = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findPath(editor, element), isBefore = slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(myPath, targetPath);\n      if (dragPosition === \"bottom\" && !isBefore) {\n        if (targetPath[0] >= editor.children.length - 1) {\n          debug$j(\"target is already at the bottom, not moving\");\n          return;\n        }\n        const originalPath = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(targetPath), debug$j(`Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (dragPosition === \"top\" && isBefore && targetPath[0] !== editor.children.length - 1) {\n        const originalPath_0 = targetPath;\n        targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(targetPath), debug$j(`Adjusting targetPath from ${JSON.stringify(originalPath_0)} to ${JSON.stringify(targetPath)}`);\n      }\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(targetPath, myPath)) {\n        event_0.preventDefault(), debug$j(\"targetPath and myPath is the same, not moving\");\n        return;\n      }\n      debug$j(`Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(targetPath)} (${dragPosition})`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(editor, {\n        at: myPath,\n        to: targetPath\n      }), editor.onChange();\n      return;\n    }\n    debug$j(\"No target element, not doing anything\");\n  }, $[16] = editor, $[17] = element, $[18] = t9) : t9 = $[18];\n  const handleDragEnd = t9;\n  let t10;\n  $[19] !== editor || $[20] !== element ? (t10 = (event_1) => {\n    IS_DRAGGING_BLOCK_ELEMENT.get(editor) && (debug$j(\"On drop (prevented)\", element), event_1.preventDefault(), event_1.stopPropagation(), setIsDragOver(!1));\n  }, $[19] = editor, $[20] = element, $[21] = t10) : t10 = $[21];\n  const handleDrop = t10;\n  let t11;\n  $[22] !== editor || $[23] !== element || $[24] !== isVoid ? (t11 = (event_2) => {\n    if (!isVoid) {\n      IS_DRAGGING_BLOCK_ELEMENT.delete(editor);\n      return;\n    }\n    IS_DRAGGING.set(editor, !0), IS_DRAGGING_BLOCK_ELEMENT.set(editor, element), event_2.stopPropagation();\n    const target = event_2.target;\n    target instanceof HTMLElement && (target.style.opacity = \"1\");\n  }, $[22] = editor, $[23] = element, $[24] = isVoid, $[25] = t11) : t11 = $[25];\n  const handleDrag = t11;\n  let t12;\n  $[26] !== blockElement || $[27] !== editor || $[28] !== handleDrag || $[29] !== isInline || $[30] !== isVoid ? (t12 = (event_3) => {\n    if (!isVoid || isInline) {\n      debug$j(\"Not dragging block\"), IS_DRAGGING_BLOCK_ELEMENT.delete(editor), IS_DRAGGING.set(editor, !1);\n      return;\n    }\n    if (debug$j(\"Drag start\"), IS_DRAGGING.set(editor, !0), event_3.dataTransfer && (event_3.dataTransfer.setData(\"application/portable-text\", \"something\"), event_3.dataTransfer.effectAllowed = \"move\"), blockElement && blockElement instanceof HTMLElement) {\n      let dragGhost = blockElement.cloneNode(!0);\n      const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n      if (customGhost && (dragGhost = customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), document.body) {\n        dragGhostRef.current = dragGhost, dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n        const rect = blockElement.getBoundingClientRect(), x = event_3.clientX - rect.left, y = event_3.clientY - rect.top;\n        dragGhost.style.width = `${rect.width}px`, dragGhost.style.height = `${rect.height}px`, event_3.dataTransfer.setDragImage(dragGhost, x, y);\n      }\n    }\n    handleDrag(event_3);\n  }, $[26] = blockElement, $[27] = editor, $[28] = handleDrag, $[29] = isInline, $[30] = isVoid, $[31] = t12) : t12 = $[31];\n  const handleDragStart = t12;\n  let t13;\n  $[32] !== editor || $[33] !== isDragOver ? (t13 = isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[32] = editor, $[33] = isDragOver, $[34] = t13) : t13 = $[34];\n  const isDraggingOverFirstBlock = t13;\n  let t14;\n  $[35] !== editor || $[36] !== isDragOver ? (t14 = isDragOver && editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[35] = editor, $[36] = isDragOver, $[37] = t14) : t14 = $[37];\n  const isDraggingOverLastBlock = t14, dragPosition_0 = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor), isDraggingOverTop = isDraggingOverFirstBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"top\", isDraggingOverBottom = isDraggingOverLastBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"bottom\";\n  let t15, t16;\n  $[38] === Symbol.for(\"react.memo_cache_sentinel\") ? (t16 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  } }), $[38] = t16) : t16 = $[38], t15 = t16;\n  const dropIndicator = t15;\n  if (readOnly) {\n    let t172;\n    return $[39] !== children ? (t172 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children }), $[39] = children, $[40] = t172) : t172 = $[40], t172;\n  }\n  const t17 = isDraggingOverTop && dropIndicator, t18 = isDraggingOverBottom && dropIndicator;\n  let t19;\n  return $[41] !== children || $[42] !== handleDrag || $[43] !== handleDragEnd || $[44] !== handleDragOver || $[45] !== handleDragStart || $[46] !== handleDrop || $[47] !== isVoid || $[48] !== t17 || $[49] !== t18 ? (t19 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { draggable: isVoid, onDragStart: handleDragStart, onDrag: handleDrag, onDragOver: handleDragOver, onDragLeave: handleDragLeave, onDragEnd: handleDragEnd, onDrop: handleDrop, children: [\n    t17,\n    children,\n    t18\n  ] }), $[41] = children, $[42] = handleDrag, $[43] = handleDragEnd, $[44] = handleDragOver, $[45] = handleDragStart, $[46] = handleDrop, $[47] = isVoid, $[48] = t17, $[49] = t18, $[50] = t19) : t19 = $[50], t19;\n};\nDraggableBlock.displayName = \"DraggableBlock\";\ndebugWithName(\"components:Element\");\nconst EMPTY_ANNOTATIONS = [], inlineBlockStyle = {\n  display: \"inline-block\"\n}, Element = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck\n}) => {\n  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSelected)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), inlineBlockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), focused = selected && editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection) || !1, value = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0], [editor, element, schemaTypes.block.name]);\n  let renderedBlock = children, className;\n  const blockPath = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => [{\n    _key: element._key\n  }], [element]);\n  if (typeof element._type != \"string\")\n    throw new Error(\"Expected element to have a _type property\");\n  if (typeof element._key != \"string\")\n    throw new Error(\"Expected element to have a _key property\");\n  if (editor.isInline(element)) {\n    const path = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findPath(editor, element), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n      depth: 1\n    }), schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type);\n    if (!schemaType)\n      throw new Error(\"Could not find type for inline block element\");\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block)) {\n      const elmPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: element._key\n      }];\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", { ...attributes, children: [\n        children,\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", { draggable: !readOnly, className: \"pt-inline-object\", \"data-testid\": \"pt-inline-object\", ref: inlineBlockObjectRef, style: inlineBlockStyle, contentEditable: !1, children: [\n          renderChild && renderChild({\n            annotations: EMPTY_ANNOTATIONS,\n            // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }),\n            editorElementRef: inlineBlockObjectRef,\n            focused,\n            path: elmPath,\n            schemaType,\n            selected,\n            type: schemaType,\n            value\n          }),\n          !renderChild && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value })\n        ] }, element._key)\n      ] });\n    }\n    throw new Error(\"Block not found!\");\n  }\n  if (element._type === schemaTypes.block.name) {\n    className = \"pt-block pt-text-block\";\n    const isListItem = \"listItem\" in element, style = \"style\" in element && element.style || \"normal\";\n    className = `pt-block pt-text-block pt-text-block-style-${style}`;\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style);\n    renderStyle && blockStyleType && (renderedBlock = renderStyle({\n      block: element,\n      children,\n      focused,\n      selected,\n      value: style,\n      path: blockPath,\n      schemaType: blockStyleType,\n      editorElementRef: blockRef\n    }));\n    let level;\n    if (isListItem && (typeof element.level == \"number\" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item_0) => item_0.value === element.listItem);\n      renderListItem && listType && (renderedBlock = renderListItem({\n        block: value,\n        children: renderedBlock,\n        focused,\n        selected,\n        value: element.listItem,\n        path: blockPath,\n        schemaType: listType,\n        level: value.level || 1,\n        editorElementRef: blockRef\n      }));\n    }\n    const renderProps = Object.defineProperty({\n      children: renderedBlock,\n      editorElementRef: blockRef,\n      focused,\n      level,\n      listItem: isListItem ? element.listItem : void 0,\n      path: blockPath,\n      selected,\n      style,\n      schemaType: schemaTypes.block,\n      value\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.block;\n      }\n    }), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ...attributes, className, spellCheck, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DraggableBlock, { element, readOnly, blockRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: blockRef, children: propsOrDefaultRendered }) }) }, element._key);\n  }\n  const schemaType_0 = schemaTypes.blockObjects.find((_type_0) => _type_0.name === element._type);\n  if (!schemaType_0)\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`);\n  className = \"pt-block pt-object-block\";\n  const block_0 = fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n  let renderedBlockFromProps;\n  if (renderBlock) {\n    const _props = Object.defineProperty({\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }),\n      editorElementRef: blockRef,\n      focused,\n      path: blockPath,\n      schemaType: schemaType_0,\n      selected,\n      value: block_0\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n      }\n    });\n    renderedBlockFromProps = renderBlock(_props);\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { ...attributes, className, children: [\n    children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DraggableBlock, { element, readOnly, blockRef, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: blockRef, contentEditable: !1, children: renderedBlockFromProps || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, { value }) }) })\n  ] }, element._key);\n};\nElement.displayName = \"Element\";\nconst PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n};\nfunction DefaultAnnotation(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== props.annotation ? (t0 = () => alert(JSON.stringify(props.annotation)), $[0] = props.annotation, $[1] = t0) : t0 = $[1];\n  const handleClick = t0;\n  let t1;\n  $[2] === Symbol.for(\"react.memo_cache_sentinel\") ? (t1 = {\n    color: \"blue\"\n  }, $[2] = t1) : t1 = $[2];\n  let t2;\n  return $[3] !== handleClick || $[4] !== props.children ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { style: t1, onClick: handleClick, children: props.children }), $[3] = handleClick, $[4] = props.children, $[5] = t2) : t2 = $[5], t2;\n}\nDefaultAnnotation.displayName = \"DefaultAnnotation\";\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst FLUSH_PATCHES_THROTTLED_MS =  false ? 0 : 1e3, mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"emit has pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"has pending patches\"\n    }),\n    \"emit mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n      context\n    }) => ({\n      type: \"mutation\",\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(context.slateEditor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(context.slateEditor))\n    })),\n    \"clear pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingPatches: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingPatches: ({\n        context,\n        event\n      }) => [...context.pendingPatches, event.patch]\n    })\n  },\n  guards: {\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isNormalizing(context.slateEditor)\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      on: {\n        patch: {\n          actions: [\"defer patch\", \"emit has pending patches\"],\n          target: \"has pending patches\"\n        }\n      }\n    },\n    \"has pending patches\": {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [{\n          guard: \"slate is normalizing\",\n          target: \"idle\",\n          actions: [\"emit mutation\", \"clear pending patches\"]\n        }, {\n          reenter: !0\n        }]\n      },\n      on: {\n        patch: {\n          actions: [\"defer patch\"],\n          reenter: !0\n        }\n      }\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)({\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.value).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1) return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); ) x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n      else if (y1 > text2Length) k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); ) x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n      else if (y2 > text2Length) k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0) return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2) return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++) text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) return [[DIFF_INSERT, text2]];\n  if (!text2) return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1) return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1) return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2) return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText2, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText2, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++) diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; ) switch (diffs[pointer][0]) {\n    case DIFF_INSERT:\n      countInsert++, textInsert += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_DELETE:\n      countDelete++, textDelete += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_EQUAL:\n      countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n      break;\n    default:\n      throw new Error(\"Unknown diff operation\");\n  }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; ) diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; ) getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n        else break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n  } else return -1;\n  return bitap(text, pattern, loc);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++) lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\") return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) adjusted.push({\n    diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n    start1: advanceTo(patch.start1),\n    start2: advanceTo(patch.start2),\n    utf8Start1: patch.utf8Start1,\n    utf8Start2: patch.utf8Start2,\n    length1: patch.length1,\n    length2: patch.length2,\n    utf8Length1: patch.utf8Length1,\n    utf8Length2: patch.utf8Length2\n  });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n  for (const p of patches) p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0) return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\") break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\") patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \") patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nconst debug$i = debugWithName(\"plugin:withUndoRedo\"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor,\n    blockSchemaType\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, blockSchemaType.name);\n    const remotePatches = getRemotePatches(editor);\n    options.subscriptions.push(() => {\n      debug$i(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$i(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$i(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor);\n      let merge = !0;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = shouldMerge(op, lastOp) || overwrite) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$i(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      apply2(op);\n    }, editor.undo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        undos\n      } = editor.history;\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1];\n        if (debug$i(\"Undoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_15__.Operation.inverse).reverse();\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$i(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.redos.push(step), editor.history.undos.pop();\n        }\n      }\n    }, editor.redo = () => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }))\n        return;\n      const {\n        redos\n      } = editor.history;\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1];\n        if (debug$i(\"Redoing\", step), step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n          let transformedOperations = step.operations;\n          otherPatches.forEach((item) => {\n            transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n          });\n          try {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op);\n                  });\n                });\n              });\n            }), editor.normalize(), editor.onChange();\n          } catch (err) {\n            debug$i(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n              undos: [],\n              redos: []\n            }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n            return;\n          }\n          editor.history.undos.push(step), editor.history.redos.pop();\n        }\n      }\n    }, editor;\n  };\n}\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$i(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$i(\"Skipping transformation that targeted removed block\"), []) : [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$i(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_20__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing initial value\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"done syncing initial value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => !context.readOnly && (context.isProcessingLocalChanges || (isChangingRemotely(context.slateEditor) ?? !1)),\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => !(context.previousValue === void 0 && context.pendingValue === void 0) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  on: {\n    \"has pending patches\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"setting up\": {\n      initial: \"syncing initial value\",\n      states: {\n        \"syncing initial value\": {\n          always: {\n            guard: \"initial value synced\",\n            target: \"done syncing initial value\"\n          }\n        },\n        \"done syncing initial value\": {\n          entry: [\"emit done syncing initial value\"],\n          type: \"final\"\n        }\n      }\n    },\n    syncing: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          on: {\n            \"update value\": [{\n              guard: \"is busy\",\n              target: \"busy\",\n              actions: [\"assign pending value\"]\n            }, {\n              target: \"syncing\",\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        busy: {\n          after: {\n            1e3: [{\n              guard: \"is busy\",\n              reenter: !0\n            }, {\n              target: \"syncing\"\n            }]\n          },\n          on: {\n            \"update value\": [{\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        syncing: {\n          always: {\n            guard: \"pending value equals previous value\",\n            target: \"idle\",\n            actions: [\"clear pending value\", \"assign initial value synced\"]\n          },\n          invoke: {\n            src: \"sync value\",\n            id: \"sync value\",\n            input: ({\n              context\n            }) => ({\n              context: {\n                keyGenerator: context.keyGenerator,\n                previousValue: context.previousValue,\n                readOnly: context.readOnly,\n                schema: context.schema\n              },\n              slateEditor: context.slateEditor,\n              streamBlocks: !context.initialValueSynced,\n              value: context.pendingValue\n            })\n          },\n          on: {\n            \"update value\": {\n              actions: [\"assign pending value\"]\n            },\n            patch: {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)]\n            },\n            \"invalid value\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)]\n            },\n            \"value changed\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)]\n            },\n            \"done syncing\": [{\n              guard: \"value changed while syncing\",\n              actions: [\"assign previous value\", \"assign initial value synced\"],\n              reenter: !0\n            }, {\n              target: \"idle\",\n              actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n}), debug$h = debugWithName(\"hook:useSyncValue\");\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$h(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor);\n        const childrenLength = slateEditor.children.length;\n        slateEditor.children.forEach((_, index) => {\n          slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n            at: [childrenLength - 1 - index]\n          });\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n          decorators: []\n        }), {\n          at: [0]\n        }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [0, 0]);\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length;\n            if (slateValueFromProps.length < childrenLength) {\n              for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n                  at: [i]\n                });\n              isChanged = !0;\n            }\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks\n            })) {\n              const {\n                blockChanged,\n                blockValid\n              } = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value\n              });\n              isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n            }\n            resolve();\n          });\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$h(\"Invalid value, returning\"), sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$h(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$h(\"Server value and editor value is equal, no need to sync.\");\n  sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nasync function* getBlocks({\n  slateValue,\n  streamBlocks\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    streamBlocks && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$h.enabled && debug$h(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$h.enabled && debug$h(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$h.enabled && debug$h(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$h(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$h(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$h(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode = slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode && isTextChanged ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode || (debug$h(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$h(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$h(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$g = debugWithName(\"component:PortableTextEditor:Synchronizer\");\nfunction Synchronizer(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(40), {\n    editorActor,\n    slateEditor\n  } = props, value = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(props.editorActor, _temp), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(props.editorActor, _temp2);\n  let t0;\n  $[0] !== props.editorActor ? (t0 = props.editorActor.getSnapshot(), $[0] = props.editorActor, $[1] = t0) : t0 = $[1];\n  const t1 = t0.context.keyGenerator;\n  let t2;\n  $[2] !== props.editorActor ? (t2 = props.editorActor.getSnapshot().matches({\n    \"edit mode\": \"read only\"\n  }), $[2] = props.editorActor, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== props.editorActor ? (t3 = props.editorActor.getSnapshot(), $[4] = props.editorActor, $[5] = t3) : t3 = $[5];\n  let t4;\n  $[6] !== slateEditor || $[7] !== t0.context.keyGenerator || $[8] !== t2 || $[9] !== t3.context.schema ? (t4 = {\n    input: {\n      keyGenerator: t1,\n      readOnly: t2,\n      schema: t3.context.schema,\n      slateEditor\n    }\n  }, $[6] = slateEditor, $[7] = t0.context.keyGenerator, $[8] = t2, $[9] = t3.context.schema, $[10] = t4) : t4 = $[10];\n  const syncActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(syncMachine, t4);\n  let t5;\n  $[11] !== editorActor ? (t5 = editorActor.getSnapshot(), $[11] = editorActor, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== slateEditor || $[14] !== t5.context.schema ? (t6 = {\n    input: {\n      schema: t5.context.schema,\n      slateEditor\n    }\n  }, $[13] = slateEditor, $[14] = t5.context.schema, $[15] = t6) : t6 = $[15];\n  const mutationActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(mutationMachine, t6);\n  let t7, t8;\n  $[16] !== editorActor || $[17] !== mutationActorRef || $[18] !== syncActorRef ? (t7 = () => {\n    const subscription = mutationActorRef.on(\"*\", (event) => {\n      event.type === \"has pending patches\" && syncActorRef.send({\n        type: \"has pending patches\"\n      }), event.type === \"mutation\" && (syncActorRef.send({\n        type: \"mutation\"\n      }), editorActor.send({\n        type: \"mutation\",\n        patches: event.patches,\n        snapshot: event.snapshot,\n        value: event.snapshot\n      }));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t8 = [mutationActorRef, syncActorRef, editorActor], $[16] = editorActor, $[17] = mutationActorRef, $[18] = syncActorRef, $[19] = t7, $[20] = t8) : (t7 = $[19], t8 = $[20]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t7, t8);\n  let t10, t9;\n  $[21] !== props.editorActor || $[22] !== syncActorRef ? (t9 = () => {\n    const subscription_0 = syncActorRef.on(\"*\", (event_0) => {\n      props.editorActor.send(event_0);\n    });\n    return () => {\n      subscription_0.unsubscribe();\n    };\n  }, t10 = [props.editorActor, syncActorRef], $[21] = props.editorActor, $[22] = syncActorRef, $[23] = t10, $[24] = t9) : (t10 = $[23], t9 = $[24]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t9, t10);\n  let t11, t12;\n  $[25] !== readOnly || $[26] !== syncActorRef ? (t11 = () => {\n    syncActorRef.send({\n      type: \"update readOnly\",\n      readOnly\n    });\n  }, t12 = [syncActorRef, readOnly], $[25] = readOnly, $[26] = syncActorRef, $[27] = t11, $[28] = t12) : (t11 = $[27], t12 = $[28]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t11, t12);\n  let t13, t14;\n  $[29] !== syncActorRef || $[30] !== value ? (t13 = () => {\n    debug$g(\"Value from props changed, syncing new value\"), syncActorRef.send({\n      type: \"update value\",\n      value\n    });\n  }, t14 = [syncActorRef, value], $[29] = syncActorRef, $[30] = value, $[31] = t13, $[32] = t14) : (t13 = $[31], t14 = $[32]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t13, t14);\n  let t15;\n  $[33] !== editorActor || $[34] !== mutationActorRef ? (t15 = () => {\n    debug$g(\"Subscribing to patch events\");\n    const sub = editorActor.on(\"patch\", (event_1) => {\n      mutationActorRef.send(event_1);\n    });\n    return () => {\n      debug$g(\"Unsubscribing to patch events\"), sub.unsubscribe();\n    };\n  }, $[33] = editorActor, $[34] = mutationActorRef, $[35] = t15) : t15 = $[35];\n  let t16;\n  return $[36] !== editorActor || $[37] !== mutationActorRef || $[38] !== slateEditor ? (t16 = [editorActor, mutationActorRef, slateEditor], $[36] = editorActor, $[37] = mutationActorRef, $[38] = slateEditor, $[39] = t16) : t16 = $[39], (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t15, t16), null;\n}\nfunction _temp2(s_0) {\n  return s_0.matches({\n    \"edit mode\": \"read only\"\n  });\n}\nfunction _temp(s) {\n  return s.context.value;\n}\nSynchronizer.displayName = \"Synchronizer\";\nconst debug$f = debugWithName(\"operationToPatches\");\nfunction createOperationToPatches(types) {\n  const textBlockName = types.block.name;\n  function insertTextPatch(editor, operation, beforeValue) {\n    debug$f.enabled && debug$f(\"Operation\", JSON.stringify(operation, null, 2));\n    const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.diffMatchPatch)(prevText, textChild.text, path);\n    return patch.value.length ? [patch] : [];\n  }\n  function removeTextPatch(editor, operation, beforeValue) {\n    const block = editor && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;\n    if (child && !textChild)\n      throw new Error(\"Expected span\");\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n    return patch.value ? [patch] : [];\n  }\n  function setNodePatch(editor, operation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]];\n      if (typeof block._key != \"string\")\n        throw new Error(\"Expected block to have a _key\");\n      const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__({\n        ...editor.children[operation.path[0]],\n        ...operation.newProperties\n      }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__);\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(fromSlateValue([setNode], textBlockName)[0], [{\n        _key: block._key\n      }])];\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]];\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]];\n        if (child) {\n          const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n          return keys.forEach((keyName) => {\n            if (keys.length === 1 && keyName === \"_key\") {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(val, [{\n                _key: blockKey\n              }, \"children\", block.children.indexOf(child), keyName]));\n            } else {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(val, [{\n                _key: blockKey\n              }, \"children\", {\n                _key: childKey\n              }, keyName]));\n            }\n          }), patches;\n        }\n        throw new Error(\"Could not find a valid child\");\n      }\n      throw new Error(\"Could not find a valid block\");\n    } else\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n  }\n  function insertNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]], isTextBlock = editor.isTextBlock(block);\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n      return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([fromSlateValue([operation.node], textBlockName)[0]], position, [{\n        _key: targetKey\n      }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([fromSlateValue([operation.node], textBlockName)[0]], \"before\", [operation.path[0]])];\n    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n        ...operation.node\n      };\n      !node._type && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n      const child = fromSlateValue([{\n        _key: \"bogus\",\n        _type: textBlockName,\n        children: [node]\n      }], textBlockName)[0].children[0];\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([child], position, [{\n        _key: block._key\n      }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n        _key: block.children[operation.path[1] - 1]._key\n      }])];\n    }\n    return debug$f(\"Something was inserted into a void block. Not producing editor patches.\"), [];\n  }\n  function splitNodePatch(editor, operation, beforeValue) {\n    const patches = [], splitBlock = editor.children[operation.path[0]];\n    if (!editor.isTextBlock(splitBlock))\n      throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]];\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue([editor.children[operation.path[0] + 1]], textBlockName)[0];\n        targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([targetValue], \"after\", [{\n          _key: splitBlock._key\n        }])), oldBlock.children.slice(operation.position).forEach((span) => {\n          const path = [{\n            _key: oldBlock._key\n          }, \"children\", {\n            _key: span._key\n          }];\n          patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)(path));\n        }));\n      }\n      return patches;\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]];\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = fromSlateValue([{\n          ...splitBlock,\n          children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n        }], textBlockName)[0].children;\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)(targetSpans, \"after\", [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(splitSpan.text, [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }, \"text\"]));\n      }\n      return patches;\n    }\n    return patches;\n  }\n  function removeNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]];\n    if (operation.path.length === 1) {\n      if (block && block._key)\n        return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: block._key\n        }])];\n      throw new Error(\"Block not found\");\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]];\n      return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: spanToRemove._key\n      }])] : (debug$f(\"Span not found in editor trying to remove node\"), []);\n    } else\n      return debug$f(\"Not creating patch inside object block\"), [];\n  }\n  function mergeNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];\n    if (operation.path.length === 1)\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(newBlock, [{\n          _key: newBlock._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n          _key: block._key\n        }]));\n      } else\n        throw new Error(\"Target key not found!\");\n    else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {\n      const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n      updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.set)(updatedSpan.text, [{\n        _key: block._key\n      }, \"children\", {\n        _key: updatedSpan._key\n      }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: removedSpan._key\n      }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n    } else\n      debug$f(\"Void nodes can't be merged, not creating any patches\");\n    return patches;\n  }\n  function moveNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n    if (!targetBlock)\n      return patches;\n    if (operation.path.length === 1) {\n      const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([fromSlateValue([block], textBlockName)[0]], position, [{\n        _key: targetBlock._key\n      }]));\n    } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {\n      const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], textBlockName)[0].children[operation.path[1]];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: child._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)([childToInsert], position, [{\n        _key: targetBlock._key\n      }, \"children\", {\n        _key: targetChild._key\n      }]));\n    }\n    return patches;\n  }\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch\n  };\n}\nconst IS_APPLYING_BEHAVIOR_ACTIONS = /* @__PURE__ */ new WeakMap();\nfunction withApplyingBehaviorActions(editor, fn) {\n  const prev = isApplyingBehaviorActions(editor);\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, !0), fn(), IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, prev);\n}\nfunction isApplyingBehaviorActions(editor) {\n  return IS_APPLYING_BEHAVIOR_ACTIONS.get(editor) ?? !1;\n}\nfunction createWithEventListeners(editorActor, subscriptions) {\n  return function(editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== void 0)\n      return editor;\n    subscriptions.push(() => {\n      const subscription = editorActor.on(\"*\", (event) => {\n        switch (event.type) {\n          case \"annotation.add\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"annotation.add\",\n                annotation: event.annotation\n              },\n              editor\n            });\n            break;\n          }\n          case \"annotation.remove\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"annotation.remove\",\n                annotation: event.annotation\n              },\n              editor\n            });\n            break;\n          }\n          case \"blur\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"blur\"\n              },\n              editor\n            });\n            break;\n          }\n          case \"custom.*\": {\n            editorActor.send({\n              type: \"custom behavior event\",\n              behaviorEvent: event.event,\n              editor\n            });\n            break;\n          }\n          case \"decorator.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"decorator.toggle\",\n                decorator: event.decorator\n              },\n              editor\n            });\n            break;\n          }\n          case \"focus\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"focus\"\n              },\n              editor\n            });\n            break;\n          }\n          case \"insert.block object\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"insert.block object\",\n                placement: event.placement,\n                blockObject: event.blockObject\n              },\n              editor\n            });\n            break;\n          }\n          case \"insert.inline object\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"insert.inline object\",\n                inlineObject: event.inlineObject\n              },\n              editor\n            });\n            break;\n          }\n          case \"list item.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"list item.toggle\",\n                listItem: event.listItem\n              },\n              editor\n            });\n            break;\n          }\n          case \"select\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"select\",\n                selection: event.selection\n              },\n              editor\n            });\n            break;\n          }\n          case \"style.toggle\": {\n            editorActor.send({\n              type: \"behavior event\",\n              behaviorEvent: {\n                type: \"style.toggle\",\n                style: event.style\n              },\n              editor\n            });\n            break;\n          }\n        }\n      });\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n    const {\n      deleteBackward: deleteBackward2,\n      deleteForward: deleteForward2,\n      insertBreak,\n      insertSoftBreak,\n      insertText: insertText2,\n      select\n    } = editor;\n    return editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward2(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward2(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak();\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreak();\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText2(text, options);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text,\n          options\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText2(text, options);\n        }\n      });\n    }, editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location);\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.range(editor, location);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"select\",\n          selection: toPortableTextRange(fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), range, editorActor.getSnapshot().context.schema)\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location);\n        }\n      });\n    }, editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor, schemaTypes) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(operation.node)) {\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node) && node._type === schemaTypes.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$e = debugWithName(\"applyPatches\"), debugVerbose = debug$e.enabled && !0;\nfunction createApplyPatch(schemaTypes) {\n  return (editor, patch) => {\n    let changed = !1;\n    debugVerbose && (debug$e(`\n\nNEW PATCH =============================================================`), debug$e(JSON.stringify(patch, null, 2)));\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schemaTypes);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n        default:\n          debug$e(\"Unhandled patch\", patch.type);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const {\n    block,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$e(\"Block not found\"), !1;\n  if (!child || !childPath)\n    return debug$e(\"Child not found\"), !1;\n  if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);\n  debugState(editor, \"before\");\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return debugState(editor, \"after\"), !0;\n}\nfunction insertPatch(editor, patch, schemaTypes) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!targetBlock || !targetBlockPath)\n    return debug$e(\"Block not found\"), !1;\n  if (patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$e(\"Ignoring patch targeting void value\"), !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex;\n    return debug$e(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), debugState(editor, \"after\"), !0;\n  }\n  const {\n    items,\n    position\n  } = patch;\n  if (!targetChild || !targetChildPath)\n    return debug$e(\"Child not found\"), !1;\n  const childrenToInsert = targetBlock && toSlateValue([{\n    ...targetBlock,\n    children: items\n  }], {\n    schemaTypes\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), targetChildIndex = targetChildPath[1], normalizedIdx = position === \"after\" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [targetChildPath[0], normalizedIdx];\n  return debug$e(`Inserting children at path ${childInsertPath}`), debugState(editor, \"before\"), childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), debugState(editor, \"after\"), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$e(\"Block not found\"), !1;\n  const isTextBlock = editor.isTextBlock(block);\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$e(\"Ignoring setting void value\"), !1;\n  if (debugState(editor, \"before\"), isTextBlock && child && childPath) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(value) && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child)) {\n      const newText = child.text;\n      value.text !== newText && (debug$e(\"Setting text property\"), editor.apply({\n        type: \"remove_text\",\n        path: childPath,\n        offset: 0,\n        text: newText\n      }), editor.apply({\n        type: \"insert_text\",\n        path: childPath,\n        offset: 0,\n        text: value.text\n      }), editor.onChange());\n    } else\n      debug$e(\"Setting non-text property\"), editor.apply({\n        type: \"set_node\",\n        path: childPath,\n        properties: {},\n        newProperties: value\n      });\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug$e(\"Setting block property\");\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: prevChildren,\n      ...prevRest\n    } = block || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: blockPath,\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    }), debug$e(\"Setting children\"), block.children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c2\n      });\n    }), Array.isArray(children) && children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: blockPath.concat(cIndex),\n        node: c2\n      });\n    });\n  } else if (block && \"value\" in block) {\n    const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.applyAll)([block.value], [patch])[0];\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n      ...block,\n      value: newVal\n    }, {\n      at: blockPath\n    }), !0;\n  }\n  return debugState(editor, \"after\"), !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    debug$e(\"Removing everything\"), debugState(editor, \"before\");\n    const previousSelection = editor.selection;\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.children.forEach((_child, i) => {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n        at: [i]\n      });\n    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), debugState(editor, \"after\"), !0;\n  }\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (patch.path.length === 1) {\n    if (!block || !blockPath)\n      return debug$e(\"Block not found\"), !1;\n    const blockIndex = blockPath[0];\n    return debug$e(`Removing block at path [${blockIndex}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: [blockIndex]\n    }), debugState(editor, \"after\"), !0;\n  }\n  return editor.isTextBlock(block) && patch.path[1] === \"children\" && patch.path.length === 3 ? !child || !childPath ? (debug$e(\"Child not found\"), !1) : (debug$e(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, \"before\"), debugVerbose && debug$e(`Removing child at path ${JSON.stringify(childPath)}`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n    at: childPath\n  }), debugState(editor, \"after\"), !0) : !1;\n}\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction debugState(editor, stateName) {\n  debugVerbose && (debug$e(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$e(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));\n}\nfunction findBlockFromPath(editor, path) {\n  let blockIndex = -1;\n  const block = editor.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  return block ? {\n    block,\n    path: [blockIndex]\n  } : {};\n}\nfunction findBlockAndChildFromPath(editor, path) {\n  const {\n    block,\n    path: blockPath\n  } = findBlockFromPath(editor, path);\n  if (!(slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && path[1] === \"children\"))\n    return {\n      block,\n      blockPath,\n      child: void 0,\n      childPath: void 0\n    };\n  let childIndex = -1;\n  const child = block.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  return child ? {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex)\n  } : {\n    block,\n    blockPath,\n    child: void 0,\n    childPath: void 0\n  };\n}\nconst debug$d = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(schemaTypes);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                debug$d.enabled && debug$d(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);\n              });\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$d(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$d(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...patchFunctions.insertTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...patchFunctions.removeTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...patchFunctions.removeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...patchFunctions.splitNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...patchFunctions.insertNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...patchFunctions.setNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...patchFunctions.mergeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...patchFunctions.moveNodePatch(editor, operation, previousChildren)];\n          break;\n      }\n      return !editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.unset)([])], editorActor.send({\n        type: \"unset\",\n        previousValue: fromSlateValue(previousChildren, schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_19__.setIfMissing)([], []), ...patches]), patches.length > 0 && patches.forEach((patch) => {\n        editorActor.send({\n          type: \"patch\",\n          patch: {\n            ...patch,\n            origin: \"local\"\n          }\n        });\n      }), editor;\n    }, editor;\n  };\n}\nconst debug$c = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const node = op.node;\n        if (op.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, node)) {\n          const nextPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(op.path);\n          editor.children[nextPath[0]] || (debug$c(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n            decorators: []\n          })));\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$b = debugWithName(\"plugin:withPortableTextBlockStyle\");\nfunction createWithPortableTextBlockStyle(editorActor, types) {\n  const defaultStyle = types.styles[0].value;\n  return function(editor) {\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry;\n      for (const op of editor.operations)\n        if (op.type === \"split_node\" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(path, op.path)) {\n          const [child] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [op.path[0] + 1, 0]);\n          if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && child.text === \"\") {\n            debug$b(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              style: defaultStyle\n            }, {\n              at: [op.path[0] + 1],\n              voids: !1\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      normalizeNode(nodeEntry);\n    }, editor;\n  };\n}\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nconst debug$a = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor, types) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = types.decorators.map((t) => t.value);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$a(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$a(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$a(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath), decorators2 = types.decorators.map((decorator) => decorator.value), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$a(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = types.decorators.map((decorator) => decorator.value);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$a(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = types.decorators.map((decorator) => decorator.value), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$a(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$a(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(newMarkDefs, node.markDefs)) {\n          debug$a(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          if (movedToNextSpan || movedToPreviousSpan)\n            return;\n        }\n      }\n      if (op.type === \"insert_node\") {\n        const {\n          selection\n        } = editor;\n        if (selection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path\n          }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1]\n          }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation) => !nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n          if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsEnding.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: op.node.marks?.filter((mark) => !annotationsEnding.includes(mark)) ?? []\n            });\n            return;\n          }\n          const annotationsStarting = nextSpanAnnotations?.filter((annotation) => !previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n          if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsStarting.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: op.node.marks?.filter((mark) => !annotationsStarting.includes(mark)) ?? []\n            });\n            return;\n          }\n          const nextSpanDecorators = nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? [];\n          if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"insert_text\") {\n        const {\n          selection\n        } = editor, collapsedSelection = selection ? slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) : !1;\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: selection.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpanAnnotations = nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotation) {\n                apply2(op);\n                return;\n              } else if (!previousSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n            if (atTheEndOfSpan) {\n              if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? []\n                });\n                return;\n              }\n              if (!nextSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n          }\n          if (atTheBeginningOfSpan && !spanIsEmpty && previousSpan) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n              _type: \"span\",\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations ? [] : (previousSpan.marks ?? []).filter((mark) => decorators.includes(mark))\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const marksWithoutAnnotationMarks = ({\n                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n              }.marks || []).filter((mark) => decorators.includes(mark));\n              slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                  marks: marksWithoutAnnotationMarks\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === types.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...oldDefs, ...op.properties.markDefs]);\n          debug$a(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst addDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator;\n  if (editor.selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n      const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(editor.selection) ? [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n      })] : [];\n      splitTextNodes.length > 1 && splitTextNodes.every((node) => node[0].marks?.includes(mark)) ? editor.removeMark(mark) : splitTextNodes.forEach(([node, path]) => {\n        const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks\n        }, {\n          at: path,\n          match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n          split: !0,\n          hanging: !0\n        });\n      });\n    } else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n          marks: [...existingMarks, mark]\n        };\n        editor.marks = marks;\n      }\n    }\n    if (editor.selection) {\n      const selection = editor.selection;\n      editor.selection = {\n        ...selection\n      };\n    }\n  }\n}, removeDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator, {\n    selection\n  } = editor;\n  if (selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n          marks: existingMarks.filter((eMark) => eMark !== mark)\n        };\n        editor.marks = {\n          marks: marks.marks,\n          _type: \"span\"\n        };\n      }\n    }\n    if (editor.selection) {\n      const selection2 = editor.selection;\n      editor.selection = {\n        ...selection2\n      };\n    }\n  }\n};\nfunction isDecoratorActive({\n  editor,\n  decorator\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedTextNodes = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n    at: editor.selection\n  }));\n  return selectedTextNodes.length === 0 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection) ? selectedTextNodes.every((n) => {\n    const [node] = n;\n    return node.marks?.includes(decorator);\n  }) : ({\n    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n  }.marks || []).includes(decorator);\n}\nconst toggleDecoratorActionImplementation = ({\n  context,\n  action\n}) => {\n  isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator\n  }) ? removeDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.remove\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  }) : addDecoratorActionImplementation({\n    context,\n    action: {\n      type: \"decorator.add\",\n      editor: action.editor,\n      decorator: action.decorator\n    }\n  });\n};\ndebugWithName(\"plugin:withPortableTextSelections\");\nfunction createWithPortableTextSelections(editorActor, types) {\n  let prevSelection = null;\n  return function(editor) {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange = null;\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n          if (existing)\n            ptRange = existing;\n          else {\n            const value = editor.children;\n            ptRange = toPortableTextRange(value, editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n          }\n        }\n        ptRange ? editorActor.send({\n          type: \"selection\",\n          selection: ptRange\n        }) : editorActor.send({\n          type: \"selection\",\n          selection: null\n        });\n      }\n      prevSelection = editor.selection;\n    }, {\n      onChange\n    } = editor;\n    return editor.onChange = () => {\n      onChange(), editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      }) || emitPortableTextSelection();\n    }, editor;\n  };\n}\nconst debug$9 = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)(value) && value._type === schemaTypes.block.name, editor.isTextSpan = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(value) && value._type === schemaTypes.span.name, editor.isListBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextListBlock)(value) && value._type === schemaTypes.block.name, editor.isVoid = (element) => schemaTypes.block.name !== element._type && (schemaTypes.blockObjects.map((obj) => obj.name).includes(element._type) || schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$9(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          ...span,\n          _type: schemaTypes.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$9(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$8 = debugWithName(\"plugin:withUtils\");\nfunction createWithUtils({\n  editorActor,\n  schemaTypes\n}) {\n  return function(editor) {\n    return editor.pteExpandToWord = () => {\n      const {\n        selection\n      } = editor;\n      if (selection && !slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n        const [textNode] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection.focus, {\n          depth: 2\n        });\n        if (!textNode || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(textNode) || textNode.text.length === 0) {\n          debug$8(\"pteExpandToWord: Can't expand to word here\");\n          return;\n        }\n        const {\n          focus\n        } = selection, focusOffset = focus.offset, charsBefore = textNode.text.slice(0, focusOffset), charsAfter = textNode.text.slice(focusOffset, -1), isEmpty = (str) => str.match(/\\s/g), whiteSpaceBeforeIndex = charsBefore.split(\"\").reverse().findIndex((str) => isEmpty(str)), newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0, whiteSpaceAfterIndex = charsAfter.split(\"\").findIndex((obj) => isEmpty(obj)), newEndOffset = charsBefore.length + (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);\n        if (!(newStartOffset === newEndOffset || Number.isNaN(newStartOffset) || Number.isNaN(newEndOffset))) {\n          debug$8(\"pteExpandToWord: Expanding to focused word\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n            anchor: {\n              ...selection.anchor,\n              offset: newStartOffset\n            },\n            focus: {\n              ...selection.focus,\n              offset: newEndOffset\n            }\n          });\n          return;\n        }\n        debug$8(\"pteExpandToWord: Can't expand to word here\");\n      }\n    }, editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: schemaTypes.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: schemaTypes.styles[0].value || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => schemaTypes.decorators.find(({\n          value\n        }) => value === decorator))\n      }]\n    }], {\n      schemaTypes\n    })[0], editor;\n  };\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor\n  } = options, schemaTypes = editorActor.getSnapshot().context.schema, operationToPatches = createOperationToPatches(schemaTypes), withObjectKeys = createWithObjectKeys(editorActor, schemaTypes), withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes\n  }), withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor, schemaTypes), withPortableTextBlockStyle = createWithPortableTextBlockStyle(editorActor, schemaTypes), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor,\n    schemaTypes\n  }), withPortableTextSelections = createWithPortableTextSelections(editorActor, schemaTypes);\n  return createWithEventListeners(editorActor, options.subscriptions)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e)))))))))));\n}, debug$7 = debugWithName(\"component:PortableTextEditor:SlateContainer\"), slateEditors = /* @__PURE__ */ new WeakMap();\nfunction createSlateEditor(config) {\n  const existingSlateEditor = slateEditors.get(config.editorActor);\n  if (existingSlateEditor)\n    return debug$7(\"Reusing existing Slate editor instance\", config.editorActor.id), existingSlateEditor;\n  debug$7(\"Creating new Slate editor instance\", config.editorActor.id);\n  const unsubscriptions = [], subscriptions = [], instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_16__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_15__.createEditor)()), {\n    editorActor: config.editorActor,\n    subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {});\n  for (const subscription of subscriptions)\n    unsubscriptions.push(subscription());\n  const initialValue = [instance.pteCreateTextBlock({\n    decorators: []\n  })], slateEditor = {\n    instance,\n    initialValue\n  };\n  return slateEditors.set(config.editorActor, slateEditor), slateEditor;\n}\nconst toggleListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem\n  }) ? removeListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.remove\"\n    }\n  }) : addListItemActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"list item.add\"\n    }\n  });\n}, removeListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isListBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, [\"listItem\", \"level\"], {\n      at\n    });\n}, addListItemActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      level: 1,\n      listItem: action.listItem\n    }, {\n      at\n    });\n};\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nconst toggleStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  isStyleActive({\n    editor: action.editor,\n    style: action.style\n  }) ? removeStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.remove\"\n    }\n  }) : addStyleActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"style.add\"\n    }\n  });\n}, removeStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const defaultStyle = context.schema.styles[0].value, guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      style: defaultStyle\n    }, {\n      at\n    });\n}, addStyleActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection)\n    return;\n  const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_22__.createGuards)(context), selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection,\n    match: (node) => guards.isTextBlock(node)\n  })];\n  for (const [, at] of selectedBlocks)\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n      style: action.style\n    }, {\n      at\n    });\n};\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nconst debug$6 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"focus\"\n        },\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"blur\"\n        },\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      try {\n        return isDecoratorActive({\n          editor,\n          decorator: mark\n        });\n      } catch (err) {\n        return console.warn(err), !1;\n      }\n    },\n    marks: () => ({\n      ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n    }).marks || [],\n    undo: () => editor.undo(),\n    redo: () => editor.redo(),\n    select: (selection) => {\n      const slateSelection = toSlateRange(selection, editor);\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_15__.Node.get(editor, focusChildPath);\n      return isSpanNode && focusNode._type !== types.span.name && (debug$6(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path || [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block object\",\n        blockObject: {\n          name: type.name,\n          value\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        focus: {\n          path,\n          offset: 0\n        },\n        anchor: {\n          path,\n          offset: 0\n        }\n      }, editor);\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => isAnnotationActive({\n      editor,\n      annotation: {\n        name: annotationType\n      }\n    }),\n    addAnnotation: (type, value) => {\n      let paths;\n      return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types\n          },\n          action: {\n            type: \"annotation.add\",\n            annotation: {\n              name: type.name,\n              value: value ?? {}\n            },\n            editor\n          }\n        });\n      }), editor.onChange(), paths;\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange(selection, editor);\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$6(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          options?.mode === \"blocks\" && (debug$6(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$6(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n          })), editor.children.length === 0 && (editor.children = [editor.pteCreateTextBlock({\n            decorators: []\n          })]), editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);\n      return slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nfunction isAnnotationActive({\n  editor,\n  annotation\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2)\n    return !1;\n  try {\n    const spans = [...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node)\n    })];\n    if (spans.length === 0 || spans.some(([span]) => !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) || !span.marks || span.marks?.length === 0)) return !1;\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n        depth: 1\n      });\n      return editor.isTextBlock(block) && block.markDefs ? [...accMarkDefs, ...block.markDefs] : accMarkDefs;\n    }, []);\n    return spans.every(([span]) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) ? span.marks?.map((markKey) => selectionMarkDefs.find((def) => def?._key === markKey)?._type)?.includes(annotation.name) : !1);\n  } catch {\n    return !1;\n  }\n}\nconst addAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  const editor = action.editor, {\n    selection: originalSelection\n  } = editor;\n  let paths;\n  if (originalSelection && (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(originalSelection) && (editor.pteExpandToWord(), editor.onChange()), editor.selection)) {\n    let spanPath, markDefPath;\n    const markDefPaths = [];\n    if (!editor.selection)\n      return;\n    const selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n      reverse: slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection)\n    });\n    for (const [block, blockPath] of selectedBlocks) {\n      if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n        continue;\n      const annotationKey = context.keyGenerator(), markDefs = block.markDefs ?? [];\n      markDefs.find((markDef) => markDef._type === action.annotation.name && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n        markDefs: [...markDefs, {\n          _type: action.annotation.name,\n          _key: annotationKey,\n          ...action.annotation.value\n        }]\n      }, {\n        at: blockPath\n      }), markDefPath = [{\n        _key: block._key\n      }, \"markDefs\", {\n        _key: annotationKey\n      }], slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0\n      });\n      const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n      for (const [span, path] of children) {\n        if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, path))\n          continue;\n        const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark) => markDefs.some((markDef) => markDef._key === mark && markDef._type === action.annotation.name));\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: [...marks.filter((mark) => !existingSameTypeAnnotations.includes(mark)), annotationKey]\n        }, {\n          at: path\n        }), spanPath = [{\n          _key: block._key\n        }, \"children\", {\n          _key: span._key\n        }];\n      }\n    }\n    markDefPath && spanPath && (paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath\n    });\n  }\n  return paths;\n}, removeAnnotationActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor;\n  if (debug$6(\"Removing annotation\", action.annotation.name), !!editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === action.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== action.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n}, toggleAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  if (isAnnotationActive({\n    editor: action.editor,\n    annotation: {\n      name: action.annotation.name\n    }\n  }))\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.remove\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n  else\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: \"annotation.add\",\n        annotation: action.annotation,\n        editor: action.editor\n      }\n    });\n};\nfunction insertBlock({\n  block,\n  placement,\n  editor,\n  schema\n}) {\n  if (editor.selection) {\n    const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      at: editor.selection.focus.path.slice(0, 1),\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n)\n    }))[0] ?? [void 0, void 0];\n    if (placement === \"after\") {\n      const nextPath = [focusBlockPath[0] + 1];\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n        at: nextPath\n      }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n        anchor: {\n          path: [nextPath[0], 0],\n          offset: 0\n        },\n        focus: {\n          path: [nextPath[0], 0],\n          offset: 0\n        }\n      });\n    } else placement === \"before\" ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n      at: focusBlockPath\n    }) : slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block);\n    focusBlock && isEqualToEmptyEditor([focusBlock], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: focusBlockPath\n    });\n  } else {\n    const lastBlock = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n),\n      at: [],\n      reverse: !0\n    }))[0];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block), lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: lastBlock[1]\n    });\n  }\n}\nconst insertBlockObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  const block = toSlateValue([{\n    _key: context.keyGenerator(),\n    _type: action.blockObject.name,\n    ...action.blockObject.value ? action.blockObject.value : {}\n  }], {\n    schemaTypes: context.schema\n  })[0];\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema\n  });\n}, insertBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  const keyGenerator = context.keyGenerator, schema = context.schema, editor = action.editor;\n  if (!editor.selection)\n    return;\n  const [focusSpan] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n    mode: \"lowest\",\n    at: editor.selection.focus,\n    match: (n) => editor.isTextSpan(n),\n    voids: !1\n  }))[0] ?? [void 0], focusDecorators = focusSpan?.marks?.filter((mark) => schema.decorators.some((decorator) => decorator.value === mark)) ?? [], focusAnnotations = focusSpan?.marks?.filter((mark) => !schema.decorators.some((decorator) => decorator.value === mark)) ?? [], anchorBlockPath = editor.selection.anchor.path.slice(0, 1), focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, focusBlockPath);\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(editor.selection), lastFocusBlockChild = focusBlock.children[focusBlock.children.length - 1], atTheEndOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild) ? lastFocusBlockChild.text.length : 0\n    }), atTheStartOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0\n    });\n    if (atTheEndOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n        decorators: [],\n        listItem: focusBlock.listItem,\n        level: focusBlock.level\n      }));\n      return;\n    }\n    if (atTheStartOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n        decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n        listItem: focusBlock.listItem,\n        level: focusBlock.level\n      }));\n      const [nextBlockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath);\n      slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n        anchor: {\n          path: [nextBlockPath, 0],\n          offset: 0\n        },\n        focus: {\n          path: [nextBlockPath, 0],\n          offset: 0\n        }\n      });\n      return;\n    }\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0];\n    if (!atTheStartOfBlock && !atTheEndOfBlock && !selectionAcrossBlocks) {\n      slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection)\n          return;\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n          at: editor.selection\n        });\n        const [nextNode, nextNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath), {\n          depth: 1\n        });\n        if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n          anchor: {\n            path: [...nextNodePath, 0],\n            offset: 0\n          },\n          focus: {\n            path: [...nextNodePath, 0],\n            offset: 0\n          }\n        }), editor.isTextBlock(nextNode) && nextNode.markDefs && nextNode.markDefs.length > 0) {\n          const newMarkDefKeys = /* @__PURE__ */ new Map(), prevNodeSpans = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, focusBlockPath)).map((entry) => entry[0]).filter((node) => editor.isTextSpan(node)), children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, nextNodePath);\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child))\n              continue;\n            const marks = child.marks ?? [];\n            for (const mark of marks)\n              schema.decorators.some((decorator) => decorator.value === mark) || prevNodeSpans.some((prevNodeSpan) => prevNodeSpan.marks?.includes(mark)) && !newMarkDefKeys.has(mark) && newMarkDefKeys.set(mark, keyGenerator());\n            const newMarks = marks.map((mark) => newMarkDefKeys.get(mark) ?? mark);\n            lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(marks, newMarks) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n              marks: newMarks\n            }, {\n              at: childPath\n            });\n          }\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key\n          }));\n          lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(nextNode.markDefs, newMarkDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: nextNodePath,\n            match: (node) => editor.isTextBlock(node)\n          });\n        }\n      }), editor.onChange();\n      return;\n    }\n  }\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n    always: !0\n  });\n}, insertSoftBreakActionImplementation = ({\n  context,\n  action\n}) => {\n  insertBreakActionImplementation({\n    context,\n    action: {\n      ...action,\n      type: \"insert.break\"\n    }\n  });\n}, insertInlineObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!context.schema.inlineObjects.some((inlineObject) => inlineObject.name === action.inlineObject.name)) {\n    console.error(\"Unable to insert unknown inline object\");\n    return;\n  }\n  if (!action.editor.selection) {\n    console.error(\"Unable to insert inline object without selection\");\n    return;\n  }\n  const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  })).at(0) ?? [void 0, void 0];\n  if (!focusTextBlock) {\n    console.error(\"Unable to perform action without focus text block\");\n    return;\n  }\n  const child = toSlateValue([{\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    children: [{\n      _type: action.inlineObject.name,\n      _key: context.keyGenerator(),\n      ...action.inlineObject.value ?? {}\n    }]\n  }], {\n    schemaTypes: context.schema\n  }).at(0)?.children.at(0);\n  if (!child) {\n    console.error(\"Unable to insert inline object\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, child);\n}, insertSpanActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection) {\n    console.error(\"Unable to perform action without selection\", action);\n    return;\n  }\n  const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  }))[0] ?? [void 0, void 0];\n  if (!focusBlock || !focusBlockPath) {\n    console.error(\"Unable to perform action without focus block\", action);\n    return;\n  }\n  const markDefs = focusBlock.markDefs ?? [], annotations = action.annotations ? action.annotations.map((annotation) => ({\n    _type: annotation.name,\n    _key: context.keyGenerator(),\n    ...annotation.value\n  })) : void 0;\n  annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n    markDefs: [...markDefs, ...annotations]\n  }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, {\n    _type: \"span\",\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [...annotations?.map((annotation) => annotation._key) ?? [], ...action.decorators ?? []]\n  });\n}, textBlockSetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n    ...action.style ? {\n      style: action.style\n    } : {},\n    ...action.listItem ? {\n      listItem: action.listItem\n    } : {},\n    ...action.level ? {\n      level: action.level\n    } : {}\n  }, {\n    at\n  });\n}, textBlockUnsetActionImplementation = ({\n  action\n}) => {\n  const at = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, action.props, {\n    at\n  });\n}, behaviorActionImplementations = {\n  \"annotation.add\": addAnnotationActionImplementation,\n  \"annotation.remove\": removeAnnotationActionImplementation,\n  \"annotation.toggle\": toggleAnnotationActionImplementation,\n  blur: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.blur(action.editor);\n  },\n  \"decorator.add\": addDecoratorActionImplementation,\n  \"decorator.remove\": removeDecoratorActionImplementation,\n  \"decorator.toggle\": toggleDecoratorActionImplementation,\n  focus: ({\n    action\n  }) => {\n    slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.focus(action.editor);\n  },\n  \"delete.backward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteBackward)(action.editor, action.unit);\n  },\n  \"delete.forward\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteForward)(action.editor, action.unit);\n  },\n  \"delete.block\": ({\n    action\n  }) => {\n    const range = toSlateRange({\n      anchor: {\n        path: action.blockPath,\n        offset: 0\n      },\n      focus: {\n        path: action.blockPath,\n        offset: 0\n      }\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(action.editor, {\n      at: range\n    });\n  },\n  \"delete.text\": ({\n    context,\n    action\n  }) => {\n    const value = fromSlateValue(action.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)), anchor = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_23__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.anchor\n    }), focus = (0,_chunks_es_util_is_empty_text_block_js__WEBPACK_IMPORTED_MODULE_23__.blockOffsetToSpanSelectionPoint)({\n      value,\n      blockOffset: action.focus\n    });\n    if (!anchor || !focus) {\n      console.error(\"Unable to find anchor or focus selection point\");\n      return;\n    }\n    const range = toSlateRange({\n      anchor,\n      focus\n    }, action.editor);\n    if (!range) {\n      console.error(\"Unable to find Slate range from selection points\");\n      return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(action.editor, {\n      at: range\n    });\n  },\n  \"insert.block object\": insertBlockObjectActionImplementation,\n  \"insert.break\": insertBreakActionImplementation,\n  \"insert.inline object\": insertInlineObjectActionImplementation,\n  \"insert.soft break\": insertSoftBreakActionImplementation,\n  \"insert.span\": insertSpanActionImplementation,\n  \"insert.text\": ({\n    action\n  }) => {\n    (0,slate__WEBPACK_IMPORTED_MODULE_15__.insertText)(action.editor, action.text);\n  },\n  \"insert.text block\": ({\n    context,\n    action\n  }) => {\n    const block = toSlateValue([{\n      _key: context.keyGenerator(),\n      _type: context.schema.block.name,\n      style: context.schema.styles[0].value ?? \"normal\",\n      markDefs: [],\n      children: action.textBlock?.children?.map((child) => ({\n        ...child,\n        _key: context.keyGenerator()\n      })) ?? [{\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: \"\"\n      }]\n    }], {\n      schemaTypes: context.schema\n    })[0];\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement\n    });\n  },\n  effect: ({\n    action\n  }) => {\n    action.effect();\n  },\n  \"list item.add\": addListItemActionImplementation,\n  \"list item.remove\": removeListItemActionImplementation,\n  \"list item.toggle\": toggleListItemActionImplementation,\n  \"move.block\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [toSlatePath(action.to, action.editor)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block down\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]], to = [slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  \"move.block up\": ({\n    action\n  }) => {\n    const at = [toSlatePath(action.at, action.editor)[0]];\n    if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(at))\n      return;\n    const to = [slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(at)[0]];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: \"highest\"\n    });\n  },\n  noop: () => {\n  },\n  select: ({\n    action\n  }) => {\n    const newSelection = toSlateRange(action.selection, action.editor);\n    newSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(action.editor);\n  },\n  \"select.previous block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select previous block without a selection\");\n      return;\n    }\n    const blockPath = action.editor.selection.focus.path.slice(0, 1);\n    if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\");\n      return;\n    }\n    const previousBlockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(blockPath);\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, previousBlockPath);\n  },\n  \"select.next block\": ({\n    action\n  }) => {\n    if (!action.editor.selection) {\n      console.error(\"Unable to select next block without a selection\");\n      return;\n    }\n    const nextBlockPath = [action.editor.selection.focus.path.slice(0, 1)[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, nextBlockPath);\n  },\n  \"style.toggle\": toggleStyleActionImplementation,\n  \"style.add\": addStyleActionImplementation,\n  \"style.remove\": removeStyleActionImplementation,\n  \"text block.set\": textBlockSetActionImplementation,\n  \"text block.unset\": textBlockUnsetActionImplementation\n};\nfunction performAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"annotation.toggle\": {\n      behaviorActionImplementations[\"annotation.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.add\": {\n      behaviorActionImplementations[\"decorator.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.remove\": {\n      behaviorActionImplementations[\"decorator.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.block\": {\n      behaviorActionImplementations[\"delete.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.text\": {\n      behaviorActionImplementations[\"delete.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.span\": {\n      behaviorActionImplementations[\"insert.span\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text block\": {\n      behaviorActionImplementations[\"insert.text block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.add\": {\n      behaviorActionImplementations[\"list item.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.remove\": {\n      behaviorActionImplementations[\"list item.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block\": {\n      behaviorActionImplementations[\"move.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block down\": {\n      behaviorActionImplementations[\"move.block down\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block up\": {\n      behaviorActionImplementations[\"move.block up\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"noop\":\n      break;\n    case \"effect\": {\n      behaviorActionImplementations.effect({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select\": {\n      behaviorActionImplementations.select({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.previous block\": {\n      behaviorActionImplementations[\"select.previous block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select.next block\": {\n      behaviorActionImplementations[\"select.next block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.add\": {\n      behaviorActionImplementations[\"style.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"style.remove\": {\n      behaviorActionImplementations[\"style.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"text block.set\": {\n      behaviorActionImplementations[\"text block.set\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"text block.unset\": {\n      behaviorActionImplementations[\"text block.unset\"]({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      performDefaultAction({\n        context,\n        action\n      });\n  }\n}\nfunction performDefaultAction({\n  context,\n  action\n}) {\n  switch (action.type) {\n    case \"annotation.add\": {\n      behaviorActionImplementations[\"annotation.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"annotation.remove\": {\n      behaviorActionImplementations[\"annotation.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"blur\": {\n      behaviorActionImplementations.blur({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.toggle\": {\n      behaviorActionImplementations[\"decorator.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.backward\": {\n      behaviorActionImplementations[\"delete.backward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.forward\": {\n      behaviorActionImplementations[\"delete.forward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"focus\": {\n      behaviorActionImplementations.focus({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.block object\": {\n      behaviorActionImplementations[\"insert.block object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.inline object\": {\n      behaviorActionImplementations[\"insert.inline object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.break\": {\n      behaviorActionImplementations[\"insert.break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.soft break\": {\n      behaviorActionImplementations[\"insert.soft break\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text\": {\n      behaviorActionImplementations[\"insert.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"list item.toggle\": {\n      behaviorActionImplementations[\"list item.toggle\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"select\": {\n      behaviorActionImplementations.select({\n        context,\n        action\n      });\n      break;\n    }\n    default:\n      behaviorActionImplementations[\"style.toggle\"]({\n        context,\n        action\n      });\n  }\n}\nfunction getActiveDecorators({\n  schema,\n  slateEditorInstance\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value);\n  return ({\n    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(slateEditorInstance) ?? {}\n  }.marks ?? []).filter((mark) => decorators.includes(mark));\n}\nfunction createEditorSnapshot({\n  editor,\n  keyGenerator,\n  schema\n}) {\n  const value = fromSlateValue(editor.children, schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), selection = toPortableTextRange(value, editor.selection, schema);\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema,\n        slateEditorInstance: editor\n      }),\n      keyGenerator,\n      schema,\n      selection,\n      value\n    }\n  };\n}\nconst editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {}\n  },\n  actions: {\n    \"add behavior to context\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"add behavior\"), /* @__PURE__ */ new Set([...context.behaviors, event.behavior]))\n    }),\n    \"remove behavior from context\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"remove behavior\"), context.behaviors.delete(event.behavior), /* @__PURE__ */ new Set([...context.behaviors]))\n    }),\n    \"assign behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      behaviors: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update behaviors\"), new Set(event.behaviors))\n    }),\n    \"assign schema\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      schema: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"update schema\"), event.schema)\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"patch\"), event)),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, [\"patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.b)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        enqueue((0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(event));\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingEvents: []\n    }),\n    \"handle behavior event\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.b)(({\n      context,\n      event,\n      enqueue\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_17__.assertEvent)(event, [\"behavior event\", \"custom behavior event\"]);\n      const defaultAction = event.type === \"custom behavior event\" || event.behaviorEvent.type === \"copy\" || event.behaviorEvent.type === \"key.down\" || event.behaviorEvent.type === \"key.up\" || event.behaviorEvent.type === \"paste\" ? void 0 : {\n        ...event.behaviorEvent,\n        editor: event.editor\n      }, defaultActionCallback = event.type === \"behavior event\" ? event.defaultActionCallback : void 0, eventBehaviors = [...context.behaviors.values()].filter((behavior) => behavior.on === event.behaviorEvent.type);\n      if (eventBehaviors.length === 0) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback();\n              } catch (error) {\n                console.error(new Error(`Performing action \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n              }\n            });\n          });\n          return;\n        }\n        if (!defaultAction)\n          return;\n        withApplyingBehaviorActions(event.editor, () => {\n          slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction\n              });\n            } catch (error) {\n              console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n            }\n          });\n        }), event.editor.onChange();\n        return;\n      }\n      const editorSnapshot = createEditorSnapshot({\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema\n      });\n      let behaviorOverwritten = !1;\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n          context: editorSnapshot.context,\n          event: event.behaviorEvent\n        });\n        if (!shouldRun)\n          continue;\n        const actionIntendSets = eventBehavior.actions.map((actionSet) => actionSet({\n          context: editorSnapshot.context,\n          event: event.behaviorEvent\n        }, shouldRun));\n        for (const actionIntends of actionIntendSets)\n          behaviorOverwritten = behaviorOverwritten || actionIntends.length > 0 && actionIntends.some((actionIntend) => actionIntend.type !== \"effect\"), withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n              for (const actionIntend of actionIntends) {\n                if (actionIntend.type === \"raise\") {\n                  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isCustomBehaviorEvent)(actionIntend.event) ? enqueue.raise({\n                    type: \"custom behavior event\",\n                    behaviorEvent: actionIntend.event,\n                    editor: event.editor\n                  }) : enqueue.raise({\n                    type: \"behavior event\",\n                    behaviorEvent: actionIntend.event,\n                    editor: event.editor\n                  });\n                  continue;\n                }\n                const action = {\n                  ...actionIntend,\n                  editor: event.editor\n                };\n                try {\n                  performAction({\n                    context,\n                    action\n                  });\n                } catch (error) {\n                  console.error(new Error(`Performing action \"${action.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n                  break;\n                }\n              }\n            });\n          }), event.editor.onChange();\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault();\n          break;\n        }\n      }\n      if (!behaviorOverwritten) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback();\n              } catch (error) {\n                console.error(new Error(`Performing \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n              }\n            });\n          });\n          return;\n        }\n        if (!defaultAction)\n          return;\n        withApplyingBehaviorActions(event.editor, () => {\n          slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction\n              });\n            } catch (error) {\n              console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n            }\n          });\n        }), event.editor.onChange();\n      }\n    })\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: new Set(input.behaviors ?? _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.coreBehaviors),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    value: input.value\n  }),\n  on: {\n    \"add behavior\": {\n      actions: \"add behavior to context\"\n    },\n    \"remove behavior\": {\n      actions: \"remove behavior from context\"\n    },\n    unset: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    \"value changed\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    \"invalid value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    error: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    selection: {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)]\n    },\n    blurred: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    focused: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    loading: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n        type: \"loading\"\n      })\n    },\n    patches: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n        event\n      }) => event)\n    },\n    \"done loading\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)({\n        type: \"done loading\"\n      })\n    },\n    \"update behaviors\": {\n      actions: \"assign behaviors\"\n    },\n    \"update schema\": {\n      actions: \"assign schema\"\n    },\n    \"update value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        value: ({\n          event\n        }) => event.value\n      })\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          states: {\n            \"determine initial edit mode\": {\n              on: {\n                \"done syncing initial value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            \"custom behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            \"annotation.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            blur: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"custom.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => ({\n                type: \"custom.*\",\n                event\n              }))\n            },\n            \"decorator.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            focus: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"insert.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"list item.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            select: {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            },\n            \"style.*\": {\n              actions: (0,xstate__WEBPACK_IMPORTED_MODULE_18__.e)(({\n                event\n              }) => event)\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          exit: [\"emit ready\"],\n          on: {\n            patch: {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing initial value\": {\n              target: \"pristine\"\n            }\n          }\n        },\n        pristine: {\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: \"normalizing\"\n                },\n                patch: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                },\n                mutation: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                }\n              }\n            },\n            normalizing: {\n              on: {\n                \"done normalizing\": {\n                  target: \"idle\"\n                },\n                patch: {\n                  actions: \"defer event\"\n                },\n                mutation: {\n                  actions: \"defer event\"\n                }\n              }\n            }\n          }\n        },\n        dirty: {\n          entry: [\"emit pending events\", \"clear pending events\"],\n          on: {\n            patch: {\n              actions: \"emit patch event\"\n            },\n            mutation: {\n              actions: \"emit mutation event\"\n            }\n          }\n        }\n      }\n    }\n  }\n});\nfunction getValue({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return fromSlateValue(slateEditorInstance.children, editorActorSnapshot.context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditorInstance));\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor._internal.slateEditor.instance || $[1] !== selector ? (t1 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: editor._internal.slateEditor.instance\n    });\n    return selector(snapshot);\n  }, $[0] = editor._internal.slateEditor.instance, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({\n        editorActorSnapshot,\n        slateEditorInstance\n      })\n    }\n  };\n}\nconst defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nfunction createEditor(config) {\n  const editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_26__.A)(editorMachine, {\n    input: editorConfigToMachineInput(config)\n  });\n  return editorActor.start(), createEditorFromActor(editorActor);\n}\nfunction useCreateEditor(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== config ? (t0 = editorConfigToMachineInput(config), $[0] = config, $[1] = t0) : t0 = $[1];\n  let t1;\n  $[2] !== t0 ? (t1 = {\n    input: t0\n  }, $[2] = t0, $[3] = t1) : t1 = $[3];\n  const editorActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(editorMachine, t1);\n  let t2, t3;\n  return $[4] !== editorActor ? (t3 = createEditorFromActor(editorActor), $[4] = editorActor, $[5] = t3) : t3 = $[5], t2 = t3, t2;\n}\nfunction editorConfigToMachineInput(config) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition ? compileSchemaDefinition(config.schemaDefinition) : createEditorSchema(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)),\n    value: config.initialValue\n  };\n}\nfunction createEditorFromActor(editorActor) {\n  const slateEditor = createSlateEditor({\n    editorActor\n  }), editable = createEditableAPI(slateEditor.instance, editorActor);\n  return {\n    getSnapshot: () => getEditorSnapshot({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor.instance\n    }),\n    registerBehavior: (config) => (editorActor.send({\n      type: \"add behavior\",\n      behavior: config.behavior\n    }), () => {\n      editorActor.send({\n        type: \"remove behavior\",\n        behavior: config.behavior\n      });\n    }),\n    send: (event) => {\n      editorActor.send(event);\n    },\n    on: (event, listener) => editorActor.on(\n      event,\n      // @ts-expect-error\n      listener\n    ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n}\nconst EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({}), PortableTextEditorSelectionContext = (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditorSelection = () => {\n  const selection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorSelectionContext);\n  if (selection === void 0)\n    throw new Error(\"The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context.\");\n  return selection;\n}, debug$5 = debugWithName(\"component:PortableTextEditor:SelectionProvider\");\nfunction PortableTextEditorSelectionProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6), [selection, setSelection] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n  let t0, t1;\n  $[0] !== props.editorActor ? (t0 = () => {\n    debug$5(\"Subscribing to selection changes\");\n    const subscription = props.editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(() => {\n        setSelection(event.selection);\n      });\n    });\n    return () => {\n      debug$5(\"Unsubscribing to selection changes\"), subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor], $[0] = props.editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1);\n  let t2;\n  return $[3] !== props.children || $[4] !== selection ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionContext.Provider, { value: selection, children: props.children }), $[3] = props.children, $[4] = selection, $[5] = t2) : t2 = $[5], t2;\n}\nconst debug$4 = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_4__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_27__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  constructor(props) {\n    super(props), props.editor ? this.editor = props.editor : this.editor = createEditor({\n      keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n      schema: props.schemaType,\n      initialValue: props.value,\n      maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n      readOnly: props.readOnly\n    }), this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.schema, this.editable = this.editor._internal.editable;\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = createEditorSchema(this.props.schemaType.hasOwnProperty(\"jsonType\") ? this.props.schemaType : compileType(this.props.schemaType)), this.editor._internal.editorActor.send({\n      type: \"update schema\",\n      schema: this.schemaTypes\n    })), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor._internal.editorActor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, { editorActor: this.editor._internal.editorActor, onChange: (change) => {\n        this.props.editor || this.props.onChange(change), this.change$.next(change);\n      } }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, { editorActor: this.editor._internal.editorActor, slateEditor: this.editor._internal.slateEditor.instance }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_16__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, { value: this, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, { editorActor: this.editor._internal.editorActor, children: this.props.children }) }) }) })\n    ] });\n  }\n  // Static API methods\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  static blur = (editor) => {\n    debug$4(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  static focus = (editor) => {\n    debug$4(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  static focusChild = (editor) => editor.editable?.focusChild();\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  static getValue = (editor) => editor.editable?.getValue();\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  static insertChild = (editor, type, value) => (debug$4(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  static select = (editor, selection) => {\n    debug$4(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  static toggleBlockStyle = (editor, blockStyle) => (debug$4(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  static toggleMark = (editor, mark) => {\n    debug$4(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  static getFragment = (editor) => (debug$4(\"Host getting fragment\"), editor.editable?.getFragment());\n  static undo = (editor) => {\n    debug$4(\"Host undoing\"), editor.editable?.undo();\n  };\n  static redo = (editor) => {\n    debug$4(\"Host redoing\"), editor.editable?.redo();\n  };\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\nfunction RouteEventsToChanges(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n  let t0;\n  $[0] !== props ? (t0 = (change) => props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];\n  const handleChange = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(t0);\n  let t1, t2;\n  return $[2] !== handleChange || $[3] !== props.editorActor ? (t1 = () => {\n    debug$4(\"Subscribing to editor changes\");\n    const sub = props.editorActor.on(\"*\", (event) => {\n      bb5: switch (event.type) {\n        case \"blurred\": {\n          handleChange({\n            type: \"blur\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"patch\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !0\n          });\n          break bb5;\n        }\n        case \"done loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !1\n          });\n          break bb5;\n        }\n        case \"focused\": {\n          handleChange({\n            type: \"focus\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"value changed\": {\n          handleChange({\n            type: \"value\",\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"invalid value\": {\n          handleChange({\n            type: \"invalidValue\",\n            resolution: event.resolution,\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"error\": {\n          handleChange({\n            ...event,\n            level: \"warning\"\n          });\n          break bb5;\n        }\n        case \"mutation\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"ready\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"selection\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"unset\":\n          handleChange(event);\n      }\n    });\n    return () => {\n      debug$4(\"Unsubscribing to changes\"), sub.unsubscribe();\n    };\n  }, t2 = [props.editorActor, handleChange], $[2] = handleChange, $[3] = props.editorActor, $[4] = t1, $[5] = t2) : (t1 = $[4], t2 = $[5]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t1, t2), null;\n}\nconst debug$3 = debugWithName(\"components:Leaf\"), EMPTY_MARKS = [], Leaf = (props) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation\n  } = props, spanRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), portableTextEditor = usePortableTextEditor(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), block = children.props.parent, path = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => block ? [{\n    _key: block?._key\n  }, \"children\", {\n    _key: leaf._key\n  }] : [], [block, leaf._key]), decoratorValues = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => schemaTypes.decorators.map((dec) => dec.value), [schemaTypes.decorators]), marks = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))), [decoratorValues, leaf.marks]), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => annotationMarks.map((mark_0) => !decoratorValues.includes(mark_0) && block?.markDefs?.find((def) => def._key === mark_0)).filter(Boolean), [annotationMarks, block, decoratorValues]), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(!1);\n      return;\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor);\n    sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(() => {\n      setFocused(!0);\n    });\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);\n  const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    debug$3(\"Setting selection and focus from range\");\n    const winSelection = window.getSelection();\n    if (!winSelection) {\n      setSelected(!1);\n      return;\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0);\n      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n    } else\n      setSelected(!1);\n  }, [shouldTrackSelectionAndFocus]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const onBlur = editorActor.on(\"blur\", () => {\n      setFocused(!1), setSelected(!1);\n    }), onFocus = editorActor.on(\"focus\", () => {\n      const sel_0 = PortableTextEditor.getSelection(portableTextEditor);\n      sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel_0.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n    }), onSelection = editorActor.on(\"selection\", (event) => {\n      event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(event.selection.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n    });\n    return () => {\n      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n    };\n  }, [editorActor, path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => setSelectedFromRange(), [setSelectedFromRange]);\n  const content = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    let returnedChildren = children;\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark_1) => {\n      const schemaType = schemaTypes.decorators.find((dec_0) => dec_0.value === mark_1);\n      if (schemaType && renderDecorator) {\n        const _props = Object.defineProperty({\n          children: returnedChildren,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          selected,\n          schemaType,\n          value: mark_1\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType;\n          }\n        });\n        returnedChildren = renderDecorator(_props);\n      }\n    }), block && annotations.length > 0 && annotations.forEach((annotation) => {\n      const schemaType_0 = schemaTypes.annotations.find((t) => t.name === annotation._type);\n      if (schemaType_0)\n        if (renderAnnotation) {\n          const _props_0 = Object.defineProperty({\n            block,\n            children: returnedChildren,\n            editorElementRef: spanRef,\n            focused,\n            path,\n            selected,\n            schemaType: schemaType_0,\n            value: annotation\n          }, \"type\", {\n            enumerable: !1,\n            get() {\n              return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n            }\n          });\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ref: spanRef, children: renderAnnotation(_props_0) });\n        } else\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultAnnotation, { annotation, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ref: spanRef, children: returnedChildren }) });\n    }), block && renderChild)) {\n      const child = block.children.find((_child) => _child._key === leaf._key);\n      if (child) {\n        const _props_1 = Object.defineProperty({\n          annotations,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: returnedChildren }),\n          editorElementRef: spanRef,\n          focused,\n          path,\n          schemaType: schemaTypes.span,\n          selected,\n          value: child\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.span;\n          }\n        });\n        returnedChildren = renderChild(_props_1);\n      }\n    }\n    return returnedChildren;\n  }, [annotations, block, children, focused, leaf, marks, path, renderAnnotation, renderChild, renderDecorator, schemaTypes.annotations, schemaTypes.decorators, schemaTypes.span, selected]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { ...attributes, ref: spanRef, children: content }, leaf._key), [leaf, attributes, content]);\n};\nLeaf.displayName = \"Leaf\";\nconst debug$2 = debugWithName(\"plugin:withHotKeys\");\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions ?? {};\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$2(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nconst debug$1 = debugWithName(\"plugin:withInsertData\");\nfunction createWithInsertData(editorActor, schemaTypes) {\n  return function(editor) {\n    const blockTypeName = schemaTypes.block.name, spanTypeName = schemaTypes.span.name, whitespaceOnPasteMode = schemaTypes.block.options.unstable_whitespaceOnPasteMode, toPlainText = (blocks) => blocks.map((block) => editor.isTextBlock(block) ? block.children.map((child) => child._type === spanTypeName ? child.text : `[${schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || \"Object\"}]`).join(\"\") : `[${schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || \"Object\"}]`).join(`\n\n`);\n    return editor.setFragmentData = (data, originEvent) => {\n      const {\n        selection\n      } = editor;\n      if (!selection)\n        return;\n      const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(selection), startVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n        at: start.path\n      }), endVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n        at: end.path\n      });\n      if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) && !startVoid)\n        return;\n      const domRange = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMRange(editor, selection);\n      let contents = domRange.cloneContents();\n      if (endVoid) {\n        const [voidNode] = endVoid, r = domRange.cloneRange(), domNode = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(editor, voidNode);\n        r.setEndAfter(domNode), contents = r.cloneContents();\n      }\n      Array.from(contents.querySelectorAll(\"[data-slate-zero-width]\")).forEach((zw) => {\n        const isNewline = zw.getAttribute(\"data-slate-zero-width\") === \"n\";\n        zw.textContent = isNewline ? `\n` : \"\";\n      }), Array.from(contents.querySelectorAll(\"*\")).forEach((elm) => {\n        elm.removeAttribute(\"contentEditable\"), elm.removeAttribute(\"data-slate-inline\"), elm.removeAttribute(\"data-slate-leaf\"), elm.removeAttribute(\"data-slate-node\"), elm.removeAttribute(\"data-slate-spacer\"), elm.removeAttribute(\"data-slate-string\"), elm.removeAttribute(\"data-slate-zero-width\"), elm.removeAttribute(\"draggable\");\n        for (const key in elm.attributes)\n          elm.hasAttribute(key) && elm.removeAttribute(key);\n      });\n      const div = contents.ownerDocument.createElement(\"div\");\n      div.appendChild(contents), div.setAttribute(\"hidden\", \"true\"), contents.ownerDocument.body.appendChild(div);\n      const asHTML = div.innerHTML;\n      contents.ownerDocument.body.removeChild(div);\n      const fragment = editor.getFragment(), portableText = fromSlateValue(fragment, blockTypeName), asJSON = JSON.stringify(portableText), asPlainText = toPlainText(portableText);\n      data.clearData(), data.setData(\"text/plain\", asPlainText), data.setData(\"text/html\", asHTML), data.setData(\"application/json\", asJSON), data.setData(\"application/x-portable-text\", asJSON), debug$1(\"text\", asPlainText), data.setData(\"application/x-portable-text-event-origin\", originEvent || \"external\"), debug$1(\"Set fragment data\", asJSON, asHTML);\n    }, editor.insertPortableTextData = (data) => {\n      if (!editor.selection)\n        return !1;\n      const pText = data.getData(\"application/x-portable-text\"), origin = data.getData(\"application/x-portable-text-event-origin\");\n      if (debug$1(`Inserting portable text from ${origin} event`, pText), pText) {\n        const parsed = JSON.parse(pText);\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(editor, toSlateValue(parsed, {\n            schemaTypes\n          }), editorActor.getSnapshot().context.keyGenerator, spanTypeName, schemaTypes), validation = validateValue(parsed, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`;\n            return editorActor.send({\n              type: \"error\",\n              name: \"pasteError\",\n              description: errorDescription,\n              data: validation\n            }), debug$1(\"Invalid insert result\", validation), !1;\n          }\n          return _insertFragment(editor, slateValue, schemaTypes), !0;\n        }\n      }\n      return !1;\n    }, editor.insertTextOrHTMLData = (data) => {\n      if (!editor.selection)\n        return debug$1(\"No selection, not inserting\"), !1;\n      const html = data.getData(\"text/html\"), text = data.getData(\"text/plain\");\n      if (html || text) {\n        debug$1(\"Inserting data\", data);\n        let portableText, fragment, insertedType;\n        if (html) {\n          if (portableText = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator\n          }), fragment = toSlateValue(portableText, {\n            schemaTypes\n          }), insertedType = \"HTML\", portableText.length === 0)\n            return !1;\n        } else {\n          const textToHtml = `<html><body>${escapeHtml(text).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`;\n          portableText = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(textToHtml, schemaTypes.portableText, {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator\n          }), fragment = toSlateValue(portableText, {\n            schemaTypes\n          }), insertedType = \"text\";\n        }\n        const validation = validateValue(portableText, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\n${validation.resolution?.description}\nTry to insert as plain text (shift-paste) instead.`;\n          return editorActor.send({\n            type: \"error\",\n            name: \"pasteError\",\n            description: errorDescription,\n            data: validation\n          }), debug$1(\"Invalid insert result\", validation), !1;\n        }\n        return debug$1(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`), _insertFragment(editor, fragment, schemaTypes), !0;\n      }\n      return !1;\n    }, editor.insertData = (data) => {\n      editor.insertPortableTextData(data) || editor.insertTextOrHTMLData(data);\n    }, editor.insertFragmentData = (data) => {\n      const fragment = data.getData(\"application/x-portable-text\");\n      if (fragment) {\n        const parsed = JSON.parse(fragment);\n        return editor.insertFragment(parsed), !0;\n      }\n      return !1;\n    }, editor;\n  };\n}\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nfunction _regenerateKeys(editor, fragment, keyGenerator, spanTypeName, editorTypes) {\n  return fragment.map((node) => {\n    const newNode = {\n      ...node\n    };\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name);\n      if (annotations.length === 0) {\n        const {\n          markDefs,\n          ...NewNodeNoDefs\n        } = newNode;\n        return {\n          ...NewNodeNoDefs,\n          _key: keyGenerator()\n        };\n      }\n      if ((newNode.markDefs || []).some((def) => !annotations.includes(def._type))) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => annotations.includes(def._type));\n        return {\n          ...newNode,\n          markDefs: allowedAnnotations,\n          _key: keyGenerator()\n        };\n      }\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key, newKey = keyGenerator();\n        return newNode.children = newNode.children.map((child) => child._type === spanTypeName && editor.isTextSpan(child) ? {\n          ...child,\n          marks: child.marks && child.marks.includes(oldKey) ? [...child.marks].filter((mark) => mark !== oldKey).concat(newKey) : child.marks\n        } : child), {\n          ...def,\n          _key: newKey\n        };\n      });\n    }\n    const nodeWithNewKeys = {\n      ...newNode,\n      _key: keyGenerator()\n    };\n    return editor.isTextBlock(nodeWithNewKeys) && (nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n      ...child,\n      _key: keyGenerator()\n    }))), nodeWithNewKeys;\n  });\n}\nfunction _insertFragment(editor, fragment, schemaTypes) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection)\n      return;\n    const [focusBlock, focusPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n      depth: 1\n    });\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {\n        markDefs\n      } = focusBlock;\n      debug$1(\"Mixing markDefs of focusBlock and fragments[0] block\", markDefs, fragment[0].markDefs), lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(markDefs, fragment[0].markDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n        markDefs: lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...fragment[0].markDefs || [], ...markDefs || []])\n      }, {\n        at: focusPath,\n        mode: \"lowest\",\n        voids: !1\n      });\n    }\n    isEqualToEmptyEditor(editor.children, schemaTypes) ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n      at: [0, 0]\n    }), editor.insertFragment(fragment), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n      at: [0]\n    })) : editor.insertFragment(fragment);\n  }), editor.onChange();\n}\nfunction withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations\n}) {\n  const originalApply = slateEditor.apply;\n  return slateEditor.apply = (op) => {\n    originalApply(op), !editorActor.getSnapshot().matches({\n      \"edit mode\": \"read only\"\n    }) && op.type !== \"set_selection\" && syncRangeDecorations(op);\n  }, () => {\n    slateEditor.apply = originalApply;\n  };\n}\nconst debug = debugWithName(\"component:Editable\"), PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n}, PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_4__.forwardRef)(function(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, portableTextEditor = usePortableTextEditor(), ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [rangeDecorationState, setRangeDecorationsState] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useImperativeHandle)(forwardedRef, () => ref.current);\n  const rangeDecorationsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(rangeDecorations), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(EditorActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editorActor, (s) => s.matches({\n    \"edit mode\": \"read only\"\n  })), schemaTypes = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editorActor, (s_0) => s_0.context.schema), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_16__.useSlate)(), blockTypeName = schemaTypes.block.name;\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    const withInsertData = createWithInsertData(editorActor, schemaTypes);\n    if (readOnly)\n      return debug(\"Editable is in read only mode\"), withInsertData(slateEditor);\n    const withHotKeys = createWithHotkeys(editorActor, portableTextEditor, hotkeys);\n    return debug(\"Editable is in edit mode\"), withInsertData(withHotKeys(slateEditor));\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, schemaTypes, slateEditor]);\n  const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Element, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, schemaTypes, spellCheck }), [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((lProps) => {\n    if (lProps.leaf._type === \"span\") {\n      let rendered = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Leaf, { ...lProps, editorActor, schemaTypes, renderAnnotation, renderChild, renderDecorator, readOnly });\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === \"\")\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: renderPlaceholder() }),\n          rendered\n        ] });\n      const decoration = lProps.leaf.rangeDecoration;\n      return decoration && (rendered = decoration.component({\n        children: rendered\n      })), rendered;\n    }\n    return lProps.children;\n  }, [editorActor, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes]), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, fromSlateValue(slateEditor.children, blockTypeName));\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = toSlateRange(normalizedSelection, slateEditor);\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === \"set_selection\") || editorActor.send({\n          type: \"selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor]), syncRangeDecorations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((operation) => {\n    if (rangeDecorations && rangeDecorations.length > 0) {\n      const newSlateRanges = [];\n      if (rangeDecorations.forEach((rangeDecorationItem) => {\n        const slateRange_0 = toSlateRange(rangeDecorationItem.selection, slateEditor);\n        if (!slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(slateRange_0)) {\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: null,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n          return;\n        }\n        let newRange;\n        if (operation && (newRange = moveRangeByOperation(slateRange_0, operation), newRange && newRange !== slateRange_0 || newRange === null && slateRange_0)) {\n          const value = PortableTextEditor.getValue(portableTextEditor), newRangeSelection = toPortableTextRange(value, newRange, schemaTypes);\n          rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n            newSelection: newRangeSelection,\n            rangeDecoration: rangeDecorationItem,\n            origin: \"local\"\n          });\n        }\n        newRange !== null && newSlateRanges.push({\n          ...newRange || slateRange_0,\n          rangeDecoration: rangeDecorationItem\n        });\n      }), newSlateRanges.length > 0) {\n        setRangeDecorationsState(newSlateRanges);\n        return;\n      }\n    }\n    setRangeDecorationsState((rangeDecorationState_0) => rangeDecorationState_0.length > 0 ? [] : rangeDecorationState_0);\n  }, [portableTextEditor, rangeDecorations, schemaTypes, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    const onReady = editorActor.on(\"ready\", () => {\n      syncRangeDecorations(), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    syncedRangeDecorations || (setSyncedRangeDecorations(!0), syncRangeDecorations());\n  }, [syncRangeDecorations, syncedRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(rangeDecorations, rangeDecorationsRef.current) || syncRangeDecorations(), rangeDecorationsRef.current = rangeDecorations;\n  }, [rangeDecorations, syncRangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations\n    });\n    return () => teardown();\n  }, [editorActor, slateEditor, syncRangeDecorations]);\n  const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event) => {\n    onCopy ? onCopy(event) !== void 0 && event.preventDefault() : event.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"copy\",\n        data: event.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event\n    });\n  }, [onCopy, editorActor, slateEditor]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_0) => {\n    const value_0 = PortableTextEditor.getValue(portableTextEditor), path = toPortableTextRange(value_0, slateEditor.selection, schemaTypes)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_0,\n      value: value_0,\n      path,\n      schemaTypes\n    });\n    onPasteResult || !slateEditor.selection ? (event_0.preventDefault(), editorActor.send({\n      type: \"loading\"\n    }), Promise.resolve(onPasteResult).then((result_0) => {\n      debug(\"Custom paste function from client resolved\", result_0), !result_0 || !result_0.insert ? (debug(\"No result from custom paste handler, pasting normally\"), slateEditor.insertData(event_0.clipboardData)) : result_0.insert ? slateEditor.insertFragment(toSlateValue(result_0.insert, {\n        schemaTypes\n      })) : console.warn(\"Your onPaste function returned something unexpected:\", result_0);\n    }).catch((error) => (console.error(error), error)).finally(() => {\n      editorActor.send({\n        type: \"done loading\"\n      });\n    })) : event_0.nativeEvent.clipboardData && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"paste\",\n        data: event_0.nativeEvent.clipboardData\n      },\n      editor: slateEditor,\n      nativeEvent: event_0\n    }), debug(\"No result from custom paste handler, pasting normally\");\n  }, [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_1) => {\n    if (onFocus && onFocus(event_1), !event_1.isDefaultPrevented()) {\n      const selection = PortableTextEditor.getSelection(portableTextEditor);\n      selection === null && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_15__.Editor.start(slateEditor, [])), slateEditor.onChange()), editorActor.send({\n        type: \"focused\",\n        event: event_1\n      });\n      const newSelection = PortableTextEditor.getSelection(portableTextEditor);\n      selection === newSelection && editorActor.send({\n        type: \"selection\",\n        selection\n      });\n    }\n  }, [editorActor, onFocus, portableTextEditor, slateEditor]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_2) => {\n    onClick && onClick(event_2);\n    const focusBlockPath = slateEditor.selection ? slateEditor.selection.focus.path.slice(0, 1) : void 0, focusBlock = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(slateEditor, focusBlockPath) : void 0, [_, lastNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Node.last(slateEditor, []), lastBlockPath = lastNodePath.slice(0, 1), lastNodeFocused = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(lastBlockPath, focusBlockPath) : !1, lastBlockIsVoid = focusBlock ? !slateEditor.isTextBlock(focusBlock) : !1;\n    slateEditor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(slateEditor.selection) && lastNodeFocused && lastBlockIsVoid && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n      decorators: []\n    })), slateEditor.onChange());\n  }, [onClick, slateEditor]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_3) => {\n    onBlur && onBlur(event_3), event_3.isPropagationStopped() || editorActor.send({\n      type: \"blurred\",\n      event: event_3\n    });\n  }, [editorActor, onBlur]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_4) => {\n    onBeforeInput && onBeforeInput(event_4);\n  }, [onBeforeInput]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {\n    if (!slateEditor.selection)\n      return;\n    const root = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.findDocumentOrShadowRoot(slateEditor), {\n      activeElement\n    } = root;\n    if (ref.current !== activeElement)\n      return;\n    const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.getWindow(slateEditor).getSelection();\n    if (!domSelection || domSelection.rangeCount === 0)\n      return;\n    const existingDOMRange = domSelection.getRangeAt(0);\n    try {\n      const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n    } catch {\n      debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();\n    }\n  }, [ref, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection);\n      return mutationObserver.observe(editableElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [validateSelection, editableElement]);\n  const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_5) => {\n    props.onKeyDown && props.onKeyDown(event_5), event_5.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_5), event_5.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.down\",\n        keyboardEvent: {\n          key: event_5.key,\n          code: event_5.code,\n          altKey: event_5.altKey,\n          ctrlKey: event_5.ctrlKey,\n          metaKey: event_5.metaKey,\n          shiftKey: event_5.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_5\n    });\n  }, [props, editorActor, slateEditor]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_6) => {\n    props.onKeyUp && props.onKeyUp(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"key.up\",\n        keyboardEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, [props, editorActor, slateEditor]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(() => {\n    if (scrollSelectionIntoView !== void 0)\n      return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ : (_editor, domRange) => {\n        scrollSelectionIntoView(portableTextEditor, domRange);\n      };\n  }, [portableTextEditor, scrollSelectionIntoView]), decorate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(([, path_0]) => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path_0.length === 0)\n      return [];\n    const result_1 = rangeDecorationState.filter((item) => slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(item) ? path_0.length !== 2 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.focus.path, path_0) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.anchor.path, path_0) : slate__WEBPACK_IMPORTED_MODULE_15__.Range.intersection(item, {\n      anchor: {\n        path: path_0,\n        offset: 0\n      },\n      focus: {\n        path: path_0,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(item, path_0));\n    return result_1.length > 0 ? result_1 : [];\n  }, [slateEditor, schemaTypes, rangeDecorationState]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {\n    ref.current = slate_react__WEBPACK_IMPORTED_MODULE_16__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n  }, [slateEditor, ref]), portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    slate_react__WEBPACK_IMPORTED_MODULE_16__.Editable,\n    {\n      ...restProps,\n      autoFocus: !1,\n      className: restProps.className || \"pt-editable\",\n      decorate,\n      onBlur: handleOnBlur,\n      onCopy: handleCopy,\n      onClick: handleClick,\n      onDOMBeforeInput: handleOnBeforeInput,\n      onFocus: handleOnFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onPaste: handlePaste,\n      readOnly,\n      renderPlaceholder: void 0,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }\n  ) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\nconst EditorContext = react__WEBPACK_IMPORTED_MODULE_4__.createContext(void 0);\nfunction EditorProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(28), editor = useCreateEditor(props.initialConfig), editorActor = editor._internal.editorActor, slateEditor = editor._internal.slateEditor;\n  let t0, t1;\n  $[0] !== editor ? (t1 = new PortableTextEditor({\n    editor\n  }), $[0] = editor, $[1] = t1) : t1 = $[1], t0 = t1;\n  const portableTextEditor = t0;\n  let t2;\n  $[2] !== portableTextEditor.change$ ? (t2 = (change) => {\n    portableTextEditor.change$.next(change);\n  }, $[2] = portableTextEditor.change$, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== editorActor || $[5] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, { editorActor, onChange: t2 }), $[4] = editorActor, $[5] = t2, $[6] = t3) : t3 = $[6];\n  let t4;\n  $[7] !== editorActor || $[8] !== slateEditor.instance ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, { editorActor, slateEditor: slateEditor.instance }), $[7] = editorActor, $[8] = slateEditor.instance, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== editorActor || $[11] !== props.children ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, { editorActor, children: props.children }), $[10] = editorActor, $[11] = props.children, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== portableTextEditor || $[14] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor, children: t5 }), $[13] = portableTextEditor, $[14] = t5, $[15] = t6) : t6 = $[15];\n  let t7;\n  $[16] !== slateEditor.initialValue || $[17] !== slateEditor.instance || $[18] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_16__.Slate, { editor: slateEditor.instance, initialValue: slateEditor.initialValue, children: t6 }), $[16] = slateEditor.initialValue, $[17] = slateEditor.instance, $[18] = t6, $[19] = t7) : t7 = $[19];\n  let t8;\n  $[20] !== editorActor || $[21] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, { value: editorActor, children: t7 }), $[20] = editorActor, $[21] = t7, $[22] = t8) : t8 = $[22];\n  let t9;\n  return $[23] !== editor || $[24] !== t3 || $[25] !== t4 || $[26] !== t8 ? (t9 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(EditorContext.Provider, { value: editor, children: [\n    t3,\n    t4,\n    t8\n  ] }), $[23] = editor, $[24] = t3, $[25] = t4, $[26] = t8, $[27] = t9) : t9 = $[27], t9;\n}\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_4__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\nfunction EditorEventListener(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4), editor = useEditor(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(props.on);\n  let t0, t1;\n  return $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editor, on], $[0] = editor, $[1] = on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQzRIO0FBQzNIO0FBQ2U7QUFDQztBQUNqQjtBQUNOO0FBQ3VJO0FBQ2M7QUFDMUU7QUFDakY7QUFDZTtBQUNUO0FBQ0g7QUFDbUI7QUFDbUQ7QUFDa0I7QUFDL0U7QUFDWTtBQUNwQjtBQUNnQjtBQUNWO0FBQ3lDO0FBQ1k7QUFDSTtBQUMzQztBQUNLO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGlDQUFpQztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsMERBQVU7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRywyRUFBMkUsMERBQVU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLCtCQUErQiwyREFBVztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0Esb0NBQW9DLDZDQUFTO0FBQzdDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsNkJBQTZCLDZDQUFTO0FBQ3RDLE9BQU87QUFDUDtBQUNBO0FBQ0EsOEJBQThC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Q2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQ0FBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxPQUFPLDBDQUFNO0FBQ2IsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhDQUFLO0FBQzNCO0FBQ0EsZUFBZTtBQUNmLGNBQWM7QUFDZCxlQUFlO0FBQ2Y7QUFDQSxHQUFHO0FBQ0g7QUFDQSwrQkFBK0IsMENBQU07QUFDckM7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNLG9EQUFXO0FBQ3hCLEtBQUs7QUFDTCxvQ0FBb0MsMENBQU07QUFDMUM7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNLG9EQUFXO0FBQ3hCLEtBQUs7QUFDTCx3QkFBd0IsMENBQU07QUFDOUI7QUFDQTtBQUNBLE9BQU8sTUFBTSxvREFBVztBQUN4QixLQUFLO0FBQ0wscUJBQXFCLDBDQUFNO0FBQzNCO0FBQ0E7QUFDQSxPQUFPLE1BQU0sb0RBQVc7QUFDeEIsS0FBSztBQUNMLHdCQUF3QiwwQ0FBSTtBQUM1QjtBQUNBLEtBQUssTUFBTSxvREFBVztBQUN0QiwyQkFBMkIsMENBQUk7QUFDL0I7QUFDQSxLQUFLLE1BQU0sb0RBQVc7QUFDdEIsc0JBQXNCLDBDQUFJO0FBQzFCO0FBQ0EsS0FBSztBQUNMLHFCQUFxQiwwQ0FBSTtBQUN6QjtBQUNBLEtBQUs7QUFDTCxtQkFBbUIsMENBQU07QUFDekI7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNLG9EQUFXO0FBQ3hCLEtBQUs7QUFDTCwyQkFBMkIsMENBQWM7QUFDekM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGdCQUFnQiwwQ0FBSTtBQUNwQixLQUFLO0FBQ0wsa0JBQWtCLDBDQUFJO0FBQ3RCO0FBQ0EsS0FBSztBQUNMLDRCQUE0QiwwQ0FBTTtBQUNsQztBQUNBLEtBQUs7QUFDTCw2QkFBNkIsMENBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLE1BQU0sb0RBQVc7QUFDakI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFlBQVksMENBQU07QUFDbEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiw4REFBOEQseUJBQXlCLG1CQUFtQixjQUFjO0FBQ3hIO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwwQ0FBTTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2QsNERBQTRELG1CQUFtQixvQkFBb0IseUJBQXlCLG1CQUFtQixjQUFjO0FBQzdKO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxZQUFZLDBDQUFNO0FBQ2xCO0FBQ0E7QUFDQSxrQkFBa0IsbUZBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsa0JBQWtCO0FBQ2xCLGdFQUFnRSxZQUFZLG9CQUFvQix5QkFBeUIsbUJBQW1CLGNBQWM7QUFDMUo7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQ0FBTTtBQUNsQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLHVEQUF1RCx5QkFBeUIsbUJBQW1CLGNBQWM7QUFDakg7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDBDQUFNO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGNBQWM7QUFDZCw0REFBNEQsbUJBQW1CLG9CQUFvQix5QkFBeUIsbUJBQW1CLGNBQWM7QUFDN0o7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCwwQ0FBMEMsdUVBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxlQUFlLDBDQUFJO0FBQ25CO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLGVBQWUsMENBQUk7QUFDbkI7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsZUFBZSwwQ0FBSTtBQUNuQjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxlQUFlLDBDQUFJO0FBQ25CO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLGdCQUFnQiwwQ0FBTTtBQUN0QjtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU8sR0FBRywwQ0FBSTtBQUNkO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLGVBQWUsMENBQUk7QUFDbkI7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsZUFBZSwwQ0FBSTtBQUNuQjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxlQUFlLDBDQUFJO0FBQ25CO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLGVBQWUsMENBQUk7QUFDbkI7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsZUFBZSwwQ0FBSTtBQUNuQjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZUFBZSwwQ0FBTTtBQUNyQjtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxlQUFlLDBDQUFNO0FBQ3JCO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSx1QkFBdUIsMENBQUk7QUFDM0I7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsdUJBQXVCLDBDQUFJO0FBQzNCO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBLHVCQUF1QiwwQ0FBSTtBQUMzQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBLHVCQUF1QiwwQ0FBSTtBQUMzQjtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQSx1QkFBdUIsMENBQUk7QUFDM0I7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsdUJBQXVCLDBDQUFJO0FBQzNCO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBLHVCQUF1QiwwQ0FBSTtBQUMzQjtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQSx1QkFBdUIsMENBQUk7QUFDM0I7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsdUJBQXVCLDBDQUFJO0FBQzNCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseURBQUM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRyx5RkFBeUYsMkRBQVc7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxTQUFTLGtFQUFlO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQ0FBVztBQUNqQztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFDO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxzQkFBc0IsMkRBQVc7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsb0RBQWEsR0FBRyx3Q0FBd0Msb0RBQWE7QUFDaEcsb0JBQW9CLGlEQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLFlBQVkseURBQUMsaUNBQWlDLCtDQUFRO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxzREFBZTtBQUNyQjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRyxzR0FBc0csZ0RBQVM7QUFDbEg7QUFDQSwrRUFBK0Usc0RBQUcsZ0RBQWdELDRDQUE0QztBQUM5SztBQUNBO0FBQ0EsaUNBQWlDLDRDQUFTO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBDQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVEQUFJLENBQUMsdURBQVEsSUFBSTtBQUM1QyxzQ0FBc0Msc0RBQUcsd0NBQXdDLHlFQUF5RTtBQUMxSixzQkFBc0Isc0RBQUcseUJBQXlCO0FBQ2xEO0FBQ0EsU0FBUztBQUNULHNCQUFzQixzREFBRyxpQkFBaUIseUdBQXlHO0FBQ25KLHNCQUFzQixzREFBRyxnQ0FBZ0Msb0VBQW9FLHNEQUFHLENBQUMsK0NBQUssSUFBSSw0SUFBNEksc0RBQUcsdUNBQXVDLHVDQUF1QyxzREFBRyx3Q0FBd0MsK0VBQStFLEdBQUcsR0FBRyxHQUFHO0FBQzFlLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseURBQUM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUcsNklBQTZJLGdEQUFTO0FBQ3pKO0FBQ0E7QUFDQSxZQUFZLHlEQUFDO0FBQ2I7QUFDQTtBQUNBLHVCQUF1QixpRUFBYztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRyx5SUFBeUksZ0RBQVM7QUFDcko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksbUJBQW1CLDZDQUFNLHNFQUFzRSx5REFBVyw0QkFBNEIsK0NBQVEsZ0NBQWdDLCtDQUFRLDRDQUE0Qyw4Q0FBTztBQUM3TztBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUcsK0NBQStDLDhDQUFPLDBGQUEwRiw4Q0FBTyxPQUFPLDJDQUFJLHNNQUFzTSw4Q0FBTztBQUNsWCxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOENBQU8seUZBQXlGLHNEQUFlO0FBQzFIO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCwrQkFBK0Isa0RBQVc7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxlQUFlLDhDQUFPO0FBQ3RCLEtBQUs7QUFDTCx5QkFBeUIsOENBQU87QUFDaEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUcsZ0dBQWdHLGdEQUFTO0FBQzVHLGtCQUFrQiw4Q0FBTztBQUN6QjtBQUNBLFFBQVEsd0NBQUk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCw2Q0FBNkMsc0RBQUcsV0FBVyxvREFBb0Q7QUFDL0csVUFBVTtBQUNWLDZDQUE2QyxzREFBRyxzQkFBc0Isc0NBQXNDLHNEQUFHLFdBQVcsMENBQTBDLEdBQUc7QUFDdkssS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHNEQUFHLENBQUMsdURBQVEsSUFBSSw0QkFBNEI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILFNBQVMsOENBQU8sdUJBQXVCLHNEQUFHLFdBQVcsZ0RBQWdEO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRCxnQkFBZ0Isc0VBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUSxZQUFZLEtBQUs7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQsZ0JBQWdCLHNFQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb1VBQW9VLGlGQUFpRixtQkFBbUIsZ0ZBQWdGOztBQUV4ZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsMkJBQTJCLHlDQUFLLCtCQUErQiwwQ0FBTTtBQUNyRTtBQUNBLE9BQU8sYUFBYSwwQ0FBTTtBQUMxQjtBQUNBLE9BQU87QUFDUCxVQUFVLHlDQUFLO0FBQ2Y7QUFDQSx1QkFBdUIscURBQVc7QUFDbEM7QUFDQTtBQUNBLHlFQUF5RSxxREFBVztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsUUFBUTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdDQUF3QyxtQ0FBbUM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHdFQUFZO0FBQ3pDO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQSxVQUFVO0FBQ1YsNENBQTRDLDJCQUEyQixHQUFHLDhCQUE4Qix5Q0FBeUMsNEJBQTRCO0FBQzdLLHlCQUF5Qix3RUFBWTtBQUNyQztBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxvQ0FBb0MsY0FBYyxjQUFjLGlDQUFpQztBQUNqRztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaLFlBQVk7QUFDWixjQUFjO0FBQ2QsYUFBYTtBQUNiLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMENBQU07QUFDMUM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLHVHQUF1Ryw4Q0FBTyxvQ0FBb0MsOENBQVU7QUFDNUosa0JBQWtCLDJDQUFJO0FBQ3RCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSwwREFBMEQsOENBQVU7QUFDcEU7QUFDQSxLQUFLLG9DQUFvQyw4Q0FBVTtBQUNuRDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx5QkFBeUIsaURBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNkRBQTZELDZDQUFNLGdEQUFnRCwrQ0FBUSxnREFBZ0QsK0NBQVEseURBQXlELCtDQUFRO0FBQ3hQLEVBQUUsMERBQW1CO0FBQ3JCLDhCQUE4Qiw2Q0FBTSxrQ0FBa0MsaURBQVUsaUNBQWlDLDJEQUFXO0FBQzVIO0FBQ0EsR0FBRyxrQkFBa0IsMkRBQVcsMERBQTBELHNEQUFRO0FBQ2xHLEVBQUUsOENBQU87QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHdCQUF3QixrREFBVyw2QkFBNkIsc0RBQUcsWUFBWSxxR0FBcUcsNkdBQTZHLGtEQUFXO0FBQzVTO0FBQ0EscUNBQXFDLHNEQUFHLFNBQVMsK0ZBQStGO0FBQ2hKO0FBQ0EsK0JBQStCLHVEQUFJLENBQUMsdURBQVEsSUFBSTtBQUNoRCwwQkFBMEIsc0RBQUcsV0FBVyw4RUFBOEU7QUFDdEg7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHLHdJQUF3SSxrREFBVztBQUN0SjtBQUNBLG9DQUFvQywrQkFBK0I7QUFDbkU7QUFDQTtBQUNBLGlEQUFpRCxvQ0FBb0M7QUFDckY7QUFDQSx1QkFBdUIsOENBQVU7QUFDakM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRyxxRkFBcUYsa0RBQVc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlDQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHLG1FQUFtRSxnREFBUztBQUMvRTtBQUNBLEdBQUc7QUFDSCw4REFBOEQsK0NBQVE7QUFDdEUsRUFBRSxnREFBUztBQUNYO0FBQ0EsR0FBRyxtREFBbUQsZ0RBQVM7QUFDL0QsSUFBSSw4Q0FBTztBQUNYLEdBQUcsNkNBQTZDLGdEQUFTO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNILHFCQUFxQixrREFBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRyxxREFBcUQsa0RBQVc7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRyx5RkFBeUYsa0RBQVc7QUFDdkc7QUFDQTtBQUNBLDZCQUE2Qiw4Q0FBVSxxQkFBcUIsMENBQU07QUFDbEU7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUcsMEVBQTBFLGtEQUFXO0FBQ3hGO0FBQ0Esd0lBQXdJLHdDQUFJLHVFQUF1RSx3Q0FBSSxxR0FBcUcsd0NBQUk7QUFDaFUsNkJBQTZCLHlDQUFLLDhFQUE4RSw4Q0FBVTtBQUMxSDtBQUNBLEtBQUs7QUFDTCxHQUFHLDBDQUEwQyxrREFBVztBQUN4RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRyxnREFBZ0Qsa0RBQVc7QUFDOUQ7QUFDQSxHQUFHLHdDQUF3QyxrREFBVztBQUN0RDtBQUNBO0FBQ0EsaUJBQWlCLHFEQUFXO0FBQzVCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSx5QkFBeUIscURBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIscURBQVc7QUFDckM7QUFDQSxNQUFNO0FBQ04sb0VBQW9FLDhDQUFVLDJEQUEyRCw4Q0FBVTtBQUNuSjtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsd0JBQXdCLGtEQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUcsb0RBQW9ELGtEQUFXO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUcsdUVBQXVFLDhDQUFPO0FBQ2pGO0FBQ0EsZ0RBQWdELDJDQUFJO0FBQ3BEO0FBQ0E7QUFDQSxHQUFHLDZEQUE2RCxrREFBVztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsMkRBQTJELHlDQUFLLGdEQUFnRCx3Q0FBSSxvQ0FBb0Msd0NBQUksb0NBQW9DLHlDQUFLO0FBQ3JNO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssS0FBSyx5Q0FBSztBQUNmO0FBQ0EsR0FBRztBQUNILFNBQVMsZ0RBQVM7QUFDbEIsa0JBQWtCLHFEQUFXO0FBQzdCLEdBQUcscUZBQXFGLHNEQUFHO0FBQzNGLElBQUksa0RBQVE7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esc0JBQXNCLGdEQUFtQjtBQUN6QztBQUNBLFlBQVkseURBQUM7QUFDYjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSw4REFBOEQsc0RBQUcseUJBQXlCLDJCQUEyQjtBQUNySDtBQUNBLGdGQUFnRixzREFBRyxpQkFBaUIsZ0RBQWdEO0FBQ3BKO0FBQ0EsNEVBQTRFLHNEQUFHLHdDQUF3Qyx1Q0FBdUM7QUFDOUo7QUFDQSx1RUFBdUUsc0RBQUcsdUNBQXVDLHlDQUF5QztBQUMxSjtBQUNBLCtHQUErRyxzREFBRyxDQUFDLCtDQUFLLElBQUksb0ZBQW9GO0FBQ2hOO0FBQ0EsZ0VBQWdFLHNEQUFHLGdDQUFnQyxrQ0FBa0M7QUFDckk7QUFDQSxrR0FBa0csdURBQUksMkJBQTJCO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUJBQWlCLDZDQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5REFBQyxnQ0FBZ0MsaUVBQWM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRywrRkFBK0YsZ0RBQVM7QUFDM0c7QUFhRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uMi1lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL2luZGV4LmpzPzZhNmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIkBzYW5pdHkvc2NoZW1hXCI7XG5pbXBvcnQgeyBkZWZpbmVUeXBlLCBkZWZpbmVGaWVsZCwgaXNLZXlTZWdtZW50LCBpc1BvcnRhYmxlVGV4dFRleHRCbG9jaywgaXNQb3J0YWJsZVRleHRTcGFuIGFzIGlzUG9ydGFibGVUZXh0U3BhbiQxLCBpc1BvcnRhYmxlVGV4dExpc3RCbG9jayB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5pbXBvcnQgc3RhcnRDYXNlIGZyb20gXCJsb2Rhc2guc3RhcnRjYXNlXCI7XG5pbXBvcnQgeyBqc3hzLCBqc3gsIEZyYWdtZW50IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlQWN0b3JSZWYgfSBmcm9tIFwiQHhzdGF0ZS9yZWFjdFwiO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSBcImxvZGFzaC9pc0VxdWFsLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwibG9kYXNoL25vb3AuanNcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZU1lbW8sIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHN0YXJ0VHJhbnNpdGlvbiwgQ29tcG9uZW50LCB1c2VDYWxsYmFjaywgZm9yd2FyZFJlZiwgdXNlSW1wZXJhdGl2ZUhhbmRsZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgRWRpdG9yLCBFbGVtZW50IGFzIEVsZW1lbnQkMSwgUmFuZ2UsIFBvaW50LCBUZXh0LCBQYXRoLCBUcmFuc2Zvcm1zLCBPcGVyYXRpb24sIE5vZGUsIGNyZWF0ZUVkaXRvciBhcyBjcmVhdGVFZGl0b3IkMSwgZGVsZXRlQmFja3dhcmQsIGRlbGV0ZUZvcndhcmQsIGluc2VydFRleHQgfSBmcm9tIFwic2xhdGVcIjtcbmltcG9ydCB7IHVzZVNsYXRlU3RhdGljLCBSZWFjdEVkaXRvciwgdXNlU2VsZWN0ZWQsIHdpdGhSZWFjdCwgU2xhdGUsIHVzZVNsYXRlLCBFZGl0YWJsZSB9IGZyb20gXCJzbGF0ZS1yZWFjdFwiO1xuaW1wb3J0IGRlYnVnJGsgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgeyBjIH0gZnJvbSBcInJlYWN0LWNvbXBpbGVyLXJ1bnRpbWVcIjtcbmltcG9ydCB1bmlxIGZyb20gXCJsb2Rhc2gvdW5pcS5qc1wiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyB1c2VFZmZlY3RFdmVudCB9IGZyb20gXCJ1c2UtZWZmZWN0LWV2ZW50XCI7XG5pbXBvcnQgeyBzZXR1cCwgZW1pdCwgYXNzaWduLCBmcm9tQ2FsbGJhY2ssIGFzc2VydEV2ZW50LCBlbnF1ZXVlQWN0aW9ucywgY3JlYXRlQWN0b3IgfSBmcm9tIFwieHN0YXRlXCI7XG5pbXBvcnQgeyB1bnNldCwgc2V0LCBzZXRJZk1pc3NpbmcsIGluc2VydCwgZGlmZk1hdGNoUGF0Y2ggYXMgZGlmZk1hdGNoUGF0Y2gkMSwgYXBwbHlBbGwgfSBmcm9tIFwiQHBvcnRhYmxldGV4dC9wYXRjaGVzXCI7XG5pbXBvcnQgZmxhdHRlbiBmcm9tIFwibG9kYXNoL2ZsYXR0ZW4uanNcIjtcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gXCJsb2Rhc2gvaXNQbGFpbk9iamVjdC5qc1wiO1xuaW1wb3J0IGdldCBmcm9tIFwibG9kYXNoL2dldC5qc1wiO1xuaW1wb3J0IGlzVW5kZWZpbmVkIGZyb20gXCJsb2Rhc2gvaXNVbmRlZmluZWQuanNcIjtcbmltcG9ydCBvbWl0QnkgZnJvbSBcImxvZGFzaC9vbWl0QnkuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUd1YXJkcyB9IGZyb20gXCIuL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qc1wiO1xuaW1wb3J0IHsgYmxvY2tPZmZzZXRUb1NwYW5TZWxlY3Rpb25Qb2ludCB9IGZyb20gXCIuL19jaHVua3MtZXMvdXRpbC5pcy1lbXB0eS10ZXh0LWJsb2NrLmpzXCI7XG5pbXBvcnQgeyBjb3JlQmVoYXZpb3JzLCBpc0N1c3RvbUJlaGF2aW9yRXZlbnQsIGlzSG90a2V5IH0gZnJvbSBcIi4vX2NodW5rcy1lcy9iZWhhdmlvci5jb3JlLmpzXCI7XG5pbXBvcnQgZ2V0UmFuZG9tVmFsdWVzIGZyb20gXCJnZXQtcmFuZG9tLXZhbHVlcy1lc21cIjtcbmltcG9ydCB7IGh0bWxUb0Jsb2NrcyB9IGZyb20gXCJAcG9ydGFibGV0ZXh0L2Jsb2NrLXRvb2xzXCI7XG5mdW5jdGlvbiBjcmVhdGVFZGl0b3JTY2hlbWEocG9ydGFibGVUZXh0VHlwZSkge1xuICBpZiAoIXBvcnRhYmxlVGV4dFR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyYW1ldGVyICdwb3J0YWJsZXRleHRUeXBlJyBtaXNzaW5nIChyZXF1aXJlZClcIik7XG4gIGNvbnN0IGJsb2NrVHlwZSA9IHBvcnRhYmxlVGV4dFR5cGUub2Y/LmZpbmQoZmluZEJsb2NrVHlwZSk7XG4gIGlmICghYmxvY2tUeXBlKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkJsb2NrIHR5cGUgaXMgbm90IGRlZmluZWQgaW4gdGhpcyBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3QgY2hpbGRyZW5GaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGZpZWxkKSA9PiBmaWVsZC5uYW1lID09PSBcImNoaWxkcmVuXCIpO1xuICBpZiAoIWNoaWxkcmVuRmllbGQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hpbGRyZW4gZmllbGQgZm9yIGJsb2NrIHR5cGUgZm91bmQgaW4gc2NoZW1hIChyZXF1aXJlZClcIik7XG4gIGNvbnN0IG9mVHlwZSA9IGNoaWxkcmVuRmllbGQudHlwZS5vZjtcbiAgaWYgKCFvZlR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWQgdHlwZXMgZm9yIGJsb2NrIGNoaWxkcmVuIG5vdCBmb3VuZCBpbiBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3Qgc3BhblR5cGUgPSBvZlR5cGUuZmluZCgobWVtYmVyVHlwZSkgPT4gbWVtYmVyVHlwZS5uYW1lID09PSBcInNwYW5cIik7XG4gIGlmICghc3BhblR5cGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3BhbiB0eXBlIG5vdCBmb3VuZCBpbiBzY2hlbWEgKHJlcXVpcmVkKVwiKTtcbiAgY29uc3QgaW5saW5lT2JqZWN0VHlwZXMgPSBvZlR5cGUuZmlsdGVyKChtZW1iZXJUeXBlKSA9PiBtZW1iZXJUeXBlLm5hbWUgIT09IFwic3BhblwiKSB8fCBbXSwgYmxvY2tPYmplY3RUeXBlcyA9IHBvcnRhYmxlVGV4dFR5cGUub2Y/LmZpbHRlcigoZmllbGQpID0+IGZpZWxkLm5hbWUgIT09IGJsb2NrVHlwZS5uYW1lKSB8fCBbXTtcbiAgcmV0dXJuIHtcbiAgICBzdHlsZXM6IHJlc29sdmVFbmFibGVkU3R5bGVzKGJsb2NrVHlwZSksXG4gICAgZGVjb3JhdG9yczogcmVzb2x2ZUVuYWJsZWREZWNvcmF0b3JzKHNwYW5UeXBlKSxcbiAgICBsaXN0czogcmVzb2x2ZUVuYWJsZWRMaXN0SXRlbXMoYmxvY2tUeXBlKSxcbiAgICBibG9jazogYmxvY2tUeXBlLFxuICAgIHNwYW46IHNwYW5UeXBlLFxuICAgIHBvcnRhYmxlVGV4dDogcG9ydGFibGVUZXh0VHlwZSxcbiAgICBpbmxpbmVPYmplY3RzOiBpbmxpbmVPYmplY3RUeXBlcyxcbiAgICBibG9ja09iamVjdHM6IGJsb2NrT2JqZWN0VHlwZXMsXG4gICAgYW5ub3RhdGlvbnM6IHNwYW5UeXBlLmFubm90YXRpb25zXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRW5hYmxlZFN0eWxlcyhibG9ja1R5cGUpIHtcbiAgY29uc3Qgc3R5bGVGaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGJ0RmllbGQpID0+IGJ0RmllbGQubmFtZSA9PT0gXCJzdHlsZVwiKTtcbiAgaWYgKCFzdHlsZUZpZWxkKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkEgZmllbGQgd2l0aCBuYW1lICdzdHlsZScgaXMgbm90IGRlZmluZWQgaW4gdGhlIGJsb2NrIHR5cGUgKHJlcXVpcmVkKS5cIik7XG4gIGNvbnN0IHRleHRTdHlsZXMgPSBzdHlsZUZpZWxkLnR5cGUub3B0aW9ucz8ubGlzdCAmJiBzdHlsZUZpZWxkLnR5cGUub3B0aW9ucy5saXN0Py5maWx0ZXIoKHN0eWxlKSA9PiBzdHlsZS52YWx1ZSk7XG4gIGlmICghdGV4dFN0eWxlcyB8fCB0ZXh0U3R5bGVzLmxlbmd0aCA9PT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUgZmllbGRzIG5lZWQgYXQgbGVhc3Qgb25lIHN0eWxlIGRlZmluZWQuIEkuZToge3RpdGxlOiAnTm9ybWFsJywgdmFsdWU6ICdub3JtYWwnfS5cIik7XG4gIHJldHVybiB0ZXh0U3R5bGVzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVuYWJsZWREZWNvcmF0b3JzKHNwYW5UeXBlKSB7XG4gIHJldHVybiBzcGFuVHlwZS5kZWNvcmF0b3JzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVuYWJsZWRMaXN0SXRlbXMoYmxvY2tUeXBlKSB7XG4gIGNvbnN0IGxpc3RGaWVsZCA9IGJsb2NrVHlwZS5maWVsZHM/LmZpbmQoKGJ0RmllbGQpID0+IGJ0RmllbGQubmFtZSA9PT0gXCJsaXN0SXRlbVwiKTtcbiAgaWYgKCFsaXN0RmllbGQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBmaWVsZCB3aXRoIG5hbWUgJ2xpc3RJdGVtJyBpcyBub3QgZGVmaW5lZCBpbiB0aGUgYmxvY2sgdHlwZSAocmVxdWlyZWQpLlwiKTtcbiAgY29uc3QgbGlzdEl0ZW1zID0gbGlzdEZpZWxkLnR5cGUub3B0aW9ucz8ubGlzdCAmJiBsaXN0RmllbGQudHlwZS5vcHRpb25zLmxpc3QuZmlsdGVyKChsaXN0KSA9PiBsaXN0LnZhbHVlKTtcbiAgaWYgKCFsaXN0SXRlbXMpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGxpc3QgZmllbGQgbmVlZCBhdCBsZWFzdCB0byBiZSBhbiBlbXB0eSBhcnJheVwiKTtcbiAgcmV0dXJuIGxpc3RJdGVtcztcbn1cbmZ1bmN0aW9uIGZpbmRCbG9ja1R5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZS50eXBlID8gZmluZEJsb2NrVHlwZSh0eXBlLnR5cGUpIDogdHlwZS5uYW1lID09PSBcImJsb2NrXCIgPyB0eXBlIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGRlZmluZVNjaGVtYShkZWZpbml0aW9uKSB7XG4gIHJldHVybiBkZWZpbml0aW9uO1xufVxuZnVuY3Rpb24gY29tcGlsZVNjaGVtYURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCBibG9ja09iamVjdHMgPSBkZWZpbml0aW9uPy5ibG9ja09iamVjdHM/Lm1hcCgoYmxvY2tPYmplY3QpID0+IGRlZmluZVR5cGUoe1xuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgLy8gVmVyeSBuYWl2ZSB3YXkgdG8gd29yayBhcm91bmQgYFNhbml0eVNjaGVtYS5jb21waWxlYCBhZGRpbmcgZGVmYXVsdFxuICAgIC8vIGZpZWxkcyB0byBvYmplY3RzIHdpdGggdGhlIG5hbWUgYGltYWdlYFxuICAgIG5hbWU6IGJsb2NrT2JqZWN0Lm5hbWUgPT09IFwiaW1hZ2VcIiA/IFwidG1wLWltYWdlXCIgOiBibG9ja09iamVjdC5uYW1lLFxuICAgIHRpdGxlOiBibG9ja09iamVjdC5uYW1lID09PSBcImltYWdlXCIgJiYgYmxvY2tPYmplY3QudGl0bGUgPT09IHZvaWQgMCA/IFwiSW1hZ2VcIiA6IGJsb2NrT2JqZWN0LnRpdGxlLFxuICAgIGZpZWxkczogW11cbiAgfSkpID8/IFtdLCBpbmxpbmVPYmplY3RzID0gZGVmaW5pdGlvbj8uaW5saW5lT2JqZWN0cz8ubWFwKChpbmxpbmVPYmplY3QpID0+IGRlZmluZVR5cGUoe1xuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgbmFtZTogaW5saW5lT2JqZWN0Lm5hbWUsXG4gICAgdGl0bGU6IGlubGluZU9iamVjdC50aXRsZSxcbiAgICBmaWVsZHM6IFtdXG4gIH0pKSA/PyBbXSwgcG9ydGFibGVUZXh0U2NoZW1hID0gZGVmaW5lRmllbGQoe1xuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBuYW1lOiBcInBvcnRhYmxlLXRleHRcIixcbiAgICBvZjogWy4uLmJsb2NrT2JqZWN0cy5tYXAoKGJsb2NrT2JqZWN0KSA9PiAoe1xuICAgICAgdHlwZTogYmxvY2tPYmplY3QubmFtZVxuICAgIH0pKSwge1xuICAgICAgdHlwZTogXCJibG9ja1wiLFxuICAgICAgbmFtZTogXCJibG9ja1wiLFxuICAgICAgb2Y6IGlubGluZU9iamVjdHMubWFwKChpbmxpbmVPYmplY3QpID0+ICh7XG4gICAgICAgIHR5cGU6IGlubGluZU9iamVjdC5uYW1lXG4gICAgICB9KSksXG4gICAgICBtYXJrczoge1xuICAgICAgICBkZWNvcmF0b3JzOiBkZWZpbml0aW9uPy5kZWNvcmF0b3JzPy5tYXAoKGRlY29yYXRvcikgPT4gKHtcbiAgICAgICAgICB0aXRsZTogZGVjb3JhdG9yLnRpdGxlID8/IHN0YXJ0Q2FzZShkZWNvcmF0b3IubmFtZSksXG4gICAgICAgICAgdmFsdWU6IGRlY29yYXRvci5uYW1lXG4gICAgICAgIH0pKSA/PyBbXSxcbiAgICAgICAgYW5ub3RhdGlvbnM6IGRlZmluaXRpb24/LmFubm90YXRpb25zPy5tYXAoKGFubm90YXRpb24pID0+ICh7XG4gICAgICAgICAgbmFtZTogYW5ub3RhdGlvbi5uYW1lLFxuICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgdGl0bGU6IGFubm90YXRpb24udGl0bGVcbiAgICAgICAgfSkpID8/IFtdXG4gICAgICB9LFxuICAgICAgbGlzdHM6IGRlZmluaXRpb24/Lmxpc3RzPy5tYXAoKGxpc3QpID0+ICh7XG4gICAgICAgIHZhbHVlOiBsaXN0Lm5hbWUsXG4gICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlID8/IHN0YXJ0Q2FzZShsaXN0Lm5hbWUpXG4gICAgICB9KSkgPz8gW10sXG4gICAgICBzdHlsZXM6IGRlZmluaXRpb24/LnN0eWxlcz8ubWFwKChzdHlsZSkgPT4gKHtcbiAgICAgICAgdmFsdWU6IHN0eWxlLm5hbWUsXG4gICAgICAgIHRpdGxlOiBzdHlsZS50aXRsZSA/PyBzdGFydENhc2Uoc3R5bGUubmFtZSlcbiAgICAgIH0pKSA/PyBbXVxuICAgIH1dXG4gIH0pLCBzY2hlbWEgPSBTY2hlbWEuY29tcGlsZSh7XG4gICAgdHlwZXM6IFtwb3J0YWJsZVRleHRTY2hlbWEsIC4uLmJsb2NrT2JqZWN0cywgLi4uaW5saW5lT2JqZWN0c11cbiAgfSkuZ2V0KFwicG9ydGFibGUtdGV4dFwiKSwgcHRlU2NoZW1hID0gY3JlYXRlRWRpdG9yU2NoZW1hKHNjaGVtYSk7XG4gIHJldHVybiB7XG4gICAgLi4ucHRlU2NoZW1hLFxuICAgIGJsb2NrT2JqZWN0czogcHRlU2NoZW1hLmJsb2NrT2JqZWN0cy5tYXAoKGJsb2NrT2JqZWN0KSA9PiBibG9ja09iamVjdC5uYW1lID09PSBcInRtcC1pbWFnZVwiID8ge1xuICAgICAgLi4uYmxvY2tPYmplY3QsXG4gICAgICBuYW1lOiBcImltYWdlXCIsXG4gICAgICB0eXBlOiB7XG4gICAgICAgIC4uLmJsb2NrT2JqZWN0LnR5cGUsXG4gICAgICAgIG5hbWU6IFwiaW1hZ2VcIlxuICAgICAgfVxuICAgIH0gOiBibG9ja09iamVjdClcbiAgfTtcbn1cbmNvbnN0IHJvb3ROYW1lID0gXCJzYW5pdHktcHRlOlwiO1xuZGVidWckayhyb290TmFtZSk7XG5mdW5jdGlvbiBkZWJ1Z1dpdGhOYW1lKG5hbWUpIHtcbiAgY29uc3QgbmFtZXNwYWNlID0gYCR7cm9vdE5hbWV9JHtuYW1lfWA7XG4gIHJldHVybiBkZWJ1ZyRrICYmIGRlYnVnJGsuZW5hYmxlZChuYW1lc3BhY2UpID8gZGVidWckayhuYW1lc3BhY2UpIDogZGVidWckayhyb290TmFtZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVLZXllZFBhdGgocG9pbnQsIHZhbHVlLCB0eXBlcykge1xuICBjb25zdCBibG9ja1BhdGggPSBbcG9pbnQucGF0aFswXV07XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGJsb2NrID0gdmFsdWVbYmxvY2tQYXRoWzBdXTtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3Qga2V5ZWRCbG9ja1BhdGggPSBbe1xuICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgfV07XG4gIGlmIChibG9jay5fdHlwZSAhPT0gdHlwZXMuYmxvY2submFtZSlcbiAgICByZXR1cm4ga2V5ZWRCbG9ja1BhdGg7XG4gIGxldCBrZXllZENoaWxkUGF0aDtcbiAgY29uc3QgY2hpbGRQYXRoID0gcG9pbnQucGF0aC5zbGljZSgwLCAyKSwgY2hpbGQgPSBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBibG9jay5jaGlsZHJlbltjaGlsZFBhdGhbMV1dO1xuICByZXR1cm4gY2hpbGQgJiYgKGtleWVkQ2hpbGRQYXRoID0gW1wiY2hpbGRyZW5cIiwge1xuICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgfV0pLCBrZXllZENoaWxkUGF0aCA/IFsuLi5rZXllZEJsb2NrUGF0aCwgLi4ua2V5ZWRDaGlsZFBhdGhdIDoga2V5ZWRCbG9ja1BhdGg7XG59XG5mdW5jdGlvbiB0b1NsYXRlUGF0aChwYXRoLCBlZGl0b3IpIHtcbiAgaWYgKCFlZGl0b3IpXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICBhdDogW10sXG4gICAgbWF0Y2g6IChuKSA9PiBpc0tleVNlZ21lbnQocGF0aFswXSkgJiYgbi5fa2V5ID09PSBwYXRoWzBdLl9rZXlcbiAgfSkpWzBdIHx8IFt2b2lkIDAsIHZvaWQgMF07XG4gIGlmICghYmxvY2sgfHwgIUVsZW1lbnQkMS5pc0VsZW1lbnQoYmxvY2spKVxuICAgIHJldHVybiBbXTtcbiAgaWYgKGVkaXRvci5pc1ZvaWQoYmxvY2spKVxuICAgIHJldHVybiBbYmxvY2tQYXRoWzBdLCAwXTtcbiAgY29uc3QgY2hpbGRQYXRoID0gW3BhdGhbMl1dLCBjaGlsZEluZGV4ID0gYmxvY2suY2hpbGRyZW4uZmluZEluZGV4KChjaGlsZCkgPT4gaXNFcXVhbChbe1xuICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgfV0sIGNoaWxkUGF0aCkpO1xuICBpZiAoY2hpbGRJbmRleCA+PSAwICYmIGJsb2NrLmNoaWxkcmVuW2NoaWxkSW5kZXhdKSB7XG4gICAgY29uc3QgY2hpbGQgPSBibG9jay5jaGlsZHJlbltjaGlsZEluZGV4XTtcbiAgICByZXR1cm4gRWxlbWVudCQxLmlzRWxlbWVudChjaGlsZCkgJiYgZWRpdG9yLmlzVm9pZChjaGlsZCkgPyBibG9ja1BhdGguY29uY2F0KGNoaWxkSW5kZXgpLmNvbmNhdCgwKSA6IGJsb2NrUGF0aC5jb25jYXQoY2hpbGRJbmRleCk7XG4gIH1cbiAgcmV0dXJuIFtibG9ja1BhdGhbMF0sIDBdO1xufVxuZnVuY3Rpb24gdG9Qb3J0YWJsZVRleHRSYW5nZSh2YWx1ZSwgcmFuZ2UsIHR5cGVzKSB7XG4gIGlmICghcmFuZ2UpXG4gICAgcmV0dXJuIG51bGw7XG4gIGxldCBhbmNob3IgPSBudWxsLCBmb2N1cyA9IG51bGw7XG4gIGNvbnN0IGFuY2hvclBhdGggPSByYW5nZS5hbmNob3IgJiYgY3JlYXRlS2V5ZWRQYXRoKHJhbmdlLmFuY2hvciwgdmFsdWUsIHR5cGVzKTtcbiAgYW5jaG9yUGF0aCAmJiByYW5nZS5hbmNob3IgJiYgKGFuY2hvciA9IHtcbiAgICBwYXRoOiBhbmNob3JQYXRoLFxuICAgIG9mZnNldDogcmFuZ2UuYW5jaG9yLm9mZnNldFxuICB9KTtcbiAgY29uc3QgZm9jdXNQYXRoID0gcmFuZ2UuZm9jdXMgJiYgY3JlYXRlS2V5ZWRQYXRoKHJhbmdlLmZvY3VzLCB2YWx1ZSwgdHlwZXMpO1xuICBmb2N1c1BhdGggJiYgcmFuZ2UuZm9jdXMgJiYgKGZvY3VzID0ge1xuICAgIHBhdGg6IGZvY3VzUGF0aCxcbiAgICBvZmZzZXQ6IHJhbmdlLmZvY3VzLm9mZnNldFxuICB9KTtcbiAgY29uc3QgYmFja3dhcmQgPSAhIShSYW5nZS5pc1JhbmdlKHJhbmdlKSAmJiBSYW5nZS5pc0JhY2t3YXJkKHJhbmdlKSk7XG4gIHJldHVybiBhbmNob3IgJiYgZm9jdXMgPyB7XG4gICAgYW5jaG9yLFxuICAgIGZvY3VzLFxuICAgIGJhY2t3YXJkXG4gIH0gOiBudWxsO1xufVxuZnVuY3Rpb24gdG9TbGF0ZVJhbmdlKHNlbGVjdGlvbiwgZWRpdG9yKSB7XG4gIGlmICghc2VsZWN0aW9uIHx8ICFlZGl0b3IpXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFuY2hvciA9IHtcbiAgICBwYXRoOiB0b1NsYXRlUGF0aChzZWxlY3Rpb24uYW5jaG9yLnBhdGgsIGVkaXRvciksXG4gICAgb2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yLm9mZnNldFxuICB9LCBmb2N1cyA9IHtcbiAgICBwYXRoOiB0b1NsYXRlUGF0aChzZWxlY3Rpb24uZm9jdXMucGF0aCwgZWRpdG9yKSxcbiAgICBvZmZzZXQ6IHNlbGVjdGlvbi5mb2N1cy5vZmZzZXRcbiAgfTtcbiAgcmV0dXJuIGZvY3VzLnBhdGgubGVuZ3RoID09PSAwIHx8IGFuY2hvci5wYXRoLmxlbmd0aCA9PT0gMCA/IG51bGwgOiBmb2N1cyA/IHtcbiAgICBhbmNob3IsXG4gICAgZm9jdXNcbiAgfSA6IG51bGw7XG59XG5mdW5jdGlvbiBtb3ZlUmFuZ2VCeU9wZXJhdGlvbihyYW5nZSwgb3BlcmF0aW9uKSB7XG4gIGNvbnN0IGFuY2hvciA9IFBvaW50LnRyYW5zZm9ybShyYW5nZS5hbmNob3IsIG9wZXJhdGlvbiksIGZvY3VzID0gUG9pbnQudHJhbnNmb3JtKHJhbmdlLmZvY3VzLCBvcGVyYXRpb24pO1xuICByZXR1cm4gYW5jaG9yID09PSBudWxsIHx8IGZvY3VzID09PSBudWxsID8gbnVsbCA6IFBvaW50LmVxdWFscyhhbmNob3IsIHJhbmdlLmFuY2hvcikgJiYgUG9pbnQuZXF1YWxzKGZvY3VzLCByYW5nZS5mb2N1cykgPyByYW5nZSA6IHtcbiAgICBhbmNob3IsXG4gICAgZm9jdXNcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvaW50KHBvaW50LCB2YWx1ZSkge1xuICBpZiAoIXBvaW50IHx8ICF2YWx1ZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgbmV3UGF0aCA9IFtdO1xuICBsZXQgbmV3T2Zmc2V0ID0gcG9pbnQub2Zmc2V0IHx8IDA7XG4gIGNvbnN0IGJsb2NrS2V5ID0gdHlwZW9mIHBvaW50LnBhdGhbMF0gPT0gXCJvYmplY3RcIiAmJiBcIl9rZXlcIiBpbiBwb2ludC5wYXRoWzBdICYmIHBvaW50LnBhdGhbMF0uX2tleSwgY2hpbGRLZXkgPSB0eXBlb2YgcG9pbnQucGF0aFsyXSA9PSBcIm9iamVjdFwiICYmIFwiX2tleVwiIGluIHBvaW50LnBhdGhbMl0gJiYgcG9pbnQucGF0aFsyXS5fa2V5LCBibG9jayA9IHZhbHVlLmZpbmQoKGJsaykgPT4gYmxrLl9rZXkgPT09IGJsb2NrS2V5KTtcbiAgaWYgKGJsb2NrKVxuICAgIG5ld1BhdGgucHVzaCh7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfSk7XG4gIGVsc2VcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKGJsb2NrICYmIHBvaW50LnBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIikge1xuICAgIGlmICghYmxvY2suY2hpbGRyZW4gfHwgQXJyYXkuaXNBcnJheShibG9jay5jaGlsZHJlbikgJiYgYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgY2hpbGQgPSBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBibG9jay5jaGlsZHJlbi5maW5kKChjbGQpID0+IGNsZC5fa2V5ID09PSBjaGlsZEtleSk7XG4gICAgaWYgKGNoaWxkKVxuICAgICAgbmV3UGF0aC5wdXNoKFwiY2hpbGRyZW5cIiksIG5ld1BhdGgucHVzaCh7XG4gICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgIH0pLCBuZXdPZmZzZXQgPSBjaGlsZC50ZXh0ICYmIGNoaWxkLnRleHQubGVuZ3RoID49IHBvaW50Lm9mZnNldCA/IHBvaW50Lm9mZnNldCA6IGNoaWxkLnRleHQgJiYgY2hpbGQudGV4dC5sZW5ndGggfHwgMDtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBhdGg6IG5ld1BhdGgsXG4gICAgb2Zmc2V0OiBuZXdPZmZzZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlbGVjdGlvbihzZWxlY3Rpb24sIHZhbHVlKSB7XG4gIGlmICghc2VsZWN0aW9uIHx8ICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIG51bGw7XG4gIGxldCBuZXdBbmNob3IgPSBudWxsLCBuZXdGb2N1cyA9IG51bGw7XG4gIGNvbnN0IHtcbiAgICBhbmNob3IsXG4gICAgZm9jdXNcbiAgfSA9IHNlbGVjdGlvbjtcbiAgcmV0dXJuIGFuY2hvciAmJiB2YWx1ZS5maW5kKChibGspID0+IGlzRXF1YWwoe1xuICAgIF9rZXk6IGJsay5fa2V5XG4gIH0sIGFuY2hvci5wYXRoWzBdKSkgJiYgKG5ld0FuY2hvciA9IG5vcm1hbGl6ZVBvaW50KGFuY2hvciwgdmFsdWUpKSwgZm9jdXMgJiYgdmFsdWUuZmluZCgoYmxrKSA9PiBpc0VxdWFsKHtcbiAgICBfa2V5OiBibGsuX2tleVxuICB9LCBmb2N1cy5wYXRoWzBdKSkgJiYgKG5ld0ZvY3VzID0gbm9ybWFsaXplUG9pbnQoZm9jdXMsIHZhbHVlKSksIG5ld0FuY2hvciAmJiBuZXdGb2N1cyA/IHtcbiAgICBhbmNob3I6IG5ld0FuY2hvcixcbiAgICBmb2N1czogbmV3Rm9jdXMsXG4gICAgYmFja3dhcmQ6IHNlbGVjdGlvbi5iYWNrd2FyZFxuICB9IDogbnVsbDtcbn1cbmNvbnN0IFZPSURfQ0hJTERfS0VZID0gXCJ2b2lkLWNoaWxkXCI7XG5mdW5jdGlvbiBrZWVwT2JqZWN0RXF1YWxpdHkob2JqZWN0LCBrZXlNYXApIHtcbiAgY29uc3QgdmFsdWUgPSBrZXlNYXBbb2JqZWN0Ll9rZXldO1xuICByZXR1cm4gdmFsdWUgJiYgaXNFcXVhbChvYmplY3QsIHZhbHVlKSA/IHZhbHVlIDogKGtleU1hcFtvYmplY3QuX2tleV0gPSBvYmplY3QsIG9iamVjdCk7XG59XG5mdW5jdGlvbiB0b1NsYXRlVmFsdWUodmFsdWUsIHtcbiAgc2NoZW1hVHlwZXNcbn0sIGtleU1hcCA9IHt9KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCgoYmxvY2spID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBfdHlwZSxcbiAgICAgIF9rZXksXG4gICAgICAuLi5yZXN0XG4gICAgfSA9IGJsb2NrLCB2b2lkQ2hpbGRyZW4gPSBbe1xuICAgICAgX2tleTogVk9JRF9DSElMRF9LRVksXG4gICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICB0ZXh0OiBcIlwiLFxuICAgICAgbWFya3M6IFtdXG4gICAgfV07XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLl90eXBlID09PSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lKSB7XG4gICAgICBjb25zdCB0ZXh0QmxvY2sgPSBibG9jaztcbiAgICAgIGxldCBoYXNJbmxpbmVzID0gITE7XG4gICAgICBjb25zdCBoYXNNaXNzaW5nU3R5bGUgPSB0eXBlb2YgdGV4dEJsb2NrLnN0eWxlID4gXCJ1XCIsIGhhc01pc3NpbmdNYXJrRGVmcyA9IHR5cGVvZiB0ZXh0QmxvY2subWFya0RlZnMgPiBcInVcIiwgaGFzTWlzc2luZ0NoaWxkcmVuID0gdHlwZW9mIHRleHRCbG9jay5jaGlsZHJlbiA+IFwidVwiLCBjaGlsZHJlbiA9ICh0ZXh0QmxvY2suY2hpbGRyZW4gfHwgW10pLm1hcCgoY2hpbGQpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIF90eXBlOiBjVHlwZSxcbiAgICAgICAgICBfa2V5OiBjS2V5LFxuICAgICAgICAgIC4uLmNSZXN0XG4gICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgcmV0dXJuIGNUeXBlICE9PSBcInNwYW5cIiA/IChoYXNJbmxpbmVzID0gITAsIGtlZXBPYmplY3RFcXVhbGl0eSh7XG4gICAgICAgICAgX3R5cGU6IGNUeXBlLFxuICAgICAgICAgIF9rZXk6IGNLZXksXG4gICAgICAgICAgY2hpbGRyZW46IHZvaWRDaGlsZHJlbixcbiAgICAgICAgICB2YWx1ZTogY1Jlc3QsXG4gICAgICAgICAgX19pbmxpbmU6ICEwXG4gICAgICAgIH0sIGtleU1hcCkpIDogY2hpbGQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhaGFzTWlzc2luZ1N0eWxlICYmICFoYXNNaXNzaW5nTWFya0RlZnMgJiYgIWhhc01pc3NpbmdDaGlsZHJlbiAmJiAhaGFzSW5saW5lcyAmJiBFbGVtZW50JDEuaXNFbGVtZW50KGJsb2NrKSA/IGJsb2NrIDogKGhhc01pc3NpbmdTdHlsZSAmJiAocmVzdC5zdHlsZSA9IHNjaGVtYVR5cGVzLnN0eWxlc1swXS52YWx1ZSksIGtlZXBPYmplY3RFcXVhbGl0eSh7XG4gICAgICAgIF90eXBlLFxuICAgICAgICBfa2V5LFxuICAgICAgICAuLi5yZXN0LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgfSwga2V5TWFwKSk7XG4gICAgfVxuICAgIHJldHVybiBrZWVwT2JqZWN0RXF1YWxpdHkoe1xuICAgICAgX3R5cGUsXG4gICAgICBfa2V5LFxuICAgICAgY2hpbGRyZW46IHZvaWRDaGlsZHJlbixcbiAgICAgIHZhbHVlOiByZXN0XG4gICAgfSwga2V5TWFwKTtcbiAgfSkgOiBbXTtcbn1cbmZ1bmN0aW9uIGZyb21TbGF0ZVZhbHVlKHZhbHVlLCB0ZXh0QmxvY2tUeXBlLCBrZXlNYXAgPSB7fSkge1xuICByZXR1cm4gdmFsdWUubWFwKChibG9jaykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIF9rZXksXG4gICAgICBfdHlwZVxuICAgIH0gPSBibG9jaztcbiAgICBpZiAoIV9rZXkgfHwgIV90eXBlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgdmFsaWQgYmxvY2tcIik7XG4gICAgaWYgKF90eXBlID09PSB0ZXh0QmxvY2tUeXBlICYmIFwiY2hpbGRyZW5cIiBpbiBibG9jayAmJiBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBfa2V5KSB7XG4gICAgICBsZXQgaGFzSW5saW5lcyA9ICExO1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBfdHlwZTogX2NUeXBlXG4gICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBjaGlsZCAmJiBfY1R5cGUgIT09IFwic3BhblwiKSB7XG4gICAgICAgICAgaGFzSW5saW5lcyA9ICEwO1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgICAgX2tleTogayxcbiAgICAgICAgICAgIF90eXBlOiB0LFxuICAgICAgICAgICAgX19pbmxpbmU6IF9pLFxuICAgICAgICAgICAgY2hpbGRyZW46IF9jLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH0gPSBjaGlsZDtcbiAgICAgICAgICByZXR1cm4ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAuLi52LFxuICAgICAgICAgICAgX2tleTogayxcbiAgICAgICAgICAgIF90eXBlOiB0XG4gICAgICAgICAgfSwga2V5TWFwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoYXNJbmxpbmVzID8ga2VlcE9iamVjdEVxdWFsaXR5KHtcbiAgICAgICAgLi4uYmxvY2ssXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBfa2V5LFxuICAgICAgICBfdHlwZVxuICAgICAgfSwga2V5TWFwKSA6IGJsb2NrO1xuICAgIH1cbiAgICBjb25zdCBibG9ja1ZhbHVlID0gXCJ2YWx1ZVwiIGluIGJsb2NrICYmIGJsb2NrLnZhbHVlO1xuICAgIHJldHVybiBrZWVwT2JqZWN0RXF1YWxpdHkoe1xuICAgICAgX2tleSxcbiAgICAgIF90eXBlLFxuICAgICAgLi4udHlwZW9mIGJsb2NrVmFsdWUgPT0gXCJvYmplY3RcIiA/IGJsb2NrVmFsdWUgOiB7fVxuICAgIH0sIGtleU1hcCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNFcXVhbFRvRW1wdHlFZGl0b3IoY2hpbGRyZW4sIHNjaGVtYVR5cGVzKSB7XG4gIHJldHVybiBjaGlsZHJlbiA9PT0gdm9pZCAwIHx8IGNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCBjaGlsZHJlbiAmJiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgRWxlbWVudCQxLmlzRWxlbWVudChjaGlsZHJlblswXSkgJiYgY2hpbGRyZW5bMF0uX3R5cGUgPT09IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUgJiYgXCJzdHlsZVwiIGluIGNoaWxkcmVuWzBdICYmIGNoaWxkcmVuWzBdLnN0eWxlID09PSBzY2hlbWFUeXBlcy5zdHlsZXNbMF0udmFsdWUgJiYgIShcImxpc3RJdGVtXCIgaW4gY2hpbGRyZW5bMF0pICYmIEFycmF5LmlzQXJyYXkoY2hpbGRyZW5bMF0uY2hpbGRyZW4pICYmIGNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBUZXh0LmlzVGV4dChjaGlsZHJlblswXS5jaGlsZHJlblswXSkgJiYgY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uX3R5cGUgPT09IFwic3BhblwiICYmICFjaGlsZHJlblswXS5jaGlsZHJlblswXS5tYXJrcz8uam9pbihcIlwiKSAmJiBjaGlsZHJlblswXS5jaGlsZHJlblswXS50ZXh0ID09PSBcIlwiO1xufVxuY29uc3QgSVNfUFJPQ0VTU0lOR19SRU1PVEVfQ0hBTkdFUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19EUkFHR0lORyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBJU19EUkFHR0lOR19CTE9DS19FTEVNRU5UID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIElTX0RSQUdHSU5HX0VMRU1FTlRfVEFSR0VUID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIElTX0RSQUdHSU5HX0JMT0NLX1RBUkdFVF9QT1NJVElPTiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBLRVlfVE9fU0xBVEVfRUxFTUVOVCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBLRVlfVE9fVkFMVUVfRUxFTUVOVCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBTTEFURV9UT19QT1JUQUJMRV9URVhUX1JBTkdFID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIERlZmF1bHRPYmplY3QgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgJCA9IGMoNCk7XG4gIGxldCB0MDtcbiAgJFswXSA9PT0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIikgPyAodDAgPSB7XG4gICAgdXNlclNlbGVjdDogXCJub25lXCJcbiAgfSwgJFswXSA9IHQwKSA6IHQwID0gJFswXTtcbiAgbGV0IHQxO1xuICByZXR1cm4gJFsxXSAhPT0gcHJvcHMudmFsdWUuX2tleSB8fCAkWzJdICE9PSBwcm9wcy52YWx1ZS5fdHlwZSA/ICh0MSA9IC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwiZGl2XCIsIHsgc3R5bGU6IHQwLCBjaGlsZHJlbjogW1xuICAgIFwiW1wiLFxuICAgIHByb3BzLnZhbHVlLl90eXBlLFxuICAgIFwiOiBcIixcbiAgICBwcm9wcy52YWx1ZS5fa2V5LFxuICAgIFwiXVwiXG4gIF0gfSksICRbMV0gPSBwcm9wcy52YWx1ZS5fa2V5LCAkWzJdID0gcHJvcHMudmFsdWUuX3R5cGUsICRbM10gPSB0MSkgOiB0MSA9ICRbM10sIHQxO1xufTtcbkRlZmF1bHRPYmplY3QuZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRPYmplY3RcIjtcbmNvbnN0IGRlYnVnJGogPSBkZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50czpEcmFnZ2FibGVCbG9ja1wiKSwgRHJhZ2dhYmxlQmxvY2sgPSAodDApID0+IHtcbiAgY29uc3QgJCA9IGMoNTEpLCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZWxlbWVudCxcbiAgICByZWFkT25seSxcbiAgICBibG9ja1JlZlxuICB9ID0gdDAsIGVkaXRvciA9IHVzZVNsYXRlU3RhdGljKCksIGRyYWdHaG9zdFJlZiA9IHVzZVJlZih2b2lkIDApLCBbaXNEcmFnT3Zlciwgc2V0SXNEcmFnT3Zlcl0gPSB1c2VTdGF0ZSghMSk7XG4gIGxldCB0MSwgdDI7XG4gICRbMF0gIT09IGVkaXRvciB8fCAkWzFdICE9PSBlbGVtZW50ID8gKHQyID0gRWRpdG9yLmlzVm9pZChlZGl0b3IsIGVsZW1lbnQpLCAkWzBdID0gZWRpdG9yLCAkWzFdID0gZWxlbWVudCwgJFsyXSA9IHQyKSA6IHQyID0gJFsyXSwgdDEgPSB0MjtcbiAgY29uc3QgaXNWb2lkID0gdDE7XG4gIGxldCB0MywgdDQ7XG4gICRbM10gIT09IGVkaXRvciB8fCAkWzRdICE9PSBlbGVtZW50ID8gKHQ0ID0gRWRpdG9yLmlzSW5saW5lKGVkaXRvciwgZWxlbWVudCksICRbM10gPSBlZGl0b3IsICRbNF0gPSBlbGVtZW50LCAkWzVdID0gdDQpIDogdDQgPSAkWzVdLCB0MyA9IHQ0O1xuICBjb25zdCBpc0lubGluZSA9IHQzLCBbYmxvY2tFbGVtZW50LCBzZXRCbG9ja0VsZW1lbnRdID0gdXNlU3RhdGUobnVsbCk7XG4gIGxldCB0NSwgdDY7XG4gICRbNl0gIT09IGJsb2NrUmVmIHx8ICRbN10gIT09IGVkaXRvciB8fCAkWzhdICE9PSBlbGVtZW50ID8gKHQ1ID0gKCkgPT4gc2V0QmxvY2tFbGVtZW50KGJsb2NrUmVmID8gYmxvY2tSZWYuY3VycmVudCA6IFJlYWN0RWRpdG9yLnRvRE9NTm9kZShlZGl0b3IsIGVsZW1lbnQpKSwgdDYgPSBbZWRpdG9yLCBlbGVtZW50LCBibG9ja1JlZl0sICRbNl0gPSBibG9ja1JlZiwgJFs3XSA9IGVkaXRvciwgJFs4XSA9IGVsZW1lbnQsICRbOV0gPSB0NSwgJFsxMF0gPSB0NikgOiAodDUgPSAkWzldLCB0NiA9ICRbMTBdKSwgdXNlRWZmZWN0KHQ1LCB0Nik7XG4gIGxldCB0NztcbiAgJFsxMV0gIT09IGJsb2NrRWxlbWVudCB8fCAkWzEyXSAhPT0gZWRpdG9yIHx8ICRbMTNdICE9PSBlbGVtZW50ID8gKHQ3ID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgaXNNeURyYWdPdmVyID0gSVNfRFJBR0dJTkdfQkxPQ0tfRUxFTUVOVC5nZXQoZWRpdG9yKTtcbiAgICBpZiAoIWlzTXlEcmFnT3ZlciB8fCAhYmxvY2tFbGVtZW50KVxuICAgICAgcmV0dXJuO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCksIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJtb3ZlXCIsIElTX0RSQUdHSU5HX0VMRU1FTlRfVEFSR0VULnNldChlZGl0b3IsIGVsZW1lbnQpO1xuICAgIGNvbnN0IGVsZW1lbnRSZWN0ID0gYmxvY2tFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBvZmZzZXQgPSBlbGVtZW50UmVjdC50b3AsIGhlaWdodCA9IGVsZW1lbnRSZWN0LmhlaWdodCwgWSA9IGV2ZW50LnBhZ2VZLCBsb2MgPSBNYXRoLmFicyhvZmZzZXQgLSBZKTtcbiAgICBpZiAoZWxlbWVudCA9PT0gZWRpdG9yLmNoaWxkcmVuWzBdIHx8IChsb2MgPCBoZWlnaHQgLyAyID8gSVNfRFJBR0dJTkdfQkxPQ0tfVEFSR0VUX1BPU0lUSU9OLnNldChlZGl0b3IsIFwidG9wXCIpIDogSVNfRFJBR0dJTkdfQkxPQ0tfVEFSR0VUX1BPU0lUSU9OLnNldChlZGl0b3IsIFwiYm90dG9tXCIpKSwgaXNNeURyYWdPdmVyID09PSBlbGVtZW50KSB7XG4gICAgICBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwibm9uZVwiO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRJc0RyYWdPdmVyKCEwKTtcbiAgfSwgJFsxMV0gPSBibG9ja0VsZW1lbnQsICRbMTJdID0gZWRpdG9yLCAkWzEzXSA9IGVsZW1lbnQsICRbMTRdID0gdDcpIDogdDcgPSAkWzE0XTtcbiAgY29uc3QgaGFuZGxlRHJhZ092ZXIgPSB0NztcbiAgbGV0IHQ4O1xuICAkWzE1XSA9PT0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIikgPyAodDggPSAoKSA9PiB7XG4gICAgc2V0SXNEcmFnT3ZlcighMSk7XG4gIH0sICRbMTVdID0gdDgpIDogdDggPSAkWzE1XTtcbiAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gdDg7XG4gIGxldCB0OTtcbiAgJFsxNl0gIT09IGVkaXRvciB8fCAkWzE3XSAhPT0gZWxlbWVudCA/ICh0OSA9IChldmVudF8wKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0QmxvY2sgPSBJU19EUkFHR0lOR19FTEVNRU5UX1RBUkdFVC5nZXQoZWRpdG9yKTtcbiAgICBpZiAodGFyZ2V0QmxvY2spIHtcbiAgICAgIElTX0RSQUdHSU5HLnNldChlZGl0b3IsICExKSwgZXZlbnRfMC5wcmV2ZW50RGVmYXVsdCgpLCBldmVudF8wLnN0b3BQcm9wYWdhdGlvbigpLCBJU19EUkFHR0lOR19FTEVNRU5UX1RBUkdFVC5kZWxldGUoZWRpdG9yKSwgZHJhZ0dob3N0UmVmLmN1cnJlbnQgJiYgKGRlYnVnJGooXCJSZW1vdmluZyBkcmFnIGdob3N0XCIpLCBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRyYWdHaG9zdFJlZi5jdXJyZW50KSk7XG4gICAgICBjb25zdCBkcmFnUG9zaXRpb24gPSBJU19EUkFHR0lOR19CTE9DS19UQVJHRVRfUE9TSVRJT04uZ2V0KGVkaXRvcik7XG4gICAgICBJU19EUkFHR0lOR19CTE9DS19UQVJHRVRfUE9TSVRJT04uZGVsZXRlKGVkaXRvcik7XG4gICAgICBsZXQgdGFyZ2V0UGF0aCA9IFJlYWN0RWRpdG9yLmZpbmRQYXRoKGVkaXRvciwgdGFyZ2V0QmxvY2spO1xuICAgICAgY29uc3QgbXlQYXRoID0gUmVhY3RFZGl0b3IuZmluZFBhdGgoZWRpdG9yLCBlbGVtZW50KSwgaXNCZWZvcmUgPSBQYXRoLmlzQmVmb3JlKG15UGF0aCwgdGFyZ2V0UGF0aCk7XG4gICAgICBpZiAoZHJhZ1Bvc2l0aW9uID09PSBcImJvdHRvbVwiICYmICFpc0JlZm9yZSkge1xuICAgICAgICBpZiAodGFyZ2V0UGF0aFswXSA+PSBlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGRlYnVnJGooXCJ0YXJnZXQgaXMgYWxyZWFkeSBhdCB0aGUgYm90dG9tLCBub3QgbW92aW5nXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmlnaW5hbFBhdGggPSB0YXJnZXRQYXRoO1xuICAgICAgICB0YXJnZXRQYXRoID0gUGF0aC5uZXh0KHRhcmdldFBhdGgpLCBkZWJ1ZyRqKGBBZGp1c3RpbmcgdGFyZ2V0UGF0aCBmcm9tICR7SlNPTi5zdHJpbmdpZnkob3JpZ2luYWxQYXRoKX0gdG8gJHtKU09OLnN0cmluZ2lmeSh0YXJnZXRQYXRoKX1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChkcmFnUG9zaXRpb24gPT09IFwidG9wXCIgJiYgaXNCZWZvcmUgJiYgdGFyZ2V0UGF0aFswXSAhPT0gZWRpdG9yLmNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxQYXRoXzAgPSB0YXJnZXRQYXRoO1xuICAgICAgICB0YXJnZXRQYXRoID0gUGF0aC5wcmV2aW91cyh0YXJnZXRQYXRoKSwgZGVidWckaihgQWRqdXN0aW5nIHRhcmdldFBhdGggZnJvbSAke0pTT04uc3RyaW5naWZ5KG9yaWdpbmFsUGF0aF8wKX0gdG8gJHtKU09OLnN0cmluZ2lmeSh0YXJnZXRQYXRoKX1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChQYXRoLmVxdWFscyh0YXJnZXRQYXRoLCBteVBhdGgpKSB7XG4gICAgICAgIGV2ZW50XzAucHJldmVudERlZmF1bHQoKSwgZGVidWckaihcInRhcmdldFBhdGggYW5kIG15UGF0aCBpcyB0aGUgc2FtZSwgbm90IG1vdmluZ1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGVidWckaihgTW92aW5nIGVsZW1lbnQgJHtlbGVtZW50Ll9rZXl9IGZyb20gcGF0aCAke0pTT04uc3RyaW5naWZ5KG15UGF0aCl9IHRvICR7SlNPTi5zdHJpbmdpZnkodGFyZ2V0UGF0aCl9ICgke2RyYWdQb3NpdGlvbn0pYCksIFRyYW5zZm9ybXMubW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogbXlQYXRoLFxuICAgICAgICB0bzogdGFyZ2V0UGF0aFxuICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1ZyRqKFwiTm8gdGFyZ2V0IGVsZW1lbnQsIG5vdCBkb2luZyBhbnl0aGluZ1wiKTtcbiAgfSwgJFsxNl0gPSBlZGl0b3IsICRbMTddID0gZWxlbWVudCwgJFsxOF0gPSB0OSkgOiB0OSA9ICRbMThdO1xuICBjb25zdCBoYW5kbGVEcmFnRW5kID0gdDk7XG4gIGxldCB0MTA7XG4gICRbMTldICE9PSBlZGl0b3IgfHwgJFsyMF0gIT09IGVsZW1lbnQgPyAodDEwID0gKGV2ZW50XzEpID0+IHtcbiAgICBJU19EUkFHR0lOR19CTE9DS19FTEVNRU5ULmdldChlZGl0b3IpICYmIChkZWJ1ZyRqKFwiT24gZHJvcCAocHJldmVudGVkKVwiLCBlbGVtZW50KSwgZXZlbnRfMS5wcmV2ZW50RGVmYXVsdCgpLCBldmVudF8xLnN0b3BQcm9wYWdhdGlvbigpLCBzZXRJc0RyYWdPdmVyKCExKSk7XG4gIH0sICRbMTldID0gZWRpdG9yLCAkWzIwXSA9IGVsZW1lbnQsICRbMjFdID0gdDEwKSA6IHQxMCA9ICRbMjFdO1xuICBjb25zdCBoYW5kbGVEcm9wID0gdDEwO1xuICBsZXQgdDExO1xuICAkWzIyXSAhPT0gZWRpdG9yIHx8ICRbMjNdICE9PSBlbGVtZW50IHx8ICRbMjRdICE9PSBpc1ZvaWQgPyAodDExID0gKGV2ZW50XzIpID0+IHtcbiAgICBpZiAoIWlzVm9pZCkge1xuICAgICAgSVNfRFJBR0dJTkdfQkxPQ0tfRUxFTUVOVC5kZWxldGUoZWRpdG9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgSVNfRFJBR0dJTkcuc2V0KGVkaXRvciwgITApLCBJU19EUkFHR0lOR19CTE9DS19FTEVNRU5ULnNldChlZGl0b3IsIGVsZW1lbnQpLCBldmVudF8yLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50XzIudGFyZ2V0O1xuICAgIHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmICh0YXJnZXQuc3R5bGUub3BhY2l0eSA9IFwiMVwiKTtcbiAgfSwgJFsyMl0gPSBlZGl0b3IsICRbMjNdID0gZWxlbWVudCwgJFsyNF0gPSBpc1ZvaWQsICRbMjVdID0gdDExKSA6IHQxMSA9ICRbMjVdO1xuICBjb25zdCBoYW5kbGVEcmFnID0gdDExO1xuICBsZXQgdDEyO1xuICAkWzI2XSAhPT0gYmxvY2tFbGVtZW50IHx8ICRbMjddICE9PSBlZGl0b3IgfHwgJFsyOF0gIT09IGhhbmRsZURyYWcgfHwgJFsyOV0gIT09IGlzSW5saW5lIHx8ICRbMzBdICE9PSBpc1ZvaWQgPyAodDEyID0gKGV2ZW50XzMpID0+IHtcbiAgICBpZiAoIWlzVm9pZCB8fCBpc0lubGluZSkge1xuICAgICAgZGVidWckaihcIk5vdCBkcmFnZ2luZyBibG9ja1wiKSwgSVNfRFJBR0dJTkdfQkxPQ0tfRUxFTUVOVC5kZWxldGUoZWRpdG9yKSwgSVNfRFJBR0dJTkcuc2V0KGVkaXRvciwgITEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZGVidWckaihcIkRyYWcgc3RhcnRcIiksIElTX0RSQUdHSU5HLnNldChlZGl0b3IsICEwKSwgZXZlbnRfMy5kYXRhVHJhbnNmZXIgJiYgKGV2ZW50XzMuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJhcHBsaWNhdGlvbi9wb3J0YWJsZS10ZXh0XCIsIFwic29tZXRoaW5nXCIpLCBldmVudF8zLmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gXCJtb3ZlXCIpLCBibG9ja0VsZW1lbnQgJiYgYmxvY2tFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGxldCBkcmFnR2hvc3QgPSBibG9ja0VsZW1lbnQuY2xvbmVOb2RlKCEwKTtcbiAgICAgIGNvbnN0IGN1c3RvbUdob3N0ID0gZHJhZ0dob3N0LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1wdC1kcmFnLWdob3N0LWVsZW1lbnRdXCIpO1xuICAgICAgaWYgKGN1c3RvbUdob3N0ICYmIChkcmFnR2hvc3QgPSBjdXN0b21HaG9zdCksIGRyYWdHaG9zdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWRyYWdnZWRcIiwgXCJcIiksIGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgZHJhZ0dob3N0UmVmLmN1cnJlbnQgPSBkcmFnR2hvc3QsIGRyYWdHaG9zdC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIiwgZHJhZ0dob3N0LnN0eWxlLmxlZnQgPSBcIi05OTk5OXB4XCIsIGRyYWdHaG9zdC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIiwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkcmFnR2hvc3QpO1xuICAgICAgICBjb25zdCByZWN0ID0gYmxvY2tFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB4ID0gZXZlbnRfMy5jbGllbnRYIC0gcmVjdC5sZWZ0LCB5ID0gZXZlbnRfMy5jbGllbnRZIC0gcmVjdC50b3A7XG4gICAgICAgIGRyYWdHaG9zdC5zdHlsZS53aWR0aCA9IGAke3JlY3Qud2lkdGh9cHhgLCBkcmFnR2hvc3Quc3R5bGUuaGVpZ2h0ID0gYCR7cmVjdC5oZWlnaHR9cHhgLCBldmVudF8zLmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoZHJhZ0dob3N0LCB4LCB5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRHJhZyhldmVudF8zKTtcbiAgfSwgJFsyNl0gPSBibG9ja0VsZW1lbnQsICRbMjddID0gZWRpdG9yLCAkWzI4XSA9IGhhbmRsZURyYWcsICRbMjldID0gaXNJbmxpbmUsICRbMzBdID0gaXNWb2lkLCAkWzMxXSA9IHQxMikgOiB0MTIgPSAkWzMxXTtcbiAgY29uc3QgaGFuZGxlRHJhZ1N0YXJ0ID0gdDEyO1xuICBsZXQgdDEzO1xuICAkWzMyXSAhPT0gZWRpdG9yIHx8ICRbMzNdICE9PSBpc0RyYWdPdmVyID8gKHQxMyA9IGlzRHJhZ092ZXIgJiYgZWRpdG9yLmNoaWxkcmVuWzBdID09PSBJU19EUkFHR0lOR19FTEVNRU5UX1RBUkdFVC5nZXQoZWRpdG9yKSwgJFszMl0gPSBlZGl0b3IsICRbMzNdID0gaXNEcmFnT3ZlciwgJFszNF0gPSB0MTMpIDogdDEzID0gJFszNF07XG4gIGNvbnN0IGlzRHJhZ2dpbmdPdmVyRmlyc3RCbG9jayA9IHQxMztcbiAgbGV0IHQxNDtcbiAgJFszNV0gIT09IGVkaXRvciB8fCAkWzM2XSAhPT0gaXNEcmFnT3ZlciA/ICh0MTQgPSBpc0RyYWdPdmVyICYmIGVkaXRvci5jaGlsZHJlbltlZGl0b3IuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gPT09IElTX0RSQUdHSU5HX0VMRU1FTlRfVEFSR0VULmdldChlZGl0b3IpLCAkWzM1XSA9IGVkaXRvciwgJFszNl0gPSBpc0RyYWdPdmVyLCAkWzM3XSA9IHQxNCkgOiB0MTQgPSAkWzM3XTtcbiAgY29uc3QgaXNEcmFnZ2luZ092ZXJMYXN0QmxvY2sgPSB0MTQsIGRyYWdQb3NpdGlvbl8wID0gSVNfRFJBR0dJTkdfQkxPQ0tfVEFSR0VUX1BPU0lUSU9OLmdldChlZGl0b3IpLCBpc0RyYWdnaW5nT3ZlclRvcCA9IGlzRHJhZ2dpbmdPdmVyRmlyc3RCbG9jayB8fCBpc0RyYWdPdmVyICYmICFpc0RyYWdnaW5nT3ZlckZpcnN0QmxvY2sgJiYgIWlzRHJhZ2dpbmdPdmVyTGFzdEJsb2NrICYmIGRyYWdQb3NpdGlvbl8wID09PSBcInRvcFwiLCBpc0RyYWdnaW5nT3ZlckJvdHRvbSA9IGlzRHJhZ2dpbmdPdmVyTGFzdEJsb2NrIHx8IGlzRHJhZ092ZXIgJiYgIWlzRHJhZ2dpbmdPdmVyRmlyc3RCbG9jayAmJiAhaXNEcmFnZ2luZ092ZXJMYXN0QmxvY2sgJiYgZHJhZ1Bvc2l0aW9uXzAgPT09IFwiYm90dG9tXCI7XG4gIGxldCB0MTUsIHQxNjtcbiAgJFszOF0gPT09IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsXCIpID8gKHQxNiA9IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwicHQtZHJvcC1pbmRpY2F0b3JcIiwgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBoZWlnaHQ6IDEsXG4gICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBjdXJyZW50Q29sb3JcIixcbiAgICB6SW5kZXg6IDVcbiAgfSB9KSwgJFszOF0gPSB0MTYpIDogdDE2ID0gJFszOF0sIHQxNSA9IHQxNjtcbiAgY29uc3QgZHJvcEluZGljYXRvciA9IHQxNTtcbiAgaWYgKHJlYWRPbmx5KSB7XG4gICAgbGV0IHQxNzI7XG4gICAgcmV0dXJuICRbMzldICE9PSBjaGlsZHJlbiA/ICh0MTcyID0gLyogQF9fUFVSRV9fICovIGpzeChGcmFnbWVudCwgeyBjaGlsZHJlbiB9KSwgJFszOV0gPSBjaGlsZHJlbiwgJFs0MF0gPSB0MTcyKSA6IHQxNzIgPSAkWzQwXSwgdDE3MjtcbiAgfVxuICBjb25zdCB0MTcgPSBpc0RyYWdnaW5nT3ZlclRvcCAmJiBkcm9wSW5kaWNhdG9yLCB0MTggPSBpc0RyYWdnaW5nT3ZlckJvdHRvbSAmJiBkcm9wSW5kaWNhdG9yO1xuICBsZXQgdDE5O1xuICByZXR1cm4gJFs0MV0gIT09IGNoaWxkcmVuIHx8ICRbNDJdICE9PSBoYW5kbGVEcmFnIHx8ICRbNDNdICE9PSBoYW5kbGVEcmFnRW5kIHx8ICRbNDRdICE9PSBoYW5kbGVEcmFnT3ZlciB8fCAkWzQ1XSAhPT0gaGFuZGxlRHJhZ1N0YXJ0IHx8ICRbNDZdICE9PSBoYW5kbGVEcm9wIHx8ICRbNDddICE9PSBpc1ZvaWQgfHwgJFs0OF0gIT09IHQxNyB8fCAkWzQ5XSAhPT0gdDE4ID8gKHQxOSA9IC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwiZGl2XCIsIHsgZHJhZ2dhYmxlOiBpc1ZvaWQsIG9uRHJhZ1N0YXJ0OiBoYW5kbGVEcmFnU3RhcnQsIG9uRHJhZzogaGFuZGxlRHJhZywgb25EcmFnT3ZlcjogaGFuZGxlRHJhZ092ZXIsIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsIG9uRHJhZ0VuZDogaGFuZGxlRHJhZ0VuZCwgb25Ecm9wOiBoYW5kbGVEcm9wLCBjaGlsZHJlbjogW1xuICAgIHQxNyxcbiAgICBjaGlsZHJlbixcbiAgICB0MThcbiAgXSB9KSwgJFs0MV0gPSBjaGlsZHJlbiwgJFs0Ml0gPSBoYW5kbGVEcmFnLCAkWzQzXSA9IGhhbmRsZURyYWdFbmQsICRbNDRdID0gaGFuZGxlRHJhZ092ZXIsICRbNDVdID0gaGFuZGxlRHJhZ1N0YXJ0LCAkWzQ2XSA9IGhhbmRsZURyb3AsICRbNDddID0gaXNWb2lkLCAkWzQ4XSA9IHQxNywgJFs0OV0gPSB0MTgsICRbNTBdID0gdDE5KSA6IHQxOSA9ICRbNTBdLCB0MTk7XG59O1xuRHJhZ2dhYmxlQmxvY2suZGlzcGxheU5hbWUgPSBcIkRyYWdnYWJsZUJsb2NrXCI7XG5kZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50czpFbGVtZW50XCIpO1xuY29uc3QgRU1QVFlfQU5OT1RBVElPTlMgPSBbXSwgaW5saW5lQmxvY2tTdHlsZSA9IHtcbiAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIlxufSwgRWxlbWVudCA9ICh7XG4gIGF0dHJpYnV0ZXMsXG4gIGNoaWxkcmVuLFxuICBlbGVtZW50LFxuICBzY2hlbWFUeXBlcyxcbiAgcmVhZE9ubHksXG4gIHJlbmRlckJsb2NrLFxuICByZW5kZXJDaGlsZCxcbiAgcmVuZGVyTGlzdEl0ZW0sXG4gIHJlbmRlclN0eWxlLFxuICBzcGVsbENoZWNrXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IHVzZVNsYXRlU3RhdGljKCksIHNlbGVjdGVkID0gdXNlU2VsZWN0ZWQoKSwgYmxvY2tSZWYgPSB1c2VSZWYobnVsbCksIGlubGluZUJsb2NrT2JqZWN0UmVmID0gdXNlUmVmKG51bGwpLCBmb2N1c2VkID0gc2VsZWN0ZWQgJiYgZWRpdG9yLnNlbGVjdGlvbiAmJiBSYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSB8fCAhMSwgdmFsdWUgPSB1c2VNZW1vKCgpID0+IGZyb21TbGF0ZVZhbHVlKFtlbGVtZW50XSwgc2NoZW1hVHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpWzBdLCBbZWRpdG9yLCBlbGVtZW50LCBzY2hlbWFUeXBlcy5ibG9jay5uYW1lXSk7XG4gIGxldCByZW5kZXJlZEJsb2NrID0gY2hpbGRyZW4sIGNsYXNzTmFtZTtcbiAgY29uc3QgYmxvY2tQYXRoID0gdXNlTWVtbygoKSA9PiBbe1xuICAgIF9rZXk6IGVsZW1lbnQuX2tleVxuICB9XSwgW2VsZW1lbnRdKTtcbiAgaWYgKHR5cGVvZiBlbGVtZW50Ll90eXBlICE9IFwic3RyaW5nXCIpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgZWxlbWVudCB0byBoYXZlIGEgX3R5cGUgcHJvcGVydHlcIik7XG4gIGlmICh0eXBlb2YgZWxlbWVudC5fa2V5ICE9IFwic3RyaW5nXCIpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgZWxlbWVudCB0byBoYXZlIGEgX2tleSBwcm9wZXJ0eVwiKTtcbiAgaWYgKGVkaXRvci5pc0lubGluZShlbGVtZW50KSkge1xuICAgIGNvbnN0IHBhdGggPSBSZWFjdEVkaXRvci5maW5kUGF0aChlZGl0b3IsIGVsZW1lbnQpLCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBwYXRoLCB7XG4gICAgICBkZXB0aDogMVxuICAgIH0pLCBzY2hlbWFUeXBlID0gc2NoZW1hVHlwZXMuaW5saW5lT2JqZWN0cy5maW5kKChfdHlwZSkgPT4gX3R5cGUubmFtZSA9PT0gZWxlbWVudC5fdHlwZSk7XG4gICAgaWYgKCFzY2hlbWFUeXBlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgdHlwZSBmb3IgaW5saW5lIGJsb2NrIGVsZW1lbnRcIik7XG4gICAgaWYgKEVsZW1lbnQkMS5pc0VsZW1lbnQoYmxvY2spKSB7XG4gICAgICBjb25zdCBlbG1QYXRoID0gW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgIF9rZXk6IGVsZW1lbnQuX2tleVxuICAgICAgfV07XG4gICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHMoXCJzcGFuXCIsIHsgLi4uYXR0cmlidXRlcywgY2hpbGRyZW46IFtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3hzKFwic3BhblwiLCB7IGRyYWdnYWJsZTogIXJlYWRPbmx5LCBjbGFzc05hbWU6IFwicHQtaW5saW5lLW9iamVjdFwiLCBcImRhdGEtdGVzdGlkXCI6IFwicHQtaW5saW5lLW9iamVjdFwiLCByZWY6IGlubGluZUJsb2NrT2JqZWN0UmVmLCBzdHlsZTogaW5saW5lQmxvY2tTdHlsZSwgY29udGVudEVkaXRhYmxlOiAhMSwgY2hpbGRyZW46IFtcbiAgICAgICAgICByZW5kZXJDaGlsZCAmJiByZW5kZXJDaGlsZCh7XG4gICAgICAgICAgICBhbm5vdGF0aW9uczogRU1QVFlfQU5OT1RBVElPTlMsXG4gICAgICAgICAgICAvLyBUaGVzZSBpbmxpbmUgb2JqZWN0cyBjdXJyZW50bHkgZG9lc24ndCBzdXBwb3J0IGFubm90YXRpb25zLiBUaGlzIGlzIGEgbGltaXRhdGlvbiBvZiB0aGUgY3VycmVudCBQVCBzcGVjL21vZGVsLlxuICAgICAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goRGVmYXVsdE9iamVjdCwgeyB2YWx1ZSB9KSxcbiAgICAgICAgICAgIGVkaXRvckVsZW1lbnRSZWY6IGlubGluZUJsb2NrT2JqZWN0UmVmLFxuICAgICAgICAgICAgZm9jdXNlZCxcbiAgICAgICAgICAgIHBhdGg6IGVsbVBhdGgsXG4gICAgICAgICAgICBzY2hlbWFUeXBlLFxuICAgICAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgICAgICB0eXBlOiBzY2hlbWFUeXBlLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAhcmVuZGVyQ2hpbGQgJiYgLyogQF9fUFVSRV9fICovIGpzeChEZWZhdWx0T2JqZWN0LCB7IHZhbHVlIH0pXG4gICAgICAgIF0gfSwgZWxlbWVudC5fa2V5KVxuICAgICAgXSB9KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmxvY2sgbm90IGZvdW5kIVwiKTtcbiAgfVxuICBpZiAoZWxlbWVudC5fdHlwZSA9PT0gc2NoZW1hVHlwZXMuYmxvY2submFtZSkge1xuICAgIGNsYXNzTmFtZSA9IFwicHQtYmxvY2sgcHQtdGV4dC1ibG9ja1wiO1xuICAgIGNvbnN0IGlzTGlzdEl0ZW0gPSBcImxpc3RJdGVtXCIgaW4gZWxlbWVudCwgc3R5bGUgPSBcInN0eWxlXCIgaW4gZWxlbWVudCAmJiBlbGVtZW50LnN0eWxlIHx8IFwibm9ybWFsXCI7XG4gICAgY2xhc3NOYW1lID0gYHB0LWJsb2NrIHB0LXRleHQtYmxvY2sgcHQtdGV4dC1ibG9jay1zdHlsZS0ke3N0eWxlfWA7XG4gICAgY29uc3QgYmxvY2tTdHlsZVR5cGUgPSBzY2hlbWFUeXBlcy5zdHlsZXMuZmluZCgoaXRlbSkgPT4gaXRlbS52YWx1ZSA9PT0gc3R5bGUpO1xuICAgIHJlbmRlclN0eWxlICYmIGJsb2NrU3R5bGVUeXBlICYmIChyZW5kZXJlZEJsb2NrID0gcmVuZGVyU3R5bGUoe1xuICAgICAgYmxvY2s6IGVsZW1lbnQsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGZvY3VzZWQsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIHZhbHVlOiBzdHlsZSxcbiAgICAgIHBhdGg6IGJsb2NrUGF0aCxcbiAgICAgIHNjaGVtYVR5cGU6IGJsb2NrU3R5bGVUeXBlLFxuICAgICAgZWRpdG9yRWxlbWVudFJlZjogYmxvY2tSZWZcbiAgICB9KSk7XG4gICAgbGV0IGxldmVsO1xuICAgIGlmIChpc0xpc3RJdGVtICYmICh0eXBlb2YgZWxlbWVudC5sZXZlbCA9PSBcIm51bWJlclwiICYmIChsZXZlbCA9IGVsZW1lbnQubGV2ZWwpLCBjbGFzc05hbWUgKz0gYCBwdC1saXN0LWl0ZW0gcHQtbGlzdC1pdGVtLSR7ZWxlbWVudC5saXN0SXRlbX0gcHQtbGlzdC1pdGVtLWxldmVsLSR7bGV2ZWwgfHwgMX1gKSwgZWRpdG9yLmlzTGlzdEJsb2NrKHZhbHVlKSAmJiBpc0xpc3RJdGVtICYmIGVsZW1lbnQubGlzdEl0ZW0pIHtcbiAgICAgIGNvbnN0IGxpc3RUeXBlID0gc2NoZW1hVHlwZXMubGlzdHMuZmluZCgoaXRlbV8wKSA9PiBpdGVtXzAudmFsdWUgPT09IGVsZW1lbnQubGlzdEl0ZW0pO1xuICAgICAgcmVuZGVyTGlzdEl0ZW0gJiYgbGlzdFR5cGUgJiYgKHJlbmRlcmVkQmxvY2sgPSByZW5kZXJMaXN0SXRlbSh7XG4gICAgICAgIGJsb2NrOiB2YWx1ZSxcbiAgICAgICAgY2hpbGRyZW46IHJlbmRlcmVkQmxvY2ssXG4gICAgICAgIGZvY3VzZWQsXG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICB2YWx1ZTogZWxlbWVudC5saXN0SXRlbSxcbiAgICAgICAgcGF0aDogYmxvY2tQYXRoLFxuICAgICAgICBzY2hlbWFUeXBlOiBsaXN0VHlwZSxcbiAgICAgICAgbGV2ZWw6IHZhbHVlLmxldmVsIHx8IDEsXG4gICAgICAgIGVkaXRvckVsZW1lbnRSZWY6IGJsb2NrUmVmXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGNvbnN0IHJlbmRlclByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgICAgIGNoaWxkcmVuOiByZW5kZXJlZEJsb2NrLFxuICAgICAgZWRpdG9yRWxlbWVudFJlZjogYmxvY2tSZWYsXG4gICAgICBmb2N1c2VkLFxuICAgICAgbGV2ZWwsXG4gICAgICBsaXN0SXRlbTogaXNMaXN0SXRlbSA/IGVsZW1lbnQubGlzdEl0ZW0gOiB2b2lkIDAsXG4gICAgICBwYXRoOiBibG9ja1BhdGgsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIHN0eWxlLFxuICAgICAgc2NoZW1hVHlwZTogc2NoZW1hVHlwZXMuYmxvY2ssXG4gICAgICB2YWx1ZVxuICAgIH0sIFwidHlwZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcIlByb3BlcnR5ICd0eXBlJyBpcyBkZXByZWNhdGVkLCB1c2UgJ3NjaGVtYVR5cGUnIGluc3RlYWQuXCIpLCBzY2hlbWFUeXBlcy5ibG9jaztcbiAgICAgIH1cbiAgICB9KSwgcHJvcHNPckRlZmF1bHRSZW5kZXJlZCA9IHJlbmRlckJsb2NrID8gcmVuZGVyQmxvY2socmVuZGVyUHJvcHMpIDogY2hpbGRyZW47XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwgeyAuLi5hdHRyaWJ1dGVzLCBjbGFzc05hbWUsIHNwZWxsQ2hlY2ssIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KERyYWdnYWJsZUJsb2NrLCB7IGVsZW1lbnQsIHJlYWRPbmx5LCBibG9ja1JlZiwgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJkaXZcIiwgeyByZWY6IGJsb2NrUmVmLCBjaGlsZHJlbjogcHJvcHNPckRlZmF1bHRSZW5kZXJlZCB9KSB9KSB9LCBlbGVtZW50Ll9rZXkpO1xuICB9XG4gIGNvbnN0IHNjaGVtYVR5cGVfMCA9IHNjaGVtYVR5cGVzLmJsb2NrT2JqZWN0cy5maW5kKChfdHlwZV8wKSA9PiBfdHlwZV8wLm5hbWUgPT09IGVsZW1lbnQuX3R5cGUpO1xuICBpZiAoIXNjaGVtYVR5cGVfMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIHNjaGVtYSB0eXBlIGZvciBibG9jayBlbGVtZW50IG9mIF90eXBlICR7ZWxlbWVudC5fdHlwZX1gKTtcbiAgY2xhc3NOYW1lID0gXCJwdC1ibG9jayBwdC1vYmplY3QtYmxvY2tcIjtcbiAgY29uc3QgYmxvY2tfMCA9IGZyb21TbGF0ZVZhbHVlKFtlbGVtZW50XSwgc2NoZW1hVHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpWzBdO1xuICBsZXQgcmVuZGVyZWRCbG9ja0Zyb21Qcm9wcztcbiAgaWYgKHJlbmRlckJsb2NrKSB7XG4gICAgY29uc3QgX3Byb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KERlZmF1bHRPYmplY3QsIHsgdmFsdWUgfSksXG4gICAgICBlZGl0b3JFbGVtZW50UmVmOiBibG9ja1JlZixcbiAgICAgIGZvY3VzZWQsXG4gICAgICBwYXRoOiBibG9ja1BhdGgsXG4gICAgICBzY2hlbWFUeXBlOiBzY2hlbWFUeXBlXzAsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIHZhbHVlOiBibG9ja18wXG4gICAgfSwgXCJ0eXBlXCIsIHtcbiAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFwiUHJvcGVydHkgJ3R5cGUnIGlzIGRlcHJlY2F0ZWQsIHVzZSAnc2NoZW1hVHlwZScgaW5zdGVhZC5cIiksIHNjaGVtYVR5cGVfMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZW5kZXJlZEJsb2NrRnJvbVByb3BzID0gcmVuZGVyQmxvY2soX3Byb3BzKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHMoXCJkaXZcIiwgeyAuLi5hdHRyaWJ1dGVzLCBjbGFzc05hbWUsIGNoaWxkcmVuOiBbXG4gICAgY2hpbGRyZW4sXG4gICAgLyogQF9fUFVSRV9fICovIGpzeChEcmFnZ2FibGVCbG9jaywgeyBlbGVtZW50LCByZWFkT25seSwgYmxvY2tSZWYsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFwiZGl2XCIsIHsgcmVmOiBibG9ja1JlZiwgY29udGVudEVkaXRhYmxlOiAhMSwgY2hpbGRyZW46IHJlbmRlcmVkQmxvY2tGcm9tUHJvcHMgfHwgLyogQF9fUFVSRV9fICovIGpzeChEZWZhdWx0T2JqZWN0LCB7IHZhbHVlIH0pIH0pIH0pXG4gIF0gfSwgZWxlbWVudC5fa2V5KTtcbn07XG5FbGVtZW50LmRpc3BsYXlOYW1lID0gXCJFbGVtZW50XCI7XG5jb25zdCBQb3J0YWJsZVRleHRFZGl0b3JDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKSwgdXNlUG9ydGFibGVUZXh0RWRpdG9yID0gKCkgPT4ge1xuICBjb25zdCBlZGl0b3IgPSB1c2VDb250ZXh0KFBvcnRhYmxlVGV4dEVkaXRvckNvbnRleHQpO1xuICBpZiAoIWVkaXRvcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYHVzZVBvcnRhYmxlVGV4dEVkaXRvcmAgaG9vayBtdXN0IGJlIHVzZWQgaW5zaWRlIHRoZSA8UG9ydGFibGVUZXh0RWRpdG9yPiBjb21wb25lbnQncyBjb250ZXh0LlwiKTtcbiAgcmV0dXJuIGVkaXRvcjtcbn07XG5mdW5jdGlvbiBEZWZhdWx0QW5ub3RhdGlvbihwcm9wcykge1xuICBjb25zdCAkID0gYyg2KTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBwcm9wcy5hbm5vdGF0aW9uID8gKHQwID0gKCkgPT4gYWxlcnQoSlNPTi5zdHJpbmdpZnkocHJvcHMuYW5ub3RhdGlvbikpLCAkWzBdID0gcHJvcHMuYW5ub3RhdGlvbiwgJFsxXSA9IHQwKSA6IHQwID0gJFsxXTtcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSB0MDtcbiAgbGV0IHQxO1xuICAkWzJdID09PSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSA/ICh0MSA9IHtcbiAgICBjb2xvcjogXCJibHVlXCJcbiAgfSwgJFsyXSA9IHQxKSA6IHQxID0gJFsyXTtcbiAgbGV0IHQyO1xuICByZXR1cm4gJFszXSAhPT0gaGFuZGxlQ2xpY2sgfHwgJFs0XSAhPT0gcHJvcHMuY2hpbGRyZW4gPyAodDIgPSAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHN0eWxlOiB0MSwgb25DbGljazogaGFuZGxlQ2xpY2ssIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSwgJFszXSA9IGhhbmRsZUNsaWNrLCAkWzRdID0gcHJvcHMuY2hpbGRyZW4sICRbNV0gPSB0MikgOiB0MiA9ICRbNV0sIHQyO1xufVxuRGVmYXVsdEFubm90YXRpb24uZGlzcGxheU5hbWUgPSBcIkRlZmF1bHRBbm5vdGF0aW9uXCI7XG5mdW5jdGlvbiBjb21waWxlVHlwZShyYXdUeXBlKSB7XG4gIHJldHVybiBTY2hlbWEuY29tcGlsZSh7XG4gICAgbmFtZTogXCJibG9ja1R5cGVTY2hlbWFcIixcbiAgICB0eXBlczogW3Jhd1R5cGVdXG4gIH0pLmdldChyYXdUeXBlLm5hbWUpO1xufVxuY29uc3QgRkxVU0hfUEFUQ0hFU19USFJPVFRMRURfTVMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJ0ZXN0XCIgPyA1MDAgOiAxZTMsIG11dGF0aW9uTWFjaGluZSA9IHNldHVwKHtcbiAgdHlwZXM6IHtcbiAgICBjb250ZXh0OiB7fSxcbiAgICBldmVudHM6IHt9LFxuICAgIGlucHV0OiB7fSxcbiAgICBlbWl0dGVkOiB7fVxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgXCJlbWl0IGhhcyBwZW5kaW5nIHBhdGNoZXNcIjogZW1pdCh7XG4gICAgICB0eXBlOiBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIlxuICAgIH0pLFxuICAgIFwiZW1pdCBtdXRhdGlvblwiOiBlbWl0KCh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gKHtcbiAgICAgIHR5cGU6IFwibXV0YXRpb25cIixcbiAgICAgIHBhdGNoZXM6IGNvbnRleHQucGVuZGluZ1BhdGNoZXMsXG4gICAgICBzbmFwc2hvdDogZnJvbVNsYXRlVmFsdWUoY29udGV4dC5zbGF0ZUVkaXRvci5jaGlsZHJlbiwgY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGNvbnRleHQuc2xhdGVFZGl0b3IpKVxuICAgIH0pKSxcbiAgICBcImNsZWFyIHBlbmRpbmcgcGF0Y2hlc1wiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ1BhdGNoZXM6IFtdXG4gICAgfSksXG4gICAgXCJkZWZlciBwYXRjaFwiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ1BhdGNoZXM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBbLi4uY29udGV4dC5wZW5kaW5nUGF0Y2hlcywgZXZlbnQucGF0Y2hdXG4gICAgfSlcbiAgfSxcbiAgZ3VhcmRzOiB7XG4gICAgXCJzbGF0ZSBpcyBub3JtYWxpemluZ1wiOiAoe1xuICAgICAgY29udGV4dFxuICAgIH0pID0+IEVkaXRvci5pc05vcm1hbGl6aW5nKGNvbnRleHQuc2xhdGVFZGl0b3IpXG4gIH1cbn0pLmNyZWF0ZU1hY2hpbmUoe1xuICBpZDogXCJtdXRhdGlvblwiLFxuICBjb250ZXh0OiAoe1xuICAgIGlucHV0XG4gIH0pID0+ICh7XG4gICAgcGVuZGluZ1BhdGNoZXM6IFtdLFxuICAgIHNjaGVtYTogaW5wdXQuc2NoZW1hLFxuICAgIHNsYXRlRWRpdG9yOiBpbnB1dC5zbGF0ZUVkaXRvclxuICB9KSxcbiAgaW5pdGlhbDogXCJpZGxlXCIsXG4gIHN0YXRlczoge1xuICAgIGlkbGU6IHtcbiAgICAgIG9uOiB7XG4gICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgYWN0aW9uczogW1wiZGVmZXIgcGF0Y2hcIiwgXCJlbWl0IGhhcyBwZW5kaW5nIHBhdGNoZXNcIl0sXG4gICAgICAgICAgdGFyZ2V0OiBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIjoge1xuICAgICAgYWZ0ZXI6IHtcbiAgICAgICAgW0ZMVVNIX1BBVENIRVNfVEhST1RUTEVEX01TXTogW3tcbiAgICAgICAgICBndWFyZDogXCJzbGF0ZSBpcyBub3JtYWxpemluZ1wiLFxuICAgICAgICAgIHRhcmdldDogXCJpZGxlXCIsXG4gICAgICAgICAgYWN0aW9uczogW1wiZW1pdCBtdXRhdGlvblwiLCBcImNsZWFyIHBlbmRpbmcgcGF0Y2hlc1wiXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgcmVlbnRlcjogITBcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBwYXRjaDoge1xuICAgICAgICAgIGFjdGlvbnM6IFtcImRlZmVyIHBhdGNoXCJdLFxuICAgICAgICAgIHJlZW50ZXI6ICEwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZSh2YWx1ZSwgdHlwZXMsIGtleUdlbmVyYXRvcikge1xuICBsZXQgcmVzb2x1dGlvbiA9IG51bGwsIHZhbGlkID0gITA7XG4gIGNvbnN0IHZhbGlkQ2hpbGRUeXBlcyA9IFt0eXBlcy5zcGFuLm5hbWUsIC4uLnR5cGVzLmlubGluZU9iamVjdHMubWFwKCh0KSA9PiB0Lm5hbWUpXSwgdmFsaWRCbG9ja1R5cGVzID0gW3R5cGVzLmJsb2NrLm5hbWUsIC4uLnR5cGVzLmJsb2NrT2JqZWN0cy5tYXAoKHQpID0+IHQubmFtZSldO1xuICByZXR1cm4gdmFsdWUgPT09IHZvaWQgMCA/IHtcbiAgICB2YWxpZDogITAsXG4gICAgcmVzb2x1dGlvbjogbnVsbCxcbiAgICB2YWx1ZVxuICB9IDogIUFycmF5LmlzQXJyYXkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCA/IHtcbiAgICB2YWxpZDogITEsXG4gICAgcmVzb2x1dGlvbjoge1xuICAgICAgcGF0Y2hlczogW3Vuc2V0KFtdKV0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJFZGl0b3IgdmFsdWUgbXVzdCBiZSBhbiBhcnJheSBvZiBQb3J0YWJsZSBUZXh0IGJsb2Nrcywgb3IgdW5kZWZpbmVkLlwiLFxuICAgICAgYWN0aW9uOiBcIlVuc2V0IHRoZSB2YWx1ZVwiLFxuICAgICAgaXRlbTogdmFsdWUsXG4gICAgICBpMThuOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubm90LWFuLWFycmF5LmRlc2NyaXB0aW9uXCIsXG4gICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vdC1hbi1hcnJheS5hY3Rpb25cIlxuICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVcbiAgfSA6ICh2YWx1ZS5zb21lKChibGssIGluZGV4KSA9PiB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGJsaykpXG4gICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFtpbmRleF0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayBtdXN0IGJlIGFuIG9iamVjdCwgZ290ICR7U3RyaW5nKGJsayl9YCxcbiAgICAgICAgYWN0aW9uOiBcIlVuc2V0IGludmFsaWQgaXRlbVwiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vdC1hbi1vYmplY3QuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5ub3QtYW4tb2JqZWN0LmFjdGlvblwiLFxuICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwO1xuICAgIGlmICghYmxrLl9rZXkgfHwgdHlwZW9mIGJsay5fa2V5ICE9IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3NldCh7XG4gICAgICAgICAgLi4uYmxrLFxuICAgICAgICAgIF9rZXk6IGtleUdlbmVyYXRvcigpXG4gICAgICAgIH0sIFtpbmRleF0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayBhdCBpbmRleCAke2luZGV4fSBpcyBtaXNzaW5nIHJlcXVpcmVkIF9rZXkuYCxcbiAgICAgICAgYWN0aW9uOiBcIlNldCB0aGUgYmxvY2sgd2l0aCBhIHJhbmRvbSBfa2V5IHZhbHVlXCIsXG4gICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1rZXkuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWtleS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMDtcbiAgICBpZiAoIWJsay5fdHlwZSB8fCAhdmFsaWRCbG9ja1R5cGVzLmluY2x1ZGVzKGJsay5fdHlwZSkpIHtcbiAgICAgIGlmIChibGsuX3R5cGUgPT09IFwiYmxvY2tcIikge1xuICAgICAgICBjb25zdCBjdXJyZW50QmxvY2tUeXBlTmFtZSA9IHR5cGVzLmJsb2NrLm5hbWU7XG4gICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgIHBhdGNoZXM6IFtzZXQoe1xuICAgICAgICAgICAgLi4uYmxrLFxuICAgICAgICAgICAgX3R5cGU6IGN1cnJlbnRCbG9ja1R5cGVOYW1lXG4gICAgICAgICAgfSwgW3tcbiAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgfV0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGhhcyBpbnZhbGlkIHR5cGUgbmFtZSAnJHtibGsuX3R5cGV9Jy4gQWNjb3JkaW5nIHRvIHRoZSBzY2hlbWEsIHRoZSBibG9jayB0eXBlIG5hbWUgaXMgJyR7Y3VycmVudEJsb2NrVHlwZU5hbWV9J2AsXG4gICAgICAgICAgYWN0aW9uOiBgVXNlIHR5cGUgJyR7Y3VycmVudEJsb2NrVHlwZU5hbWV9J2AsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuaW5jb3JyZWN0LWJsb2NrLXR5cGUuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmluY29ycmVjdC1ibG9jay10eXBlLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgIGV4cGVjdGVkVHlwZU5hbWU6IGN1cnJlbnRCbG9ja1R5cGVOYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhYmxrLl90eXBlICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKHtcbiAgICAgICAgLi4uYmxrLFxuICAgICAgICBfdHlwZTogdHlwZXMuYmxvY2submFtZVxuICAgICAgfSkgPyAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3NldCh7XG4gICAgICAgICAgLi4uYmxrLFxuICAgICAgICAgIF90eXBlOiB0eXBlcy5ibG9jay5uYW1lXG4gICAgICAgIH0sIFt7XG4gICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgfV0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBpcyBtaXNzaW5nIGEgdHlwZSBuYW1lLiBBY2NvcmRpbmcgdG8gdGhlIHNjaGVtYSwgdGhlIGJsb2NrIHR5cGUgbmFtZSBpcyAnJHt0eXBlcy5ibG9jay5uYW1lfSdgLFxuICAgICAgICBhY3Rpb246IGBVc2UgdHlwZSAnJHt0eXBlcy5ibG9jay5uYW1lfSdgLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctYmxvY2stdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctYmxvY2stdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICBleHBlY3RlZFR5cGVOYW1lOiB0eXBlcy5ibG9jay5uYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAhMCkgOiBibGsuX3R5cGUgPyAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgcGF0Y2hlczogW3Vuc2V0KFt7XG4gICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgfV0pXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCbG9jayB3aXRoIF9rZXkgJyR7YmxrLl9rZXl9JyBoYXMgaW52YWxpZCBfdHlwZSAnJHtibGsuX3R5cGV9J2AsXG4gICAgICAgIGFjdGlvbjogXCJSZW1vdmUgdGhlIGJsb2NrXCIsXG4gICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC10eXBlLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC10eXBlLmFjdGlvblwiLFxuICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBibGsuX3R5cGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwKSA6IChyZXNvbHV0aW9uID0ge1xuICAgICAgICBwYXRjaGVzOiBbdW5zZXQoW3tcbiAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICB9XSldLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGlzIG1pc3NpbmcgYW4gX3R5cGUgcHJvcGVydHlgLFxuICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBibG9ja1wiLFxuICAgICAgICBpdGVtOiBibGssXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgIGtleTogYmxrLl9rZXlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICEwKTtcbiAgICB9XG4gICAgaWYgKGJsay5fdHlwZSA9PT0gdHlwZXMuYmxvY2submFtZSkge1xuICAgICAgY29uc3QgdGV4dEJsb2NrID0gYmxrO1xuICAgICAgaWYgKHRleHRCbG9jay5jaGlsZHJlbiAmJiAhQXJyYXkuaXNBcnJheSh0ZXh0QmxvY2suY2hpbGRyZW4pKVxuICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbc2V0KHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICAgIH0sIFt7XG4gICAgICAgICAgICBfa2V5OiB0ZXh0QmxvY2suX2tleVxuICAgICAgICAgIH1dKV0sXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBUZXh0IGJsb2NrIHdpdGggX2tleSAnJHt0ZXh0QmxvY2suX2tleX0nIGhhcyBhIGludmFsaWQgcmVxdWlyZWQgcHJvcGVydHkgJ2NoaWxkcmVuJy5gLFxuICAgICAgICAgIGFjdGlvbjogXCJSZXNldCB0aGUgY2hpbGRyZW4gcHJvcGVydHlcIixcbiAgICAgICAgICBpdGVtOiB0ZXh0QmxvY2ssXG4gICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLW9yLWludmFsaWQtY2hpbGRyZW4uZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3Npbmctb3ItaW52YWxpZC1jaGlsZHJlbi5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IHRleHRCbG9jay5fa2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMDtcbiAgICAgIGlmICh0ZXh0QmxvY2suY2hpbGRyZW4gPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KHRleHRCbG9jay5jaGlsZHJlbikgJiYgdGV4dEJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBuZXdTcGFuID0ge1xuICAgICAgICAgIF90eXBlOiB0eXBlcy5zcGFuLm5hbWUsXG4gICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gPSB7XG4gICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgIHBhdGNoZXM6IFtzZXRJZk1pc3NpbmcoW10sIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIl0pLCBpbnNlcnQoW25ld1NwYW5dLCBcImFmdGVyXCIsIFt7XG4gICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgMF0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkcmVuIGZvciB0ZXh0IGJsb2NrIHdpdGggX2tleSAnJHtibGsuX2tleX0nIGlzIGVtcHR5LmAsXG4gICAgICAgICAgYWN0aW9uOiBcIkluc2VydCBhbiBlbXB0eSB0ZXh0XCIsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZW1wdHktY2hpbGRyZW4uZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmVtcHR5LWNoaWxkcmVuLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sICEwO1xuICAgICAgfVxuICAgICAgY29uc3QgYWxsVXNlZE1hcmtzID0gdW5pcShmbGF0dGVuKHRleHRCbG9jay5jaGlsZHJlbi5maWx0ZXIoKGNsZCkgPT4gY2xkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUpLm1hcCgoY2xkKSA9PiBjbGQubWFya3MgfHwgW10pKSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShibGsubWFya0RlZnMpICYmIGJsay5tYXJrRGVmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHVudXNlZE1hcmtEZWZzID0gdW5pcShibGsubWFya0RlZnMubWFwKChkZWYpID0+IGRlZi5fa2V5KS5maWx0ZXIoKGtleSkgPT4gIWFsbFVzZWRNYXJrcy5pbmNsdWRlcyhrZXkpKSk7XG4gICAgICAgIGlmICh1bnVzZWRNYXJrRGVmcy5sZW5ndGggPiAwKVxuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgICAgcGF0Y2hlczogdW51c2VkTWFya0RlZnMubWFwKChtYXJrRGVmS2V5KSA9PiB1bnNldChbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJtYXJrRGVmc1wiLCB7XG4gICAgICAgICAgICAgIF9rZXk6IG1hcmtEZWZLZXlcbiAgICAgICAgICAgIH1dKSksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYEJsb2NrIGNvbnRhaW5zIG9ycGhhbmVkIGRhdGEgKHVudXNlZCBtYXJrIGRlZmluaXRpb25zKTogJHt1bnVzZWRNYXJrRGVmcy5qb2luKFwiLCBcIil9LmAsXG4gICAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHVudXNlZCBtYXJrIGRlZmluaXRpb24gaXRlbVwiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm9ycGhhbmVkLW1hcmstZGVmcy5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICBhY3Rpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5vcnBoYW5lZC1tYXJrLWRlZnMuYWN0aW9uXCIsXG4gICAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgICAgdW51c2VkTWFya0RlZnM6IHVudXNlZE1hcmtEZWZzLm1hcCgobSkgPT4gbS50b1N0cmluZygpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgITA7XG4gICAgICB9XG4gICAgICBjb25zdCBvcnBoYW5lZE1hcmtzID0gYWxsVXNlZE1hcmtzLmZpbHRlcigobWFyaykgPT4gIXR5cGVzLmRlY29yYXRvcnMubWFwKChkZWMpID0+IGRlYy52YWx1ZSkuaW5jbHVkZXMobWFyaykpLmZpbHRlcigobWFyaykgPT4gdGV4dEJsb2NrLm1hcmtEZWZzID09PSB2b2lkIDAgfHwgIXRleHRCbG9jay5tYXJrRGVmcy5maW5kKChkZWYpID0+IGRlZi5fa2V5ID09PSBtYXJrKSk7XG4gICAgICBpZiAob3JwaGFuZWRNYXJrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHNwYW5DaGlsZHJlbiA9IHRleHRCbG9jay5jaGlsZHJlbi5maWx0ZXIoKGNsZCkgPT4gY2xkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUgJiYgQXJyYXkuaXNBcnJheShjbGQubWFya3MpICYmIGNsZC5tYXJrcy5zb21lKChtYXJrKSA9PiBvcnBoYW5lZE1hcmtzLmluY2x1ZGVzKG1hcmspKSk7XG4gICAgICAgIGlmIChzcGFuQ2hpbGRyZW4pIHtcbiAgICAgICAgICBjb25zdCBvcnBoYW5lZCA9IG9ycGhhbmVkTWFya3Muam9pbihcIiwgXCIpO1xuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgICAgcGF0Y2hlczogc3BhbkNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IHNldCgoY2hpbGQubWFya3MgfHwgW10pLmZpbHRlcigoY01yaykgPT4gIW9ycGhhbmVkTWFya3MuaW5jbHVkZXMoY01yaykpLCBbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICAgIH0sIFwibWFya3NcIl0pKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQmxvY2sgd2l0aCBfa2V5ICcke2Jsay5fa2V5fScgY29udGFpbnMgbWFya3MgKCR7b3JwaGFuZWR9KSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGNvbnRlbnQgbW9kZWwuYCxcbiAgICAgICAgICAgIGFjdGlvbjogXCJSZW1vdmUgaW52YWxpZCBtYXJrc1wiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm9ycGhhbmVkLW1hcmtzLmRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm9ycGhhbmVkLW1hcmtzLmFjdGlvblwiLFxuICAgICAgICAgICAgICB2YWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICAgIG9ycGhhbmVkTWFya3M6IG9ycGhhbmVkTWFya3MubWFwKChtKSA9PiBtLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAhMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGV4dEJsb2NrLmNoaWxkcmVuLnNvbWUoKGNoaWxkLCBjSW5kZXgpID0+IHtcbiAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KGNoaWxkKSlcbiAgICAgICAgICByZXR1cm4gcmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICAgIHBhdGNoZXM6IFt1bnNldChbe1xuICAgICAgICAgICAgICBfa2V5OiBibGsuX2tleVxuICAgICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCBjSW5kZXhdKV0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIGF0IGluZGV4ICcke2NJbmRleH0nIGluIGJsb2NrIHdpdGgga2V5ICcke2Jsay5fa2V5fScgaXMgbm90IGFuIG9iamVjdC5gLFxuICAgICAgICAgICAgYWN0aW9uOiBcIlJlbW92ZSB0aGUgaXRlbVwiLFxuICAgICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm5vbi1vYmplY3QtY2hpbGQuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubm9uLW9iamVjdC1jaGlsZC5hY3Rpb25cIixcbiAgICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgICAga2V5OiBibGsuX2tleSxcbiAgICAgICAgICAgICAgICBpbmRleDogY0luZGV4XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAhMDtcbiAgICAgICAgaWYgKCFjaGlsZC5fa2V5IHx8IHR5cGVvZiBjaGlsZC5fa2V5ICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBjb25zdCBuZXdDaGlsZCA9IHtcbiAgICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKClcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgYXV0b1Jlc29sdmU6ICEwLFxuICAgICAgICAgICAgcGF0Y2hlczogW3NldChuZXdDaGlsZCwgW3tcbiAgICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgY0luZGV4XSldLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBDaGlsZCBhdCBpbmRleCAke2NJbmRleH0gaXMgbWlzc2luZyByZXF1aXJlZCBfa2V5IGluIGJsb2NrIHdpdGggX2tleSAke2Jsay5fa2V5fS5gLFxuICAgICAgICAgICAgYWN0aW9uOiBcIlNldCBhIG5ldyByYW5kb20gX2tleSBvbiB0aGUgb2JqZWN0XCIsXG4gICAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1jaGlsZC1rZXkuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUubWlzc2luZy1jaGlsZC1rZXkuYWN0aW9uXCIsXG4gICAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGNJbmRleFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgITA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkLl90eXBlID8gdmFsaWRDaGlsZFR5cGVzLmluY2x1ZGVzKGNoaWxkLl90eXBlKSA/IGNoaWxkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUgJiYgdHlwZW9mIGNoaWxkLnRleHQgIT0gXCJzdHJpbmdcIiA/IChyZXNvbHV0aW9uID0ge1xuICAgICAgICAgIHBhdGNoZXM6IFtzZXQoe1xuICAgICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICAgICAgfSwgW3tcbiAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgfV0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIHdpdGggX2tleSAnJHtjaGlsZC5fa2V5fScgaW4gYmxvY2sgd2l0aCBrZXkgJyR7YmxrLl9rZXl9JyBoYXMgbWlzc2luZyBvciBpbnZhbGlkIHRleHQgcHJvcGVydHkhYCxcbiAgICAgICAgICBhY3Rpb246IFwiV3JpdGUgYW4gZW1wdHkgdGV4dCBwcm9wZXJ0eSB0byB0aGUgb2JqZWN0XCIsXG4gICAgICAgICAgaXRlbTogYmxrLFxuICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuaW52YWxpZC1zcGFuLXRleHQuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmludmFsaWQtc3Bhbi10ZXh0LmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgIGNoaWxkS2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMCkgOiAhMSA6IChyZXNvbHV0aW9uID0ge1xuICAgICAgICAgIHBhdGNoZXM6IFt1bnNldChbe1xuICAgICAgICAgICAgX2tleTogYmxrLl9rZXlcbiAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgIF9rZXk6IGNoaWxkLl9rZXlcbiAgICAgICAgICB9XSldLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ2hpbGQgd2l0aCBfa2V5ICcke2NoaWxkLl9rZXl9JyBpbiBibG9jayB3aXRoIGtleSAnJHtibGsuX2tleX0nIGhhcyBpbnZhbGlkICdfdHlwZScgcHJvcGVydHkgKCR7Y2hpbGQuX3R5cGV9KS5gLFxuICAgICAgICAgIGFjdGlvbjogXCJSZW1vdmUgdGhlIG9iamVjdFwiLFxuICAgICAgICAgIGl0ZW06IGJsayxcbiAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLmRpc2FsbG93ZWQtY2hpbGQtdHlwZS5kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgYWN0aW9uOiBcImlucHV0cy5wb3J0YWJsZS10ZXh0LmludmFsaWQtdmFsdWUuZGlzYWxsb3dlZC1jaGlsZC10eXBlLmFjdGlvblwiLFxuICAgICAgICAgICAgdmFsdWVzOiB7XG4gICAgICAgICAgICAgIGtleTogYmxrLl9rZXksXG4gICAgICAgICAgICAgIGNoaWxkS2V5OiBjaGlsZC5fa2V5LFxuICAgICAgICAgICAgICBjaGlsZFR5cGU6IGNoaWxkLl90eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCAhMCkgOiAocmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICBwYXRjaGVzOiBbdW5zZXQoW3tcbiAgICAgICAgICAgIF9rZXk6IGJsay5fa2V5XG4gICAgICAgICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICAgICAgfV0pXSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENoaWxkIHdpdGggX2tleSAnJHtjaGlsZC5fa2V5fScgaW4gYmxvY2sgd2l0aCBrZXkgJyR7YmxrLl9rZXl9JyBpcyBtaXNzaW5nICdfdHlwZScgcHJvcGVydHkuYCxcbiAgICAgICAgICBhY3Rpb246IFwiUmVtb3ZlIHRoZSBvYmplY3RcIixcbiAgICAgICAgICBpdGVtOiBibGssXG4gICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiaW5wdXRzLnBvcnRhYmxlLXRleHQuaW52YWxpZC12YWx1ZS5taXNzaW5nLWNoaWxkLXR5cGUuZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgIGFjdGlvbjogXCJpbnB1dHMucG9ydGFibGUtdGV4dC5pbnZhbGlkLXZhbHVlLm1pc3NpbmctY2hpbGQtdHlwZS5hY3Rpb25cIixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICBrZXk6IGJsay5fa2V5LFxuICAgICAgICAgICAgICBjaGlsZEtleTogY2hpbGQuX2tleVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgITApO1xuICAgICAgfSkgJiYgKHZhbGlkID0gITEpO1xuICAgIH1cbiAgICByZXR1cm4gITE7XG4gIH0pICYmICh2YWxpZCA9ICExKSwge1xuICAgIHZhbGlkLFxuICAgIHJlc29sdXRpb24sXG4gICAgdmFsdWVcbiAgfSk7XG59XG5mdW5jdGlvbiB3aXRoUmVtb3RlQ2hhbmdlcyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSB8fCAhMTtcbiAgSVNfUFJPQ0VTU0lOR19SRU1PVEVfQ0hBTkdFUy5zZXQoZWRpdG9yLCAhMCksIGZuKCksIElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSB7XG4gIHJldHVybiBJU19QUk9DRVNTSU5HX1JFTU9URV9DSEFOR0VTLmdldChlZGl0b3IpO1xufVxuY29uc3QgUEFUQ0hJTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHdpdGhvdXRQYXRjaGluZyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc1BhdGNoaW5nKGVkaXRvcik7XG4gIFBBVENISU5HLnNldChlZGl0b3IsICExKSwgZm4oKSwgUEFUQ0hJTkcuc2V0KGVkaXRvciwgcHJldik7XG59XG5mdW5jdGlvbiBpc1BhdGNoaW5nKGVkaXRvcikge1xuICByZXR1cm4gUEFUQ0hJTkcuZ2V0KGVkaXRvcik7XG59XG5mdW5jdGlvbiBjbG9uZURpZmYoZGlmZjIpIHtcbiAgY29uc3QgW3R5cGUsIHBhdGNoXSA9IGRpZmYyO1xuICByZXR1cm4gW3R5cGUsIHBhdGNoXTtcbn1cbmZ1bmN0aW9uIGdldENvbW1vbk92ZXJsYXAodGV4dEEsIHRleHRCKSB7XG4gIGxldCB0ZXh0MSA9IHRleHRBLCB0ZXh0MiA9IHRleHRCO1xuICBjb25zdCB0ZXh0MUxlbmd0aCA9IHRleHQxLmxlbmd0aCwgdGV4dDJMZW5ndGggPSB0ZXh0Mi5sZW5ndGg7XG4gIGlmICh0ZXh0MUxlbmd0aCA9PT0gMCB8fCB0ZXh0Mkxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG4gIHRleHQxTGVuZ3RoID4gdGV4dDJMZW5ndGggPyB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZyh0ZXh0MUxlbmd0aCAtIHRleHQyTGVuZ3RoKSA6IHRleHQxTGVuZ3RoIDwgdGV4dDJMZW5ndGggJiYgKHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKDAsIHRleHQxTGVuZ3RoKSk7XG4gIGNvbnN0IHRleHRMZW5ndGggPSBNYXRoLm1pbih0ZXh0MUxlbmd0aCwgdGV4dDJMZW5ndGgpO1xuICBpZiAodGV4dDEgPT09IHRleHQyKSByZXR1cm4gdGV4dExlbmd0aDtcbiAgbGV0IGJlc3QgPSAwLCBsZW5ndGggPSAxO1xuICBmb3IgKGxldCBmb3VuZCA9IDA7IGZvdW5kICE9PSAtMTsgKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRleHQxLnN1YnN0cmluZyh0ZXh0TGVuZ3RoIC0gbGVuZ3RoKTtcbiAgICBpZiAoZm91bmQgPSB0ZXh0Mi5pbmRleE9mKHBhdHRlcm4pLCBmb3VuZCA9PT0gLTEpIHJldHVybiBiZXN0O1xuICAgIGxlbmd0aCArPSBmb3VuZCwgKGZvdW5kID09PSAwIHx8IHRleHQxLnN1YnN0cmluZyh0ZXh0TGVuZ3RoIC0gbGVuZ3RoKSA9PT0gdGV4dDIuc3Vic3RyaW5nKDAsIGxlbmd0aCkpICYmIChiZXN0ID0gbGVuZ3RoLCBsZW5ndGgrKyk7XG4gIH1cbiAgcmV0dXJuIGJlc3Q7XG59XG5mdW5jdGlvbiBnZXRDb21tb25QcmVmaXgodGV4dDEsIHRleHQyKSB7XG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8IHRleHQxWzBdICE9PSB0ZXh0MlswXSkgcmV0dXJuIDA7XG4gIGxldCBwb2ludGVyTWluID0gMCwgcG9pbnRlck1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKSwgcG9pbnRlck1pZCA9IHBvaW50ZXJNYXgsIHBvaW50ZXJTdGFydCA9IDA7XG4gIGZvciAoOyBwb2ludGVyTWluIDwgcG9pbnRlck1pZDsgKSB0ZXh0MS5zdWJzdHJpbmcocG9pbnRlclN0YXJ0LCBwb2ludGVyTWlkKSA9PT0gdGV4dDIuc3Vic3RyaW5nKHBvaW50ZXJTdGFydCwgcG9pbnRlck1pZCkgPyAocG9pbnRlck1pbiA9IHBvaW50ZXJNaWQsIHBvaW50ZXJTdGFydCA9IHBvaW50ZXJNaW4pIDogcG9pbnRlck1heCA9IHBvaW50ZXJNaWQsIHBvaW50ZXJNaWQgPSBNYXRoLmZsb29yKChwb2ludGVyTWF4IC0gcG9pbnRlck1pbikgLyAyICsgcG9pbnRlck1pbik7XG4gIHJldHVybiBwb2ludGVyTWlkO1xufVxuZnVuY3Rpb24gZ2V0Q29tbW9uU3VmZml4KHRleHQxLCB0ZXh0Mikge1xuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fCB0ZXh0MVt0ZXh0MS5sZW5ndGggLSAxXSAhPT0gdGV4dDJbdGV4dDIubGVuZ3RoIC0gMV0pIHJldHVybiAwO1xuICBsZXQgcG9pbnRlck1pbiA9IDAsIHBvaW50ZXJNYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCksIHBvaW50ZXJNaWQgPSBwb2ludGVyTWF4LCBwb2ludGVyRW5kID0gMDtcbiAgZm9yICg7IHBvaW50ZXJNaW4gPCBwb2ludGVyTWlkOyApIHRleHQxLnN1YnN0cmluZyh0ZXh0MS5sZW5ndGggLSBwb2ludGVyTWlkLCB0ZXh0MS5sZW5ndGggLSBwb2ludGVyRW5kKSA9PT0gdGV4dDIuc3Vic3RyaW5nKHRleHQyLmxlbmd0aCAtIHBvaW50ZXJNaWQsIHRleHQyLmxlbmd0aCAtIHBvaW50ZXJFbmQpID8gKHBvaW50ZXJNaW4gPSBwb2ludGVyTWlkLCBwb2ludGVyRW5kID0gcG9pbnRlck1pbikgOiBwb2ludGVyTWF4ID0gcG9pbnRlck1pZCwgcG9pbnRlck1pZCA9IE1hdGguZmxvb3IoKHBvaW50ZXJNYXggLSBwb2ludGVyTWluKSAvIDIgKyBwb2ludGVyTWluKTtcbiAgcmV0dXJuIHBvaW50ZXJNaWQ7XG59XG5mdW5jdGlvbiBpc0hpZ2hTdXJyb2dhdGUoY2hhcikge1xuICBjb25zdCBjaGFyQ29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGNoYXJDb2RlID49IDU1Mjk2ICYmIGNoYXJDb2RlIDw9IDU2MzE5O1xufVxuZnVuY3Rpb24gaXNMb3dTdXJyb2dhdGUoY2hhcikge1xuICBjb25zdCBjaGFyQ29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGNoYXJDb2RlID49IDU2MzIwICYmIGNoYXJDb2RlIDw9IDU3MzQzO1xufVxuZnVuY3Rpb24gYmlzZWN0KHRleHQxLCB0ZXh0MiwgZGVhZGxpbmUpIHtcbiAgY29uc3QgdGV4dDFMZW5ndGggPSB0ZXh0MS5sZW5ndGgsIHRleHQyTGVuZ3RoID0gdGV4dDIubGVuZ3RoLCBtYXhEID0gTWF0aC5jZWlsKCh0ZXh0MUxlbmd0aCArIHRleHQyTGVuZ3RoKSAvIDIpLCB2T2Zmc2V0ID0gbWF4RCwgdkxlbmd0aCA9IDIgKiBtYXhELCB2MSA9IG5ldyBBcnJheSh2TGVuZ3RoKSwgdjIgPSBuZXcgQXJyYXkodkxlbmd0aCk7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgdkxlbmd0aDsgeCsrKSB2MVt4XSA9IC0xLCB2Mlt4XSA9IC0xO1xuICB2MVt2T2Zmc2V0ICsgMV0gPSAwLCB2Mlt2T2Zmc2V0ICsgMV0gPSAwO1xuICBjb25zdCBkZWx0YSA9IHRleHQxTGVuZ3RoIC0gdGV4dDJMZW5ndGgsIGZyb250ID0gZGVsdGEgJSAyICE9PSAwO1xuICBsZXQgazFzdGFydCA9IDAsIGsxZW5kID0gMCwgazJzdGFydCA9IDAsIGsyZW5kID0gMDtcbiAgZm9yIChsZXQgZCA9IDA7IGQgPCBtYXhEICYmICEoRGF0ZS5ub3coKSA+IGRlYWRsaW5lKTsgZCsrKSB7XG4gICAgZm9yIChsZXQgazEgPSAtZCArIGsxc3RhcnQ7IGsxIDw9IGQgLSBrMWVuZDsgazEgKz0gMikge1xuICAgICAgY29uc3QgazFPZmZzZXQgPSB2T2Zmc2V0ICsgazE7XG4gICAgICBsZXQgeDE7XG4gICAgICBrMSA9PT0gLWQgfHwgazEgIT09IGQgJiYgdjFbazFPZmZzZXQgLSAxXSA8IHYxW2sxT2Zmc2V0ICsgMV0gPyB4MSA9IHYxW2sxT2Zmc2V0ICsgMV0gOiB4MSA9IHYxW2sxT2Zmc2V0IC0gMV0gKyAxO1xuICAgICAgbGV0IHkxID0geDEgLSBrMTtcbiAgICAgIGZvciAoOyB4MSA8IHRleHQxTGVuZ3RoICYmIHkxIDwgdGV4dDJMZW5ndGggJiYgdGV4dDEuY2hhckF0KHgxKSA9PT0gdGV4dDIuY2hhckF0KHkxKTsgKSB4MSsrLCB5MSsrO1xuICAgICAgaWYgKHYxW2sxT2Zmc2V0XSA9IHgxLCB4MSA+IHRleHQxTGVuZ3RoKSBrMWVuZCArPSAyO1xuICAgICAgZWxzZSBpZiAoeTEgPiB0ZXh0Mkxlbmd0aCkgazFzdGFydCArPSAyO1xuICAgICAgZWxzZSBpZiAoZnJvbnQpIHtcbiAgICAgICAgY29uc3QgazJPZmZzZXQgPSB2T2Zmc2V0ICsgZGVsdGEgLSBrMTtcbiAgICAgICAgaWYgKGsyT2Zmc2V0ID49IDAgJiYgazJPZmZzZXQgPCB2TGVuZ3RoICYmIHYyW2syT2Zmc2V0XSAhPT0gLTEpIHtcbiAgICAgICAgICBjb25zdCB4MiA9IHRleHQxTGVuZ3RoIC0gdjJbazJPZmZzZXRdO1xuICAgICAgICAgIGlmICh4MSA+PSB4MikgcmV0dXJuIGJpc2VjdFNwbGl0KHRleHQxLCB0ZXh0MiwgeDEsIHkxLCBkZWFkbGluZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgazIgPSAtZCArIGsyc3RhcnQ7IGsyIDw9IGQgLSBrMmVuZDsgazIgKz0gMikge1xuICAgICAgY29uc3QgazJPZmZzZXQgPSB2T2Zmc2V0ICsgazI7XG4gICAgICBsZXQgeDI7XG4gICAgICBrMiA9PT0gLWQgfHwgazIgIT09IGQgJiYgdjJbazJPZmZzZXQgLSAxXSA8IHYyW2syT2Zmc2V0ICsgMV0gPyB4MiA9IHYyW2syT2Zmc2V0ICsgMV0gOiB4MiA9IHYyW2syT2Zmc2V0IC0gMV0gKyAxO1xuICAgICAgbGV0IHkyID0geDIgLSBrMjtcbiAgICAgIGZvciAoOyB4MiA8IHRleHQxTGVuZ3RoICYmIHkyIDwgdGV4dDJMZW5ndGggJiYgdGV4dDEuY2hhckF0KHRleHQxTGVuZ3RoIC0geDIgLSAxKSA9PT0gdGV4dDIuY2hhckF0KHRleHQyTGVuZ3RoIC0geTIgLSAxKTsgKSB4MisrLCB5MisrO1xuICAgICAgaWYgKHYyW2syT2Zmc2V0XSA9IHgyLCB4MiA+IHRleHQxTGVuZ3RoKSBrMmVuZCArPSAyO1xuICAgICAgZWxzZSBpZiAoeTIgPiB0ZXh0Mkxlbmd0aCkgazJzdGFydCArPSAyO1xuICAgICAgZWxzZSBpZiAoIWZyb250KSB7XG4gICAgICAgIGNvbnN0IGsxT2Zmc2V0ID0gdk9mZnNldCArIGRlbHRhIC0gazI7XG4gICAgICAgIGlmIChrMU9mZnNldCA+PSAwICYmIGsxT2Zmc2V0IDwgdkxlbmd0aCAmJiB2MVtrMU9mZnNldF0gIT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgeDEgPSB2MVtrMU9mZnNldF0sIHkxID0gdk9mZnNldCArIHgxIC0gazFPZmZzZXQ7XG4gICAgICAgICAgaWYgKHgyID0gdGV4dDFMZW5ndGggLSB4MiwgeDEgPj0geDIpIHJldHVybiBiaXNlY3RTcGxpdCh0ZXh0MSwgdGV4dDIsIHgxLCB5MSwgZGVhZGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBbW0RJRkZfREVMRVRFLCB0ZXh0MV0sIFtESUZGX0lOU0VSVCwgdGV4dDJdXTtcbn1cbmZ1bmN0aW9uIGJpc2VjdFNwbGl0KHRleHQxLCB0ZXh0MiwgeCwgeSwgZGVhZGxpbmUpIHtcbiAgY29uc3QgdGV4dDFhID0gdGV4dDEuc3Vic3RyaW5nKDAsIHgpLCB0ZXh0MmEgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgeSksIHRleHQxYiA9IHRleHQxLnN1YnN0cmluZyh4KSwgdGV4dDJiID0gdGV4dDIuc3Vic3RyaW5nKHkpLCBkaWZmcyA9IGRvRGlmZih0ZXh0MWEsIHRleHQyYSwge1xuICAgIGNoZWNrTGluZXM6ICExLFxuICAgIGRlYWRsaW5lXG4gIH0pLCBkaWZmc2IgPSBkb0RpZmYodGV4dDFiLCB0ZXh0MmIsIHtcbiAgICBjaGVja0xpbmVzOiAhMSxcbiAgICBkZWFkbGluZVxuICB9KTtcbiAgcmV0dXJuIGRpZmZzLmNvbmNhdChkaWZmc2IpO1xufVxuZnVuY3Rpb24gZmluZEhhbGZNYXRjaCh0ZXh0MSwgdGV4dDIsIHRpbWVvdXQgPSAxKSB7XG4gIGlmICh0aW1lb3V0IDw9IDApIHJldHVybiBudWxsO1xuICBjb25zdCBsb25nVGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQxIDogdGV4dDIsIHNob3J0VGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDE7XG4gIGlmIChsb25nVGV4dC5sZW5ndGggPCA0IHx8IHNob3J0VGV4dC5sZW5ndGggKiAyIDwgbG9uZ1RleHQubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgaGFsZk1hdGNoMSA9IGhhbGZNYXRjaEkobG9uZ1RleHQsIHNob3J0VGV4dCwgTWF0aC5jZWlsKGxvbmdUZXh0Lmxlbmd0aCAvIDQpKSwgaGFsZk1hdGNoMiA9IGhhbGZNYXRjaEkobG9uZ1RleHQsIHNob3J0VGV4dCwgTWF0aC5jZWlsKGxvbmdUZXh0Lmxlbmd0aCAvIDIpKTtcbiAgbGV0IGhhbGZNYXRjaDtcbiAgaWYgKGhhbGZNYXRjaDEgJiYgaGFsZk1hdGNoMikgaGFsZk1hdGNoID0gaGFsZk1hdGNoMVs0XS5sZW5ndGggPiBoYWxmTWF0Y2gyWzRdLmxlbmd0aCA/IGhhbGZNYXRjaDEgOiBoYWxmTWF0Y2gyO1xuICBlbHNlIHtcbiAgICBpZiAoIWhhbGZNYXRjaDEgJiYgIWhhbGZNYXRjaDIpIHJldHVybiBudWxsO1xuICAgIGhhbGZNYXRjaDIgPyBoYWxmTWF0Y2gxIHx8IChoYWxmTWF0Y2ggPSBoYWxmTWF0Y2gyKSA6IGhhbGZNYXRjaCA9IGhhbGZNYXRjaDE7XG4gIH1cbiAgaWYgKCFoYWxmTWF0Y2gpIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGEgaGFsZiBtYXRjaC5cIik7XG4gIGxldCB0ZXh0MUEsIHRleHQxQiwgdGV4dDJBLCB0ZXh0MkI7XG4gIHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/ICh0ZXh0MUEgPSBoYWxmTWF0Y2hbMF0sIHRleHQxQiA9IGhhbGZNYXRjaFsxXSwgdGV4dDJBID0gaGFsZk1hdGNoWzJdLCB0ZXh0MkIgPSBoYWxmTWF0Y2hbM10pIDogKHRleHQyQSA9IGhhbGZNYXRjaFswXSwgdGV4dDJCID0gaGFsZk1hdGNoWzFdLCB0ZXh0MUEgPSBoYWxmTWF0Y2hbMl0sIHRleHQxQiA9IGhhbGZNYXRjaFszXSk7XG4gIGNvbnN0IG1pZENvbW1vbiA9IGhhbGZNYXRjaFs0XTtcbiAgcmV0dXJuIFt0ZXh0MUEsIHRleHQxQiwgdGV4dDJBLCB0ZXh0MkIsIG1pZENvbW1vbl07XG59XG5mdW5jdGlvbiBoYWxmTWF0Y2hJKGxvbmdUZXh0LCBzaG9ydFRleHQsIGkpIHtcbiAgY29uc3Qgc2VlZCA9IGxvbmdUZXh0LnNsaWNlKGksIGkgKyBNYXRoLmZsb29yKGxvbmdUZXh0Lmxlbmd0aCAvIDQpKTtcbiAgbGV0IGogPSAtMSwgYmVzdENvbW1vbiA9IFwiXCIsIGJlc3RMb25nVGV4dEEsIGJlc3RMb25nVGV4dEIsIGJlc3RTaG9ydFRleHRBLCBiZXN0U2hvcnRUZXh0QjtcbiAgZm9yICg7IChqID0gc2hvcnRUZXh0LmluZGV4T2Yoc2VlZCwgaiArIDEpKSAhPT0gLTE7ICkge1xuICAgIGNvbnN0IHByZWZpeExlbmd0aCA9IGdldENvbW1vblByZWZpeChsb25nVGV4dC5zbGljZShpKSwgc2hvcnRUZXh0LnNsaWNlKGopKSwgc3VmZml4TGVuZ3RoID0gZ2V0Q29tbW9uU3VmZml4KGxvbmdUZXh0LnNsaWNlKDAsIGkpLCBzaG9ydFRleHQuc2xpY2UoMCwgaikpO1xuICAgIGJlc3RDb21tb24ubGVuZ3RoIDwgc3VmZml4TGVuZ3RoICsgcHJlZml4TGVuZ3RoICYmIChiZXN0Q29tbW9uID0gc2hvcnRUZXh0LnNsaWNlKGogLSBzdWZmaXhMZW5ndGgsIGopICsgc2hvcnRUZXh0LnNsaWNlKGosIGogKyBwcmVmaXhMZW5ndGgpLCBiZXN0TG9uZ1RleHRBID0gbG9uZ1RleHQuc2xpY2UoMCwgaSAtIHN1ZmZpeExlbmd0aCksIGJlc3RMb25nVGV4dEIgPSBsb25nVGV4dC5zbGljZShpICsgcHJlZml4TGVuZ3RoKSwgYmVzdFNob3J0VGV4dEEgPSBzaG9ydFRleHQuc2xpY2UoMCwgaiAtIHN1ZmZpeExlbmd0aCksIGJlc3RTaG9ydFRleHRCID0gc2hvcnRUZXh0LnNsaWNlKGogKyBwcmVmaXhMZW5ndGgpKTtcbiAgfVxuICByZXR1cm4gYmVzdENvbW1vbi5sZW5ndGggKiAyID49IGxvbmdUZXh0Lmxlbmd0aCA/IFtiZXN0TG9uZ1RleHRBIHx8IFwiXCIsIGJlc3RMb25nVGV4dEIgfHwgXCJcIiwgYmVzdFNob3J0VGV4dEEgfHwgXCJcIiwgYmVzdFNob3J0VGV4dEIgfHwgXCJcIiwgYmVzdENvbW1vbiB8fCBcIlwiXSA6IG51bGw7XG59XG5mdW5jdGlvbiBjaGFyc1RvTGluZXMoZGlmZnMsIGxpbmVBcnJheSkge1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGRpZmZzLmxlbmd0aDsgeCsrKSB7XG4gICAgY29uc3QgY2hhcnMgPSBkaWZmc1t4XVsxXSwgdGV4dCA9IFtdO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgY2hhcnMubGVuZ3RoOyB5KyspIHRleHRbeV0gPSBsaW5lQXJyYXlbY2hhcnMuY2hhckNvZGVBdCh5KV07XG4gICAgZGlmZnNbeF1bMV0gPSB0ZXh0LmpvaW4oXCJcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIGxpbmVzVG9DaGFycyh0ZXh0QSwgdGV4dEIpIHtcbiAgY29uc3QgbGluZUFycmF5ID0gW10sIGxpbmVIYXNoID0ge307XG4gIGxpbmVBcnJheVswXSA9IFwiXCI7XG4gIGZ1bmN0aW9uIGRpZmZMaW5lc1RvTXVuZ2UodGV4dCkge1xuICAgIGxldCBjaGFycyA9IFwiXCIsIGxpbmVTdGFydCA9IDAsIGxpbmVFbmQgPSAtMSwgbGluZUFycmF5TGVuZ3RoID0gbGluZUFycmF5Lmxlbmd0aDtcbiAgICBmb3IgKDsgbGluZUVuZCA8IHRleHQubGVuZ3RoIC0gMTsgKSB7XG4gICAgICBsaW5lRW5kID0gdGV4dC5pbmRleE9mKGBcbmAsIGxpbmVTdGFydCksIGxpbmVFbmQgPT09IC0xICYmIChsaW5lRW5kID0gdGV4dC5sZW5ndGggLSAxKTtcbiAgICAgIGxldCBsaW5lID0gdGV4dC5zbGljZShsaW5lU3RhcnQsIGxpbmVFbmQgKyAxKTtcbiAgICAgIChsaW5lSGFzaC5oYXNPd25Qcm9wZXJ0eSA/IGxpbmVIYXNoLmhhc093blByb3BlcnR5KGxpbmUpIDogbGluZUhhc2hbbGluZV0gIT09IHZvaWQgMCkgPyBjaGFycyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxpbmVIYXNoW2xpbmVdKSA6IChsaW5lQXJyYXlMZW5ndGggPT09IG1heExpbmVzICYmIChsaW5lID0gdGV4dC5zbGljZShsaW5lU3RhcnQpLCBsaW5lRW5kID0gdGV4dC5sZW5ndGgpLCBjaGFycyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxpbmVBcnJheUxlbmd0aCksIGxpbmVIYXNoW2xpbmVdID0gbGluZUFycmF5TGVuZ3RoLCBsaW5lQXJyYXlbbGluZUFycmF5TGVuZ3RoKytdID0gbGluZSksIGxpbmVTdGFydCA9IGxpbmVFbmQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG4gIH1cbiAgbGV0IG1heExpbmVzID0gNGU0O1xuICBjb25zdCBjaGFyczEgPSBkaWZmTGluZXNUb011bmdlKHRleHRBKTtcbiAgbWF4TGluZXMgPSA2NTUzNTtcbiAgY29uc3QgY2hhcnMyID0gZGlmZkxpbmVzVG9NdW5nZSh0ZXh0Qik7XG4gIHJldHVybiB7XG4gICAgY2hhcnMxLFxuICAgIGNoYXJzMixcbiAgICBsaW5lQXJyYXlcbiAgfTtcbn1cbmZ1bmN0aW9uIGRvTGluZU1vZGVEaWZmKHRleHRBLCB0ZXh0Qiwgb3B0cykge1xuICBsZXQgdGV4dDEgPSB0ZXh0QSwgdGV4dDIgPSB0ZXh0QjtcbiAgY29uc3QgYSA9IGxpbmVzVG9DaGFycyh0ZXh0MSwgdGV4dDIpO1xuICB0ZXh0MSA9IGEuY2hhcnMxLCB0ZXh0MiA9IGEuY2hhcnMyO1xuICBjb25zdCBsaW5lYXJyYXkgPSBhLmxpbmVBcnJheTtcbiAgbGV0IGRpZmZzID0gZG9EaWZmKHRleHQxLCB0ZXh0Miwge1xuICAgIGNoZWNrTGluZXM6ICExLFxuICAgIGRlYWRsaW5lOiBvcHRzLmRlYWRsaW5lXG4gIH0pO1xuICBjaGFyc1RvTGluZXMoZGlmZnMsIGxpbmVhcnJheSksIGRpZmZzID0gY2xlYW51cFNlbWFudGljKGRpZmZzKSwgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgXCJcIl0pO1xuICBsZXQgcG9pbnRlciA9IDAsIGNvdW50RGVsZXRlID0gMCwgY291bnRJbnNlcnQgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCI7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIHtcbiAgICBzd2l0Y2ggKGRpZmZzW3BvaW50ZXJdWzBdKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuICAgICAgICBjb3VudEluc2VydCsrLCB0ZXh0SW5zZXJ0ICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9ERUxFVEU6XG4gICAgICAgIGNvdW50RGVsZXRlKyssIHRleHREZWxldGUgKz0gZGlmZnNbcG9pbnRlcl1bMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0VRVUFMOlxuICAgICAgICBpZiAoY291bnREZWxldGUgPj0gMSAmJiBjb3VudEluc2VydCA+PSAxKSB7XG4gICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0LCBjb3VudERlbGV0ZSArIGNvdW50SW5zZXJ0KSwgcG9pbnRlciA9IHBvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0O1xuICAgICAgICAgIGNvbnN0IGFhID0gZG9EaWZmKHRleHREZWxldGUsIHRleHRJbnNlcnQsIHtcbiAgICAgICAgICAgIGNoZWNrTGluZXM6ICExLFxuICAgICAgICAgICAgZGVhZGxpbmU6IG9wdHMuZGVhZGxpbmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gYWEubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIGRpZmZzLnNwbGljZShwb2ludGVyLCAwLCBhYVtqXSk7XG4gICAgICAgICAgcG9pbnRlciArPSBhYS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRJbnNlcnQgPSAwLCBjb3VudERlbGV0ZSA9IDAsIHRleHREZWxldGUgPSBcIlwiLCB0ZXh0SW5zZXJ0ID0gXCJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRpZmYgb3BlcmF0aW9uLlwiKTtcbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIHJldHVybiBkaWZmcy5wb3AoKSwgZGlmZnM7XG59XG5mdW5jdGlvbiBjb21wdXRlRGlmZih0ZXh0MSwgdGV4dDIsIG9wdHMpIHtcbiAgbGV0IGRpZmZzO1xuICBpZiAoIXRleHQxKSByZXR1cm4gW1tESUZGX0lOU0VSVCwgdGV4dDJdXTtcbiAgaWYgKCF0ZXh0MikgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXV07XG4gIGNvbnN0IGxvbmd0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDEgOiB0ZXh0Miwgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MSwgaSA9IGxvbmd0ZXh0LmluZGV4T2Yoc2hvcnR0ZXh0KTtcbiAgaWYgKGkgIT09IC0xKSByZXR1cm4gZGlmZnMgPSBbW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoMCwgaSldLCBbRElGRl9FUVVBTCwgc2hvcnR0ZXh0XSwgW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoaSArIHNob3J0dGV4dC5sZW5ndGgpXV0sIHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCAmJiAoZGlmZnNbMF1bMF0gPSBESUZGX0RFTEVURSwgZGlmZnNbMl1bMF0gPSBESUZGX0RFTEVURSksIGRpZmZzO1xuICBpZiAoc2hvcnR0ZXh0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICBjb25zdCBoYWxmTWF0Y2ggPSBmaW5kSGFsZk1hdGNoKHRleHQxLCB0ZXh0Mik7XG4gIGlmIChoYWxmTWF0Y2gpIHtcbiAgICBjb25zdCB0ZXh0MUEgPSBoYWxmTWF0Y2hbMF0sIHRleHQxQiA9IGhhbGZNYXRjaFsxXSwgdGV4dDJBID0gaGFsZk1hdGNoWzJdLCB0ZXh0MkIgPSBoYWxmTWF0Y2hbM10sIG1pZENvbW1vbiA9IGhhbGZNYXRjaFs0XSwgZGlmZnNBID0gZG9EaWZmKHRleHQxQSwgdGV4dDJBLCBvcHRzKSwgZGlmZnNCID0gZG9EaWZmKHRleHQxQiwgdGV4dDJCLCBvcHRzKTtcbiAgICByZXR1cm4gZGlmZnNBLmNvbmNhdChbW0RJRkZfRVFVQUwsIG1pZENvbW1vbl1dLCBkaWZmc0IpO1xuICB9XG4gIHJldHVybiBvcHRzLmNoZWNrTGluZXMgJiYgdGV4dDEubGVuZ3RoID4gMTAwICYmIHRleHQyLmxlbmd0aCA+IDEwMCA/IGRvTGluZU1vZGVEaWZmKHRleHQxLCB0ZXh0Miwgb3B0cykgOiBiaXNlY3QodGV4dDEsIHRleHQyLCBvcHRzLmRlYWRsaW5lKTtcbn1cbnZhciBfX2RlZlByb3AkMiA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgX19nZXRPd25Qcm9wU3ltYm9scyQyID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scywgX19oYXNPd25Qcm9wJDIgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LCBfX3Byb3BJc0VudW0kMiA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUsIF9fZGVmTm9ybWFsUHJvcCQyID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcCQyKG9iaiwga2V5LCB7XG4gIGVudW1lcmFibGU6ICEwLFxuICBjb25maWd1cmFibGU6ICEwLFxuICB3cml0YWJsZTogITAsXG4gIHZhbHVlXG59KSA6IG9ialtrZXldID0gdmFsdWUsIF9fc3ByZWFkVmFsdWVzJDIgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpIF9faGFzT3duUHJvcCQyLmNhbGwoYiwgcHJvcCkgJiYgX19kZWZOb3JtYWxQcm9wJDIoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzJDIpIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyQyKGIpKSBfX3Byb3BJc0VudW0kMi5jYWxsKGIsIHByb3ApICYmIF9fZGVmTm9ybWFsUHJvcCQyKGEsIHByb3AsIGJbcHJvcF0pO1xuICByZXR1cm4gYTtcbn07XG5jb25zdCBESUZGX0RFTEVURSA9IC0xLCBESUZGX0lOU0VSVCA9IDEsIERJRkZfRVFVQUwgPSAwO1xuZnVuY3Rpb24gZGlmZih0ZXh0QSwgdGV4dEIsIG9wdHMpIHtcbiAgaWYgKHRleHRBID09PSBudWxsIHx8IHRleHRCID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJOdWxsIGlucHV0LiAoZGlmZilcIik7XG4gIGNvbnN0IGRpZmZzID0gZG9EaWZmKHRleHRBLCB0ZXh0QiwgY3JlYXRlSW50ZXJuYWxPcHRzKG9wdHMgfHwge30pKTtcbiAgcmV0dXJuIGFkanVzdERpZmZGb3JTdXJyb2dhdGVQYWlycyhkaWZmcyksIGRpZmZzO1xufVxuZnVuY3Rpb24gZG9EaWZmKHRleHRBLCB0ZXh0Qiwgb3B0aW9ucykge1xuICBsZXQgdGV4dDEgPSB0ZXh0QSwgdGV4dDIgPSB0ZXh0QjtcbiAgaWYgKHRleHQxID09PSB0ZXh0MikgcmV0dXJuIHRleHQxID8gW1tESUZGX0VRVUFMLCB0ZXh0MV1dIDogW107XG4gIGxldCBjb21tb25sZW5ndGggPSBnZXRDb21tb25QcmVmaXgodGV4dDEsIHRleHQyKTtcbiAgY29uc3QgY29tbW9ucHJlZml4ID0gdGV4dDEuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCksIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCksIGNvbW1vbmxlbmd0aCA9IGdldENvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpO1xuICBjb25zdCBjb21tb25zdWZmaXggPSB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgdGV4dDEgPSB0ZXh0MS5zdWJzdHJpbmcoMCwgdGV4dDEubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKSwgdGV4dDIgPSB0ZXh0Mi5zdWJzdHJpbmcoMCwgdGV4dDIubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKTtcbiAgbGV0IGRpZmZzID0gY29tcHV0ZURpZmYodGV4dDEsIHRleHQyLCBvcHRpb25zKTtcbiAgcmV0dXJuIGNvbW1vbnByZWZpeCAmJiBkaWZmcy51bnNoaWZ0KFtESUZGX0VRVUFMLCBjb21tb25wcmVmaXhdKSwgY29tbW9uc3VmZml4ICYmIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsIGNvbW1vbnN1ZmZpeF0pLCBkaWZmcyA9IGNsZWFudXBNZXJnZShkaWZmcyksIGRpZmZzO1xufVxuZnVuY3Rpb24gY3JlYXRlRGVhZExpbmUodGltZW91dCkge1xuICBsZXQgdCA9IDE7XG4gIHJldHVybiB0eXBlb2YgdGltZW91dCA8IFwidVwiICYmICh0ID0gdGltZW91dCA8PSAwID8gTnVtYmVyLk1BWF9WQUxVRSA6IHRpbWVvdXQpLCBEYXRlLm5vdygpICsgdCAqIDFlMztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUludGVybmFsT3B0cyhvcHRzKSB7XG4gIHJldHVybiBfX3NwcmVhZFZhbHVlcyQyKHtcbiAgICBjaGVja0xpbmVzOiAhMCxcbiAgICBkZWFkbGluZTogY3JlYXRlRGVhZExpbmUob3B0cy50aW1lb3V0IHx8IDEpXG4gIH0sIG9wdHMpO1xufVxuZnVuY3Rpb24gY29tYmluZUNoYXIoZGF0YSwgY2hhciwgZGlyKSB7XG4gIHJldHVybiBkaXIgPT09IDEgPyBkYXRhICsgY2hhciA6IGNoYXIgKyBkYXRhO1xufVxuZnVuY3Rpb24gc3BsaXRDaGFyKGRhdGEsIGRpcikge1xuICByZXR1cm4gZGlyID09PSAxID8gW2RhdGEuc3Vic3RyaW5nKDAsIGRhdGEubGVuZ3RoIC0gMSksIGRhdGFbZGF0YS5sZW5ndGggLSAxXV0gOiBbZGF0YS5zdWJzdHJpbmcoMSksIGRhdGFbMF1dO1xufVxuZnVuY3Rpb24gaGFzU2hhcmVkQ2hhcihkaWZmcywgaSwgaiwgZGlyKSB7XG4gIHJldHVybiBkaXIgPT09IDEgPyBkaWZmc1tpXVsxXVtkaWZmc1tpXVsxXS5sZW5ndGggLSAxXSA9PT0gZGlmZnNbal1bMV1bZGlmZnNbal1bMV0ubGVuZ3RoIC0gMV0gOiBkaWZmc1tpXVsxXVswXSA9PT0gZGlmZnNbal1bMV1bMF07XG59XG5mdW5jdGlvbiBkZWlzb2xhdGVDaGFyKGRpZmZzLCBpLCBkaXIpIHtcbiAgY29uc3QgaW52ID0gZGlyID09PSAxID8gLTEgOiAxO1xuICBsZXQgaW5zZXJ0SWR4ID0gbnVsbCwgZGVsZXRlSWR4ID0gbnVsbCwgaiA9IGkgKyBkaXI7XG4gIGZvciAoOyBqID49IDAgJiYgaiA8IGRpZmZzLmxlbmd0aCAmJiAoaW5zZXJ0SWR4ID09PSBudWxsIHx8IGRlbGV0ZUlkeCA9PT0gbnVsbCk7IGogKz0gZGlyKSB7XG4gICAgY29uc3QgW29wLCB0ZXh0Ml0gPSBkaWZmc1tqXTtcbiAgICBpZiAodGV4dDIubGVuZ3RoICE9PSAwKSB7XG4gICAgICBpZiAob3AgPT09IERJRkZfSU5TRVJUKSB7XG4gICAgICAgIGluc2VydElkeCA9PT0gbnVsbCAmJiAoaW5zZXJ0SWR4ID0gaik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChvcCA9PT0gRElGRl9ERUxFVEUpIHtcbiAgICAgICAgZGVsZXRlSWR4ID09PSBudWxsICYmIChkZWxldGVJZHggPSBqKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKG9wID09PSBESUZGX0VRVUFMKSB7XG4gICAgICAgIGlmIChpbnNlcnRJZHggPT09IG51bGwgJiYgZGVsZXRlSWR4ID09PSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgW3Jlc3QsIGNoYXIyXSA9IHNwbGl0Q2hhcihkaWZmc1tpXVsxXSwgZGlyKTtcbiAgICAgICAgICBkaWZmc1tpXVsxXSA9IHJlc3QsIGRpZmZzW2pdWzFdID0gY29tYmluZUNoYXIoZGlmZnNbal1bMV0sIGNoYXIyLCBpbnYpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGluc2VydElkeCAhPT0gbnVsbCAmJiBkZWxldGVJZHggIT09IG51bGwgJiYgaGFzU2hhcmVkQ2hhcihkaWZmcywgaW5zZXJ0SWR4LCBkZWxldGVJZHgsIGRpcikpIHtcbiAgICBjb25zdCBbaW5zZXJ0VGV4dDIsIGluc2VydENoYXJdID0gc3BsaXRDaGFyKGRpZmZzW2luc2VydElkeF1bMV0sIGludiksIFtkZWxldGVUZXh0XSA9IHNwbGl0Q2hhcihkaWZmc1tkZWxldGVJZHhdWzFdLCBpbnYpO1xuICAgIGRpZmZzW2luc2VydElkeF1bMV0gPSBpbnNlcnRUZXh0MiwgZGlmZnNbZGVsZXRlSWR4XVsxXSA9IGRlbGV0ZVRleHQsIGRpZmZzW2ldWzFdID0gY29tYmluZUNoYXIoZGlmZnNbaV1bMV0sIGluc2VydENoYXIsIGRpcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IFt0ZXh0LCBjaGFyXSA9IHNwbGl0Q2hhcihkaWZmc1tpXVsxXSwgZGlyKTtcbiAgZGlmZnNbaV1bMV0gPSB0ZXh0LCBpbnNlcnRJZHggPT09IG51bGwgPyAoZGlmZnMuc3BsaWNlKGosIDAsIFtESUZGX0lOU0VSVCwgY2hhcl0pLCBkZWxldGVJZHggIT09IG51bGwgJiYgZGVsZXRlSWR4ID49IGogJiYgZGVsZXRlSWR4KyspIDogZGlmZnNbaW5zZXJ0SWR4XVsxXSA9IGNvbWJpbmVDaGFyKGRpZmZzW2luc2VydElkeF1bMV0sIGNoYXIsIGludiksIGRlbGV0ZUlkeCA9PT0gbnVsbCA/IGRpZmZzLnNwbGljZShqLCAwLCBbRElGRl9ERUxFVEUsIGNoYXJdKSA6IGRpZmZzW2RlbGV0ZUlkeF1bMV0gPSBjb21iaW5lQ2hhcihkaWZmc1tkZWxldGVJZHhdWzFdLCBjaGFyLCBpbnYpO1xufVxuZnVuY3Rpb24gYWRqdXN0RGlmZkZvclN1cnJvZ2F0ZVBhaXJzKGRpZmZzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBbZGlmZlR5cGUsIGRpZmZUZXh0XSA9IGRpZmZzW2ldO1xuICAgIGlmIChkaWZmVGV4dC5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xuICAgIGNvbnN0IGZpcnN0Q2hhciA9IGRpZmZUZXh0WzBdLCBsYXN0Q2hhciA9IGRpZmZUZXh0W2RpZmZUZXh0Lmxlbmd0aCAtIDFdO1xuICAgIGlzSGlnaFN1cnJvZ2F0ZShsYXN0Q2hhcikgJiYgZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgJiYgZGVpc29sYXRlQ2hhcihkaWZmcywgaSwgMSksIGlzTG93U3Vycm9nYXRlKGZpcnN0Q2hhcikgJiYgZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgJiYgZGVpc29sYXRlQ2hhcihkaWZmcywgaSwgLTEpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZnMubGVuZ3RoOyBpKyspIGRpZmZzW2ldWzFdLmxlbmd0aCA9PT0gMCAmJiBkaWZmcy5zcGxpY2UoaSwgMSk7XG59XG5mdW5jdGlvbiBjbGVhbnVwU2VtYW50aWMocmF3RGlmZnMpIHtcbiAgbGV0IGRpZmZzID0gcmF3RGlmZnMubWFwKChkaWZmMikgPT4gY2xvbmVEaWZmKGRpZmYyKSksIGhhc0NoYW5nZXMgPSAhMTtcbiAgY29uc3QgZXF1YWxpdGllcyA9IFtdO1xuICBsZXQgZXF1YWxpdGllc0xlbmd0aCA9IDAsIGxhc3RFcXVhbGl0eSA9IG51bGwsIHBvaW50ZXIgPSAwLCBsZW5ndGhJbnNlcnRpb25zMSA9IDAsIGxlbmd0aERlbGV0aW9uczEgPSAwLCBsZW5ndGhJbnNlcnRpb25zMiA9IDAsIGxlbmd0aERlbGV0aW9uczIgPSAwO1xuICBmb3IgKDsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aDsgKSBkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9FUVVBTCA/IChlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGgrK10gPSBwb2ludGVyLCBsZW5ndGhJbnNlcnRpb25zMSA9IGxlbmd0aEluc2VydGlvbnMyLCBsZW5ndGhEZWxldGlvbnMxID0gbGVuZ3RoRGVsZXRpb25zMiwgbGVuZ3RoSW5zZXJ0aW9uczIgPSAwLCBsZW5ndGhEZWxldGlvbnMyID0gMCwgbGFzdEVxdWFsaXR5ID0gZGlmZnNbcG9pbnRlcl1bMV0pIDogKGRpZmZzW3BvaW50ZXJdWzBdID09PSBESUZGX0lOU0VSVCA/IGxlbmd0aEluc2VydGlvbnMyICs9IGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCA6IGxlbmd0aERlbGV0aW9uczIgKz0gZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoLCBsYXN0RXF1YWxpdHkgJiYgbGFzdEVxdWFsaXR5Lmxlbmd0aCA8PSBNYXRoLm1heChsZW5ndGhJbnNlcnRpb25zMSwgbGVuZ3RoRGVsZXRpb25zMSkgJiYgbGFzdEVxdWFsaXR5Lmxlbmd0aCA8PSBNYXRoLm1heChsZW5ndGhJbnNlcnRpb25zMiwgbGVuZ3RoRGVsZXRpb25zMikgJiYgKGRpZmZzLnNwbGljZShlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGggLSAxXSwgMCwgW0RJRkZfREVMRVRFLCBsYXN0RXF1YWxpdHldKSwgZGlmZnNbZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gKyAxXVswXSA9IERJRkZfSU5TRVJULCBlcXVhbGl0aWVzTGVuZ3RoLS0sIGVxdWFsaXRpZXNMZW5ndGgtLSwgcG9pbnRlciA9IGVxdWFsaXRpZXNMZW5ndGggPiAwID8gZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gOiAtMSwgbGVuZ3RoSW5zZXJ0aW9uczEgPSAwLCBsZW5ndGhEZWxldGlvbnMxID0gMCwgbGVuZ3RoSW5zZXJ0aW9uczIgPSAwLCBsZW5ndGhEZWxldGlvbnMyID0gMCwgbGFzdEVxdWFsaXR5ID0gbnVsbCwgaGFzQ2hhbmdlcyA9ICEwKSksIHBvaW50ZXIrKztcbiAgZm9yIChoYXNDaGFuZ2VzICYmIChkaWZmcyA9IGNsZWFudXBNZXJnZShkaWZmcykpLCBkaWZmcyA9IGNsZWFudXBTZW1hbnRpY0xvc3NsZXNzKGRpZmZzKSwgcG9pbnRlciA9IDE7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGg7ICkge1xuICAgIGlmIChkaWZmc1twb2ludGVyIC0gMV1bMF0gPT09IERJRkZfREVMRVRFICYmIGRpZmZzW3BvaW50ZXJdWzBdID09PSBESUZGX0lOU0VSVCkge1xuICAgICAgY29uc3QgZGVsZXRpb24gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0sIGluc2VydGlvbiA9IGRpZmZzW3BvaW50ZXJdWzFdLCBvdmVybGFwTGVuZ3RoMSA9IGdldENvbW1vbk92ZXJsYXAoZGVsZXRpb24sIGluc2VydGlvbiksIG92ZXJsYXBMZW5ndGgyID0gZ2V0Q29tbW9uT3ZlcmxhcChpbnNlcnRpb24sIGRlbGV0aW9uKTtcbiAgICAgIG92ZXJsYXBMZW5ndGgxID49IG92ZXJsYXBMZW5ndGgyID8gKG92ZXJsYXBMZW5ndGgxID49IGRlbGV0aW9uLmxlbmd0aCAvIDIgfHwgb3ZlcmxhcExlbmd0aDEgPj0gaW5zZXJ0aW9uLmxlbmd0aCAvIDIpICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfRVFVQUwsIGluc2VydGlvbi5zdWJzdHJpbmcoMCwgb3ZlcmxhcExlbmd0aDEpXSksIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSA9IGRlbGV0aW9uLnN1YnN0cmluZygwLCBkZWxldGlvbi5sZW5ndGggLSBvdmVybGFwTGVuZ3RoMSksIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGluc2VydGlvbi5zdWJzdHJpbmcob3ZlcmxhcExlbmd0aDEpLCBwb2ludGVyKyspIDogKG92ZXJsYXBMZW5ndGgyID49IGRlbGV0aW9uLmxlbmd0aCAvIDIgfHwgb3ZlcmxhcExlbmd0aDIgPj0gaW5zZXJ0aW9uLmxlbmd0aCAvIDIpICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfRVFVQUwsIGRlbGV0aW9uLnN1YnN0cmluZygwLCBvdmVybGFwTGVuZ3RoMildKSwgZGlmZnNbcG9pbnRlciAtIDFdWzBdID0gRElGRl9JTlNFUlQsIGRpZmZzW3BvaW50ZXIgLSAxXVsxXSA9IGluc2VydGlvbi5zdWJzdHJpbmcoMCwgaW5zZXJ0aW9uLmxlbmd0aCAtIG92ZXJsYXBMZW5ndGgyKSwgZGlmZnNbcG9pbnRlciArIDFdWzBdID0gRElGRl9ERUxFVEUsIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGRlbGV0aW9uLnN1YnN0cmluZyhvdmVybGFwTGVuZ3RoMiksIHBvaW50ZXIrKyksIHBvaW50ZXIrKztcbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIHJldHVybiBkaWZmcztcbn1cbmNvbnN0IG5vbkFscGhhTnVtZXJpY1JlZ2V4ID0gL1teYS16QS1aMC05XS8sIHdoaXRlc3BhY2VSZWdleCA9IC9cXHMvLCBsaW5lYnJlYWtSZWdleCA9IC9bXFxyXFxuXS8sIGJsYW5rbGluZUVuZFJlZ2V4ID0gL1xcblxccj9cXG4kLywgYmxhbmtsaW5lU3RhcnRSZWdleCA9IC9eXFxyP1xcblxccj9cXG4vO1xuZnVuY3Rpb24gY2xlYW51cFNlbWFudGljTG9zc2xlc3MocmF3RGlmZnMpIHtcbiAgY29uc3QgZGlmZnMgPSByYXdEaWZmcy5tYXAoKGRpZmYyKSA9PiBjbG9uZURpZmYoZGlmZjIpKTtcbiAgZnVuY3Rpb24gZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKG9uZSwgdHdvKSB7XG4gICAgaWYgKCFvbmUgfHwgIXR3bykgcmV0dXJuIDY7XG4gICAgY29uc3QgY2hhcjEgPSBvbmUuY2hhckF0KG9uZS5sZW5ndGggLSAxKSwgY2hhcjIgPSB0d28uY2hhckF0KDApLCBub25BbHBoYU51bWVyaWMxID0gY2hhcjEubWF0Y2gobm9uQWxwaGFOdW1lcmljUmVnZXgpLCBub25BbHBoYU51bWVyaWMyID0gY2hhcjIubWF0Y2gobm9uQWxwaGFOdW1lcmljUmVnZXgpLCB3aGl0ZXNwYWNlMSA9IG5vbkFscGhhTnVtZXJpYzEgJiYgY2hhcjEubWF0Y2god2hpdGVzcGFjZVJlZ2V4KSwgd2hpdGVzcGFjZTIgPSBub25BbHBoYU51bWVyaWMyICYmIGNoYXIyLm1hdGNoKHdoaXRlc3BhY2VSZWdleCksIGxpbmVCcmVhazEgPSB3aGl0ZXNwYWNlMSAmJiBjaGFyMS5tYXRjaChsaW5lYnJlYWtSZWdleCksIGxpbmVCcmVhazIgPSB3aGl0ZXNwYWNlMiAmJiBjaGFyMi5tYXRjaChsaW5lYnJlYWtSZWdleCksIGJsYW5rTGluZTEgPSBsaW5lQnJlYWsxICYmIG9uZS5tYXRjaChibGFua2xpbmVFbmRSZWdleCksIGJsYW5rTGluZTIgPSBsaW5lQnJlYWsyICYmIHR3by5tYXRjaChibGFua2xpbmVTdGFydFJlZ2V4KTtcbiAgICByZXR1cm4gYmxhbmtMaW5lMSB8fCBibGFua0xpbmUyID8gNSA6IGxpbmVCcmVhazEgfHwgbGluZUJyZWFrMiA/IDQgOiBub25BbHBoYU51bWVyaWMxICYmICF3aGl0ZXNwYWNlMSAmJiB3aGl0ZXNwYWNlMiA/IDMgOiB3aGl0ZXNwYWNlMSB8fCB3aGl0ZXNwYWNlMiA/IDIgOiBub25BbHBoYU51bWVyaWMxIHx8IG5vbkFscGhhTnVtZXJpYzIgPyAxIDogMDtcbiAgfVxuICBsZXQgcG9pbnRlciA9IDE7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoIC0gMTsgKSB7XG4gICAgaWYgKGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PT0gRElGRl9FUVVBTCAmJiBkaWZmc1twb2ludGVyICsgMV1bMF0gPT09IERJRkZfRVFVQUwpIHtcbiAgICAgIGxldCBlcXVhbGl0eTEgPSBkaWZmc1twb2ludGVyIC0gMV1bMV0sIGVkaXQgPSBkaWZmc1twb2ludGVyXVsxXSwgZXF1YWxpdHkyID0gZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgY29uc3QgY29tbW9uT2Zmc2V0ID0gZ2V0Q29tbW9uU3VmZml4KGVxdWFsaXR5MSwgZWRpdCk7XG4gICAgICBpZiAoY29tbW9uT2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IGNvbW1vblN0cmluZyA9IGVkaXQuc3Vic3RyaW5nKGVkaXQubGVuZ3RoIC0gY29tbW9uT2Zmc2V0KTtcbiAgICAgICAgZXF1YWxpdHkxID0gZXF1YWxpdHkxLnN1YnN0cmluZygwLCBlcXVhbGl0eTEubGVuZ3RoIC0gY29tbW9uT2Zmc2V0KSwgZWRpdCA9IGNvbW1vblN0cmluZyArIGVkaXQuc3Vic3RyaW5nKDAsIGVkaXQubGVuZ3RoIC0gY29tbW9uT2Zmc2V0KSwgZXF1YWxpdHkyID0gY29tbW9uU3RyaW5nICsgZXF1YWxpdHkyO1xuICAgICAgfVxuICAgICAgbGV0IGJlc3RFcXVhbGl0eTEgPSBlcXVhbGl0eTEsIGJlc3RFZGl0ID0gZWRpdCwgYmVzdEVxdWFsaXR5MiA9IGVxdWFsaXR5MiwgYmVzdFNjb3JlID0gZGlmZkNsZWFudXBTZW1hbnRpY1Njb3JlKGVxdWFsaXR5MSwgZWRpdCkgKyBkaWZmQ2xlYW51cFNlbWFudGljU2NvcmUoZWRpdCwgZXF1YWxpdHkyKTtcbiAgICAgIGZvciAoOyBlZGl0LmNoYXJBdCgwKSA9PT0gZXF1YWxpdHkyLmNoYXJBdCgwKTsgKSB7XG4gICAgICAgIGVxdWFsaXR5MSArPSBlZGl0LmNoYXJBdCgwKSwgZWRpdCA9IGVkaXQuc3Vic3RyaW5nKDEpICsgZXF1YWxpdHkyLmNoYXJBdCgwKSwgZXF1YWxpdHkyID0gZXF1YWxpdHkyLnN1YnN0cmluZygxKTtcbiAgICAgICAgY29uc3Qgc2NvcmUgPSBkaWZmQ2xlYW51cFNlbWFudGljU2NvcmUoZXF1YWxpdHkxLCBlZGl0KSArIGRpZmZDbGVhbnVwU2VtYW50aWNTY29yZShlZGl0LCBlcXVhbGl0eTIpO1xuICAgICAgICBzY29yZSA+PSBiZXN0U2NvcmUgJiYgKGJlc3RTY29yZSA9IHNjb3JlLCBiZXN0RXF1YWxpdHkxID0gZXF1YWxpdHkxLCBiZXN0RWRpdCA9IGVkaXQsIGJlc3RFcXVhbGl0eTIgPSBlcXVhbGl0eTIpO1xuICAgICAgfVxuICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdICE9PSBiZXN0RXF1YWxpdHkxICYmIChiZXN0RXF1YWxpdHkxID8gZGlmZnNbcG9pbnRlciAtIDFdWzFdID0gYmVzdEVxdWFsaXR5MSA6IChkaWZmcy5zcGxpY2UocG9pbnRlciAtIDEsIDEpLCBwb2ludGVyLS0pLCBkaWZmc1twb2ludGVyXVsxXSA9IGJlc3RFZGl0LCBiZXN0RXF1YWxpdHkyID8gZGlmZnNbcG9pbnRlciArIDFdWzFdID0gYmVzdEVxdWFsaXR5MiA6IChkaWZmcy5zcGxpY2UocG9pbnRlciArIDEsIDEpLCBwb2ludGVyLS0pKTtcbiAgICB9XG4gICAgcG9pbnRlcisrO1xuICB9XG4gIHJldHVybiBkaWZmcztcbn1cbmZ1bmN0aW9uIGNsZWFudXBNZXJnZShyYXdEaWZmcykge1xuICBsZXQgZGlmZnMgPSByYXdEaWZmcy5tYXAoKGRpZmYyKSA9PiBjbG9uZURpZmYoZGlmZjIpKTtcbiAgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgXCJcIl0pO1xuICBsZXQgcG9pbnRlciA9IDAsIGNvdW50RGVsZXRlID0gMCwgY291bnRJbnNlcnQgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCIsIGNvbW1vbmxlbmd0aDtcbiAgZm9yICg7IHBvaW50ZXIgPCBkaWZmcy5sZW5ndGg7ICkgc3dpdGNoIChkaWZmc1twb2ludGVyXVswXSkge1xuICAgIGNhc2UgRElGRl9JTlNFUlQ6XG4gICAgICBjb3VudEluc2VydCsrLCB0ZXh0SW5zZXJ0ICs9IGRpZmZzW3BvaW50ZXJdWzFdLCBwb2ludGVyKys7XG4gICAgICBicmVhaztcbiAgICBjYXNlIERJRkZfREVMRVRFOlxuICAgICAgY291bnREZWxldGUrKywgdGV4dERlbGV0ZSArPSBkaWZmc1twb2ludGVyXVsxXSwgcG9pbnRlcisrO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBESUZGX0VRVUFMOlxuICAgICAgY291bnREZWxldGUgKyBjb3VudEluc2VydCA+IDEgPyAoY291bnREZWxldGUgIT09IDAgJiYgY291bnRJbnNlcnQgIT09IDAgJiYgKGNvbW1vbmxlbmd0aCA9IGdldENvbW1vblByZWZpeCh0ZXh0SW5zZXJ0LCB0ZXh0RGVsZXRlKSwgY29tbW9ubGVuZ3RoICE9PSAwICYmIChwb2ludGVyIC0gY291bnREZWxldGUgLSBjb3VudEluc2VydCA+IDAgJiYgZGlmZnNbcG9pbnRlciAtIGNvdW50RGVsZXRlIC0gY291bnRJbnNlcnQgLSAxXVswXSA9PT0gRElGRl9FUVVBTCA/IGRpZmZzW3BvaW50ZXIgLSBjb3VudERlbGV0ZSAtIGNvdW50SW5zZXJ0IC0gMV1bMV0gKz0gdGV4dEluc2VydC5zdWJzdHJpbmcoMCwgY29tbW9ubGVuZ3RoKSA6IChkaWZmcy5zcGxpY2UoMCwgMCwgW0RJRkZfRVFVQUwsIHRleHRJbnNlcnQuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCldKSwgcG9pbnRlcisrKSwgdGV4dEluc2VydCA9IHRleHRJbnNlcnQuc3Vic3RyaW5nKGNvbW1vbmxlbmd0aCksIHRleHREZWxldGUgPSB0ZXh0RGVsZXRlLnN1YnN0cmluZyhjb21tb25sZW5ndGgpKSwgY29tbW9ubGVuZ3RoID0gZ2V0Q29tbW9uU3VmZml4KHRleHRJbnNlcnQsIHRleHREZWxldGUpLCBjb21tb25sZW5ndGggIT09IDAgJiYgKGRpZmZzW3BvaW50ZXJdWzFdID0gdGV4dEluc2VydC5zdWJzdHJpbmcodGV4dEluc2VydC5sZW5ndGggLSBjb21tb25sZW5ndGgpICsgZGlmZnNbcG9pbnRlcl1bMV0sIHRleHRJbnNlcnQgPSB0ZXh0SW5zZXJ0LnN1YnN0cmluZygwLCB0ZXh0SW5zZXJ0Lmxlbmd0aCAtIGNvbW1vbmxlbmd0aCksIHRleHREZWxldGUgPSB0ZXh0RGVsZXRlLnN1YnN0cmluZygwLCB0ZXh0RGVsZXRlLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCkpKSwgcG9pbnRlciAtPSBjb3VudERlbGV0ZSArIGNvdW50SW5zZXJ0LCBkaWZmcy5zcGxpY2UocG9pbnRlciwgY291bnREZWxldGUgKyBjb3VudEluc2VydCksIHRleHREZWxldGUubGVuZ3RoICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfREVMRVRFLCB0ZXh0RGVsZXRlXSksIHBvaW50ZXIrKyksIHRleHRJbnNlcnQubGVuZ3RoICYmIChkaWZmcy5zcGxpY2UocG9pbnRlciwgMCwgW0RJRkZfSU5TRVJULCB0ZXh0SW5zZXJ0XSksIHBvaW50ZXIrKyksIHBvaW50ZXIrKykgOiBwb2ludGVyICE9PSAwICYmIGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PT0gRElGRl9FUVVBTCA/IChkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlcl1bMV0sIGRpZmZzLnNwbGljZShwb2ludGVyLCAxKSkgOiBwb2ludGVyKyssIGNvdW50SW5zZXJ0ID0gMCwgY291bnREZWxldGUgPSAwLCB0ZXh0RGVsZXRlID0gXCJcIiwgdGV4dEluc2VydCA9IFwiXCI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkaWZmIG9wZXJhdGlvblwiKTtcbiAgfVxuICBkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXSA9PT0gXCJcIiAmJiBkaWZmcy5wb3AoKTtcbiAgbGV0IGhhc0NoYW5nZXMgPSAhMTtcbiAgZm9yIChwb2ludGVyID0gMTsgcG9pbnRlciA8IGRpZmZzLmxlbmd0aCAtIDE7ICkgZGlmZnNbcG9pbnRlciAtIDFdWzBdID09PSBESUZGX0VRVUFMICYmIGRpZmZzW3BvaW50ZXIgKyAxXVswXSA9PT0gRElGRl9FUVVBTCAmJiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtIGRpZmZzW3BvaW50ZXIgLSAxXVsxXS5sZW5ndGgpID09PSBkaWZmc1twb2ludGVyIC0gMV1bMV0gPyAoZGlmZnNbcG9pbnRlcl1bMV0gPSBkaWZmc1twb2ludGVyIC0gMV1bMV0gKyBkaWZmc1twb2ludGVyXVsxXS5zdWJzdHJpbmcoMCwgZGlmZnNbcG9pbnRlcl1bMV0ubGVuZ3RoIC0gZGlmZnNbcG9pbnRlciAtIDFdWzFdLmxlbmd0aCksIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSwgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSAxLCAxKSwgaGFzQ2hhbmdlcyA9ICEwKSA6IGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZygwLCBkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSA9PT0gZGlmZnNbcG9pbnRlciArIDFdWzFdICYmIChkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlciArIDFdWzFdLCBkaWZmc1twb2ludGVyXVsxXSA9IGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyICsgMV1bMV0ubGVuZ3RoKSArIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSwgZGlmZnMuc3BsaWNlKHBvaW50ZXIgKyAxLCAxKSwgaGFzQ2hhbmdlcyA9ICEwKSksIHBvaW50ZXIrKztcbiAgcmV0dXJuIGhhc0NoYW5nZXMgJiYgKGRpZmZzID0gY2xlYW51cE1lcmdlKGRpZmZzKSksIGRpZmZzO1xufVxuZnVuY3Rpb24gdHJ1ZUNvdW50KC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3MucmVkdWNlKChuLCBib29sKSA9PiBuICsgKGJvb2wgPyAxIDogMCksIDApO1xufVxuZnVuY3Rpb24gY2xlYW51cEVmZmljaWVuY3kocmF3RGlmZnMsIGVkaXRDb3N0ID0gNCkge1xuICBsZXQgZGlmZnMgPSByYXdEaWZmcy5tYXAoKGRpZmYyKSA9PiBjbG9uZURpZmYoZGlmZjIpKSwgaGFzQ2hhbmdlcyA9ICExO1xuICBjb25zdCBlcXVhbGl0aWVzID0gW107XG4gIGxldCBlcXVhbGl0aWVzTGVuZ3RoID0gMCwgbGFzdEVxdWFsaXR5ID0gbnVsbCwgcG9pbnRlciA9IDAsIHByZUlucyA9ICExLCBwcmVEZWwgPSAhMSwgcG9zdElucyA9ICExLCBwb3N0RGVsID0gITE7XG4gIGZvciAoOyBwb2ludGVyIDwgZGlmZnMubGVuZ3RoOyApIGRpZmZzW3BvaW50ZXJdWzBdID09PSBESUZGX0VRVUFMID8gKGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCA8IGVkaXRDb3N0ICYmIChwb3N0SW5zIHx8IHBvc3REZWwpID8gKGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCsrXSA9IHBvaW50ZXIsIHByZUlucyA9IHBvc3RJbnMsIHByZURlbCA9IHBvc3REZWwsIGxhc3RFcXVhbGl0eSA9IGRpZmZzW3BvaW50ZXJdWzFdKSA6IChlcXVhbGl0aWVzTGVuZ3RoID0gMCwgbGFzdEVxdWFsaXR5ID0gbnVsbCksIHBvc3RJbnMgPSAhMSwgcG9zdERlbCA9ICExKSA6IChkaWZmc1twb2ludGVyXVswXSA9PT0gRElGRl9ERUxFVEUgPyBwb3N0RGVsID0gITAgOiBwb3N0SW5zID0gITAsIGxhc3RFcXVhbGl0eSAmJiAocHJlSW5zICYmIHByZURlbCAmJiBwb3N0SW5zICYmIHBvc3REZWwgfHwgbGFzdEVxdWFsaXR5Lmxlbmd0aCA8IGVkaXRDb3N0IC8gMiAmJiB0cnVlQ291bnQocHJlSW5zLCBwcmVEZWwsIHBvc3RJbnMsIHBvc3REZWwpID09PSAzKSAmJiAoZGlmZnMuc3BsaWNlKGVxdWFsaXRpZXNbZXF1YWxpdGllc0xlbmd0aCAtIDFdLCAwLCBbRElGRl9ERUxFVEUsIGxhc3RFcXVhbGl0eV0pLCBkaWZmc1tlcXVhbGl0aWVzW2VxdWFsaXRpZXNMZW5ndGggLSAxXSArIDFdWzBdID0gRElGRl9JTlNFUlQsIGVxdWFsaXRpZXNMZW5ndGgtLSwgbGFzdEVxdWFsaXR5ID0gbnVsbCwgcHJlSW5zICYmIHByZURlbCA/IChwb3N0SW5zID0gITAsIHBvc3REZWwgPSAhMCwgZXF1YWxpdGllc0xlbmd0aCA9IDApIDogKGVxdWFsaXRpZXNMZW5ndGgtLSwgcG9pbnRlciA9IGVxdWFsaXRpZXNMZW5ndGggPiAwID8gZXF1YWxpdGllc1tlcXVhbGl0aWVzTGVuZ3RoIC0gMV0gOiAtMSwgcG9zdElucyA9ICExLCBwb3N0RGVsID0gITEpLCBoYXNDaGFuZ2VzID0gITApKSwgcG9pbnRlcisrO1xuICByZXR1cm4gaGFzQ2hhbmdlcyAmJiAoZGlmZnMgPSBjbGVhbnVwTWVyZ2UoZGlmZnMpKSwgZGlmZnM7XG59XG52YXIgX19kZWZQcm9wJDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIF9fZ2V0T3duUHJvcFN5bWJvbHMkMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsIF9faGFzT3duUHJvcCQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwgX19wcm9wSXNFbnVtJDEgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLCBfX2RlZk5vcm1hbFByb3AkMSA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3AkMShvYmosIGtleSwge1xuICBlbnVtZXJhYmxlOiAhMCxcbiAgY29uZmlndXJhYmxlOiAhMCxcbiAgd3JpdGFibGU6ICEwLFxuICB2YWx1ZVxufSkgOiBvYmpba2V5XSA9IHZhbHVlLCBfX3NwcmVhZFZhbHVlcyQxID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKSBfX2hhc093blByb3AkMS5jYWxsKGIsIHByb3ApICYmIF9fZGVmTm9ybWFsUHJvcCQxKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scyQxKSBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMkMShiKSkgX19wcm9wSXNFbnVtJDEuY2FsbChiLCBwcm9wKSAmJiBfX2RlZk5vcm1hbFByb3AkMShhLCBwcm9wLCBiW3Byb3BdKTtcbiAgcmV0dXJuIGE7XG59O1xuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICAvKipcbiAgICogQXQgd2hhdCBwb2ludCBpcyBubyBtYXRjaCBkZWNsYXJlZCAoMC4wID0gcGVyZmVjdGlvbiwgMS4wID0gdmVyeSBsb29zZSkuXG4gICAqL1xuICB0aHJlc2hvbGQ6IDAuNSxcbiAgLyoqXG4gICAqIEhvdyBmYXIgdG8gc2VhcmNoIGZvciBhIG1hdGNoICgwID0gZXhhY3QgbG9jYXRpb24sIDEwMDArID0gYnJvYWQgbWF0Y2gpLlxuICAgKiBBIG1hdGNoIHRoaXMgbWFueSBjaGFyYWN0ZXJzIGF3YXkgZnJvbSB0aGUgZXhwZWN0ZWQgbG9jYXRpb24gd2lsbCBhZGRcbiAgICogMS4wIHRvIHRoZSBzY29yZSAoMC4wIGlzIGEgcGVyZmVjdCBtYXRjaCkuXG4gICAqL1xuICBkaXN0YW5jZTogMWUzXG59O1xuZnVuY3Rpb24gYXBwbHlEZWZhdWx0cyhvcHRpb25zKSB7XG4gIHJldHVybiBfX3NwcmVhZFZhbHVlcyQxKF9fc3ByZWFkVmFsdWVzJDEoe30sIERFRkFVTFRfT1BUSU9OUyksIG9wdGlvbnMpO1xufVxuY29uc3QgTUFYX0JJVFMkMSA9IDMyO1xuZnVuY3Rpb24gYml0YXAodGV4dCwgcGF0dGVybiwgbG9jLCBvcHRzID0ge30pIHtcbiAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gTUFYX0JJVFMkMSkgdGhyb3cgbmV3IEVycm9yKFwiUGF0dGVybiB0b28gbG9uZyBmb3IgdGhpcyBicm93c2VyLlwiKTtcbiAgY29uc3Qgb3B0aW9ucyA9IGFwcGx5RGVmYXVsdHMob3B0cyksIHMgPSBnZXRBbHBoYWJldEZyb21QYXR0ZXJuKHBhdHRlcm4pO1xuICBmdW5jdGlvbiBnZXRCaXRhcFNjb3JlKGUsIHgpIHtcbiAgICBjb25zdCBhY2N1cmFjeSA9IGUgLyBwYXR0ZXJuLmxlbmd0aCwgcHJveGltaXR5ID0gTWF0aC5hYnMobG9jIC0geCk7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGlzdGFuY2UgPyBhY2N1cmFjeSArIHByb3hpbWl0eSAvIG9wdGlvbnMuZGlzdGFuY2UgOiBwcm94aW1pdHkgPyAxIDogYWNjdXJhY3k7XG4gIH1cbiAgbGV0IHNjb3JlVGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQsIGJlc3RMb2MgPSB0ZXh0LmluZGV4T2YocGF0dGVybiwgbG9jKTtcbiAgYmVzdExvYyAhPT0gLTEgJiYgKHNjb3JlVGhyZXNob2xkID0gTWF0aC5taW4oZ2V0Qml0YXBTY29yZSgwLCBiZXN0TG9jKSwgc2NvcmVUaHJlc2hvbGQpLCBiZXN0TG9jID0gdGV4dC5sYXN0SW5kZXhPZihwYXR0ZXJuLCBsb2MgKyBwYXR0ZXJuLmxlbmd0aCksIGJlc3RMb2MgIT09IC0xICYmIChzY29yZVRocmVzaG9sZCA9IE1hdGgubWluKGdldEJpdGFwU2NvcmUoMCwgYmVzdExvYyksIHNjb3JlVGhyZXNob2xkKSkpO1xuICBjb25zdCBtYXRjaG1hc2sgPSAxIDw8IHBhdHRlcm4ubGVuZ3RoIC0gMTtcbiAgYmVzdExvYyA9IC0xO1xuICBsZXQgYmluTWluLCBiaW5NaWQsIGJpbk1heCA9IHBhdHRlcm4ubGVuZ3RoICsgdGV4dC5sZW5ndGgsIGxhc3RSZCA9IFtdO1xuICBmb3IgKGxldCBkID0gMDsgZCA8IHBhdHRlcm4ubGVuZ3RoOyBkKyspIHtcbiAgICBmb3IgKGJpbk1pbiA9IDAsIGJpbk1pZCA9IGJpbk1heDsgYmluTWluIDwgYmluTWlkOyApIGdldEJpdGFwU2NvcmUoZCwgbG9jICsgYmluTWlkKSA8PSBzY29yZVRocmVzaG9sZCA/IGJpbk1pbiA9IGJpbk1pZCA6IGJpbk1heCA9IGJpbk1pZCwgYmluTWlkID0gTWF0aC5mbG9vcigoYmluTWF4IC0gYmluTWluKSAvIDIgKyBiaW5NaW4pO1xuICAgIGJpbk1heCA9IGJpbk1pZDtcbiAgICBsZXQgc3RhcnQgPSBNYXRoLm1heCgxLCBsb2MgLSBiaW5NaWQgKyAxKTtcbiAgICBjb25zdCBmaW5pc2ggPSBNYXRoLm1pbihsb2MgKyBiaW5NaWQsIHRleHQubGVuZ3RoKSArIHBhdHRlcm4ubGVuZ3RoLCByZCA9IG5ldyBBcnJheShmaW5pc2ggKyAyKTtcbiAgICByZFtmaW5pc2ggKyAxXSA9ICgxIDw8IGQpIC0gMTtcbiAgICBmb3IgKGxldCBqID0gZmluaXNoOyBqID49IHN0YXJ0OyBqLS0pIHtcbiAgICAgIGNvbnN0IGNoYXJNYXRjaCA9IHNbdGV4dC5jaGFyQXQoaiAtIDEpXTtcbiAgICAgIGlmIChkID09PSAwID8gcmRbal0gPSAocmRbaiArIDFdIDw8IDEgfCAxKSAmIGNoYXJNYXRjaCA6IHJkW2pdID0gKHJkW2ogKyAxXSA8PCAxIHwgMSkgJiBjaGFyTWF0Y2ggfCAoKGxhc3RSZFtqICsgMV0gfCBsYXN0UmRbal0pIDw8IDEgfCAxKSB8IGxhc3RSZFtqICsgMV0sIHJkW2pdICYgbWF0Y2htYXNrKSB7XG4gICAgICAgIGNvbnN0IHNjb3JlID0gZ2V0Qml0YXBTY29yZShkLCBqIC0gMSk7XG4gICAgICAgIGlmIChzY29yZSA8PSBzY29yZVRocmVzaG9sZCkgaWYgKHNjb3JlVGhyZXNob2xkID0gc2NvcmUsIGJlc3RMb2MgPSBqIC0gMSwgYmVzdExvYyA+IGxvYykgc3RhcnQgPSBNYXRoLm1heCgxLCAyICogbG9jIC0gYmVzdExvYyk7XG4gICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChnZXRCaXRhcFNjb3JlKGQgKyAxLCBsb2MpID4gc2NvcmVUaHJlc2hvbGQpIGJyZWFrO1xuICAgIGxhc3RSZCA9IHJkO1xuICB9XG4gIHJldHVybiBiZXN0TG9jO1xufVxuZnVuY3Rpb24gZ2V0QWxwaGFiZXRGcm9tUGF0dGVybihwYXR0ZXJuKSB7XG4gIGNvbnN0IHMgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuLmxlbmd0aDsgaSsrKSBzW3BhdHRlcm4uY2hhckF0KGkpXSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykgc1twYXR0ZXJuLmNoYXJBdChpKV0gfD0gMSA8PCBwYXR0ZXJuLmxlbmd0aCAtIGkgLSAxO1xuICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIG1hdGNoKHRleHQsIHBhdHRlcm4sIHNlYXJjaExvY2F0aW9uKSB7XG4gIGlmICh0ZXh0ID09PSBudWxsIHx8IHBhdHRlcm4gPT09IG51bGwgfHwgc2VhcmNoTG9jYXRpb24gPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIk51bGwgaW5wdXQuIChtYXRjaCgpKVwiKTtcbiAgY29uc3QgbG9jID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2VhcmNoTG9jYXRpb24sIHRleHQubGVuZ3RoKSk7XG4gIGlmICh0ZXh0ID09PSBwYXR0ZXJuKSByZXR1cm4gMDtcbiAgaWYgKHRleHQubGVuZ3RoKSB7XG4gICAgaWYgKHRleHQuc3Vic3RyaW5nKGxvYywgbG9jICsgcGF0dGVybi5sZW5ndGgpID09PSBwYXR0ZXJuKSByZXR1cm4gbG9jO1xuICB9IGVsc2UgcmV0dXJuIC0xO1xuICByZXR1cm4gYml0YXAodGV4dCwgcGF0dGVybiwgbG9jKTtcbn1cbmZ1bmN0aW9uIGRpZmZUZXh0MShkaWZmcykge1xuICBjb25zdCB0ZXh0ID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgZGlmZnMubGVuZ3RoOyB4KyspIGRpZmZzW3hdWzBdICE9PSBESUZGX0lOU0VSVCAmJiAodGV4dFt4XSA9IGRpZmZzW3hdWzFdKTtcbiAgcmV0dXJuIHRleHQuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIGRpZmZUZXh0MihkaWZmcykge1xuICBjb25zdCB0ZXh0ID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgZGlmZnMubGVuZ3RoOyB4KyspIGRpZmZzW3hdWzBdICE9PSBESUZGX0RFTEVURSAmJiAodGV4dFt4XSA9IGRpZmZzW3hdWzFdKTtcbiAgcmV0dXJuIHRleHQuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIGxldmVuc2h0ZWluKGRpZmZzKSB7XG4gIGxldCBsZXZlbiA9IDAsIGluc2VydGlvbnMgPSAwLCBkZWxldGlvbnMgPSAwO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGRpZmZzLmxlbmd0aDsgeCsrKSB7XG4gICAgY29uc3Qgb3AgPSBkaWZmc1t4XVswXSwgZGF0YSA9IGRpZmZzW3hdWzFdO1xuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgIGNhc2UgRElGRl9JTlNFUlQ6XG4gICAgICAgIGluc2VydGlvbnMgKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUZGX0RFTEVURTpcbiAgICAgICAgZGVsZXRpb25zICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgICAgbGV2ZW4gKz0gTWF0aC5tYXgoaW5zZXJ0aW9ucywgZGVsZXRpb25zKSwgaW5zZXJ0aW9ucyA9IDAsIGRlbGV0aW9ucyA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkaWZmIG9wZXJhdGlvbi5cIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBsZXZlbiArPSBNYXRoLm1heChpbnNlcnRpb25zLCBkZWxldGlvbnMpLCBsZXZlbjtcbn1cbmZ1bmN0aW9uIHhJbmRleChkaWZmcywgbG9jKSB7XG4gIGxldCBjaGFyczEgPSAwLCBjaGFyczIgPSAwLCBsYXN0Q2hhcnMxID0gMCwgbGFzdENoYXJzMiA9IDAsIHg7XG4gIGZvciAoeCA9IDA7IHggPCBkaWZmcy5sZW5ndGggJiYgKGRpZmZzW3hdWzBdICE9PSBESUZGX0lOU0VSVCAmJiAoY2hhcnMxICs9IGRpZmZzW3hdWzFdLmxlbmd0aCksIGRpZmZzW3hdWzBdICE9PSBESUZGX0RFTEVURSAmJiAoY2hhcnMyICs9IGRpZmZzW3hdWzFdLmxlbmd0aCksICEoY2hhcnMxID4gbG9jKSk7IHgrKykgbGFzdENoYXJzMSA9IGNoYXJzMSwgbGFzdENoYXJzMiA9IGNoYXJzMjtcbiAgcmV0dXJuIGRpZmZzLmxlbmd0aCAhPT0geCAmJiBkaWZmc1t4XVswXSA9PT0gRElGRl9ERUxFVEUgPyBsYXN0Q2hhcnMyIDogbGFzdENoYXJzMiArIChsb2MgLSBsYXN0Q2hhcnMxKTtcbn1cbmZ1bmN0aW9uIGNvdW50VXRmOEJ5dGVzKHN0cikge1xuICBsZXQgYnl0ZXMgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvZGVQb2ludCA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICBpZiAodHlwZW9mIGNvZGVQb2ludCA+IFwidVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGNvZGVwb2ludFwiKTtcbiAgICBieXRlcyArPSB1dGY4bGVuKGNvZGVQb2ludCk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gYWRqdXN0SW5kaWNpZXNUb1VjczIocGF0Y2hlcywgYmFzZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBieXRlT2Zmc2V0ID0gMCwgaWR4ID0gMDtcbiAgZnVuY3Rpb24gYWR2YW5jZVRvKHRhcmdldCkge1xuICAgIGZvciAoOyBieXRlT2Zmc2V0IDwgdGFyZ2V0OyApIHtcbiAgICAgIGNvbnN0IGNvZGVQb2ludCA9IGJhc2UuY29kZVBvaW50QXQoaWR4KTtcbiAgICAgIGlmICh0eXBlb2YgY29kZVBvaW50ID4gXCJ1XCIpIHJldHVybiBpZHg7XG4gICAgICBieXRlT2Zmc2V0ICs9IHV0ZjhsZW4oY29kZVBvaW50KSwgY29kZVBvaW50ID4gNjU1MzUgPyBpZHggKz0gMiA6IGlkeCArPSAxO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuYWxsb3dFeGNlZWRpbmdJbmRpY2VzICYmIGJ5dGVPZmZzZXQgIT09IHRhcmdldCkgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRldGVybWluZSBieXRlIG9mZnNldFwiKTtcbiAgICByZXR1cm4gaWR4O1xuICB9XG4gIGNvbnN0IGFkanVzdGVkID0gW107XG4gIGZvciAoY29uc3QgcGF0Y2ggb2YgcGF0Y2hlcykgYWRqdXN0ZWQucHVzaCh7XG4gICAgZGlmZnM6IHBhdGNoLmRpZmZzLm1hcCgoZGlmZjIpID0+IGNsb25lRGlmZihkaWZmMikpLFxuICAgIHN0YXJ0MTogYWR2YW5jZVRvKHBhdGNoLnN0YXJ0MSksXG4gICAgc3RhcnQyOiBhZHZhbmNlVG8ocGF0Y2guc3RhcnQyKSxcbiAgICB1dGY4U3RhcnQxOiBwYXRjaC51dGY4U3RhcnQxLFxuICAgIHV0ZjhTdGFydDI6IHBhdGNoLnV0ZjhTdGFydDIsXG4gICAgbGVuZ3RoMTogcGF0Y2gubGVuZ3RoMSxcbiAgICBsZW5ndGgyOiBwYXRjaC5sZW5ndGgyLFxuICAgIHV0ZjhMZW5ndGgxOiBwYXRjaC51dGY4TGVuZ3RoMSxcbiAgICB1dGY4TGVuZ3RoMjogcGF0Y2gudXRmOExlbmd0aDJcbiAgfSk7XG4gIHJldHVybiBhZGp1c3RlZDtcbn1cbmZ1bmN0aW9uIHV0ZjhsZW4oY29kZVBvaW50KSB7XG4gIHJldHVybiBjb2RlUG9pbnQgPD0gMTI3ID8gMSA6IGNvZGVQb2ludCA8PSAyMDQ3ID8gMiA6IGNvZGVQb2ludCA8PSA2NTUzNSA/IDMgOiA0O1xufVxuY29uc3QgTUFYX0JJVFMgPSAzMiwgREVGQVVMVF9NQVJHSU4gPSA0O1xuZnVuY3Rpb24gYWRkUGFkZGluZyhwYXRjaGVzLCBtYXJnaW4gPSBERUZBVUxUX01BUkdJTikge1xuICBjb25zdCBwYWRkaW5nTGVuZ3RoID0gbWFyZ2luO1xuICBsZXQgbnVsbFBhZGRpbmcgPSBcIlwiO1xuICBmb3IgKGxldCB4ID0gMTsgeCA8PSBwYWRkaW5nTGVuZ3RoOyB4KyspIG51bGxQYWRkaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7XG4gIGZvciAoY29uc3QgcCBvZiBwYXRjaGVzKSBwLnN0YXJ0MSArPSBwYWRkaW5nTGVuZ3RoLCBwLnN0YXJ0MiArPSBwYWRkaW5nTGVuZ3RoLCBwLnV0ZjhTdGFydDEgKz0gcGFkZGluZ0xlbmd0aCwgcC51dGY4U3RhcnQyICs9IHBhZGRpbmdMZW5ndGg7XG4gIGxldCBwYXRjaCA9IHBhdGNoZXNbMF0sIGRpZmZzID0gcGF0Y2guZGlmZnM7XG4gIGlmIChkaWZmcy5sZW5ndGggPT09IDAgfHwgZGlmZnNbMF1bMF0gIT09IERJRkZfRVFVQUwpIGRpZmZzLnVuc2hpZnQoW0RJRkZfRVFVQUwsIG51bGxQYWRkaW5nXSksIHBhdGNoLnN0YXJ0MSAtPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC5zdGFydDIgLT0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOFN0YXJ0MSAtPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4U3RhcnQyIC09IHBhZGRpbmdMZW5ndGgsIHBhdGNoLmxlbmd0aDEgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gubGVuZ3RoMiArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBwYWRkaW5nTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMiArPSBwYWRkaW5nTGVuZ3RoO1xuICBlbHNlIGlmIChwYWRkaW5nTGVuZ3RoID4gZGlmZnNbMF1bMV0ubGVuZ3RoKSB7XG4gICAgY29uc3QgZmlyc3REaWZmTGVuZ3RoID0gZGlmZnNbMF1bMV0ubGVuZ3RoLCBleHRyYUxlbmd0aCA9IHBhZGRpbmdMZW5ndGggLSBmaXJzdERpZmZMZW5ndGg7XG4gICAgZGlmZnNbMF1bMV0gPSBudWxsUGFkZGluZy5zdWJzdHJpbmcoZmlyc3REaWZmTGVuZ3RoKSArIGRpZmZzWzBdWzFdLCBwYXRjaC5zdGFydDEgLT0gZXh0cmFMZW5ndGgsIHBhdGNoLnN0YXJ0MiAtPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOFN0YXJ0MSAtPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOFN0YXJ0MiAtPSBleHRyYUxlbmd0aCwgcGF0Y2gubGVuZ3RoMSArPSBleHRyYUxlbmd0aCwgcGF0Y2gubGVuZ3RoMiArPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gZXh0cmFMZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IGV4dHJhTGVuZ3RoO1xuICB9XG4gIGlmIChwYXRjaCA9IHBhdGNoZXNbcGF0Y2hlcy5sZW5ndGggLSAxXSwgZGlmZnMgPSBwYXRjaC5kaWZmcywgZGlmZnMubGVuZ3RoID09PSAwIHx8IGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzBdICE9PSBESUZGX0VRVUFMKSBkaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBudWxsUGFkZGluZ10pLCBwYXRjaC5sZW5ndGgxICs9IHBhZGRpbmdMZW5ndGgsIHBhdGNoLmxlbmd0aDIgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gcGFkZGluZ0xlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gcGFkZGluZ0xlbmd0aDtcbiAgZWxzZSBpZiAocGFkZGluZ0xlbmd0aCA+IGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdLmxlbmd0aCkge1xuICAgIGNvbnN0IGV4dHJhTGVuZ3RoID0gcGFkZGluZ0xlbmd0aCAtIGRpZmZzW2RpZmZzLmxlbmd0aCAtIDFdWzFdLmxlbmd0aDtcbiAgICBkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXSArPSBudWxsUGFkZGluZy5zdWJzdHJpbmcoMCwgZXh0cmFMZW5ndGgpLCBwYXRjaC5sZW5ndGgxICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC5sZW5ndGgyICs9IGV4dHJhTGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBleHRyYUxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gZXh0cmFMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG51bGxQYWRkaW5nO1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hPYmplY3Qoc3RhcnQxLCBzdGFydDIpIHtcbiAgcmV0dXJuIHtcbiAgICBkaWZmczogW10sXG4gICAgc3RhcnQxLFxuICAgIHN0YXJ0MixcbiAgICB1dGY4U3RhcnQxOiBzdGFydDEsXG4gICAgdXRmOFN0YXJ0Mjogc3RhcnQyLFxuICAgIGxlbmd0aDE6IDAsXG4gICAgbGVuZ3RoMjogMCxcbiAgICB1dGY4TGVuZ3RoMTogMCxcbiAgICB1dGY4TGVuZ3RoMjogMFxuICB9O1xufVxuZnVuY3Rpb24gc3BsaXRNYXgocGF0Y2hlcywgbWFyZ2luID0gREVGQVVMVF9NQVJHSU4pIHtcbiAgY29uc3QgcGF0Y2hTaXplID0gTUFYX0JJVFM7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgcGF0Y2hlcy5sZW5ndGg7IHgrKykge1xuICAgIGlmIChwYXRjaGVzW3hdLmxlbmd0aDEgPD0gcGF0Y2hTaXplKSBjb250aW51ZTtcbiAgICBjb25zdCBiaWdwYXRjaCA9IHBhdGNoZXNbeF07XG4gICAgcGF0Y2hlcy5zcGxpY2UoeC0tLCAxKTtcbiAgICBsZXQgc3RhcnQxID0gYmlncGF0Y2guc3RhcnQxLCBzdGFydDIgPSBiaWdwYXRjaC5zdGFydDIsIHByZUNvbnRleHQgPSBcIlwiO1xuICAgIGZvciAoOyBiaWdwYXRjaC5kaWZmcy5sZW5ndGggIT09IDA7ICkge1xuICAgICAgY29uc3QgcGF0Y2ggPSBjcmVhdGVQYXRjaE9iamVjdChzdGFydDEgLSBwcmVDb250ZXh0Lmxlbmd0aCwgc3RhcnQyIC0gcHJlQ29udGV4dC5sZW5ndGgpO1xuICAgICAgbGV0IGVtcHR5ID0gITA7XG4gICAgICBpZiAocHJlQ29udGV4dCAhPT0gXCJcIikge1xuICAgICAgICBjb25zdCBwcmVjb250ZXh0Qnl0ZUNvdW50ID0gY291bnRVdGY4Qnl0ZXMocHJlQ29udGV4dCk7XG4gICAgICAgIHBhdGNoLmxlbmd0aDEgPSBwcmVDb250ZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgPSBwcmVjb250ZXh0Qnl0ZUNvdW50LCBwYXRjaC5sZW5ndGgyID0gcHJlQ29udGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyID0gcHJlY29udGV4dEJ5dGVDb3VudCwgcGF0Y2guZGlmZnMucHVzaChbRElGRl9FUVVBTCwgcHJlQ29udGV4dF0pO1xuICAgICAgfVxuICAgICAgZm9yICg7IGJpZ3BhdGNoLmRpZmZzLmxlbmd0aCAhPT0gMCAmJiBwYXRjaC5sZW5ndGgxIDwgcGF0Y2hTaXplIC0gbWFyZ2luOyApIHtcbiAgICAgICAgY29uc3QgZGlmZlR5cGUgPSBiaWdwYXRjaC5kaWZmc1swXVswXTtcbiAgICAgICAgbGV0IGRpZmZUZXh0ID0gYmlncGF0Y2guZGlmZnNbMF1bMV0sIGRpZmZUZXh0Qnl0ZUNvdW50ID0gY291bnRVdGY4Qnl0ZXMoZGlmZlRleHQpO1xuICAgICAgICBpZiAoZGlmZlR5cGUgPT09IERJRkZfSU5TRVJUKSB7XG4gICAgICAgICAgcGF0Y2gubGVuZ3RoMiArPSBkaWZmVGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IGRpZmZUZXh0Qnl0ZUNvdW50LCBzdGFydDIgKz0gZGlmZlRleHQubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IGRpZmYyID0gYmlncGF0Y2guZGlmZnMuc2hpZnQoKTtcbiAgICAgICAgICBkaWZmMiAmJiBwYXRjaC5kaWZmcy5wdXNoKGRpZmYyKSwgZW1wdHkgPSAhMTtcbiAgICAgICAgfSBlbHNlIGRpZmZUeXBlID09PSBESUZGX0RFTEVURSAmJiBwYXRjaC5kaWZmcy5sZW5ndGggPT09IDEgJiYgcGF0Y2guZGlmZnNbMF1bMF0gPT09IERJRkZfRVFVQUwgJiYgZGlmZlRleHQubGVuZ3RoID4gMiAqIHBhdGNoU2l6ZSA/IChwYXRjaC5sZW5ndGgxICs9IGRpZmZUZXh0Lmxlbmd0aCwgcGF0Y2gudXRmOExlbmd0aDEgKz0gZGlmZlRleHRCeXRlQ291bnQsIHN0YXJ0MSArPSBkaWZmVGV4dC5sZW5ndGgsIGVtcHR5ID0gITEsIHBhdGNoLmRpZmZzLnB1c2goW2RpZmZUeXBlLCBkaWZmVGV4dF0pLCBiaWdwYXRjaC5kaWZmcy5zaGlmdCgpKSA6IChkaWZmVGV4dCA9IGRpZmZUZXh0LnN1YnN0cmluZygwLCBwYXRjaFNpemUgLSBwYXRjaC5sZW5ndGgxIC0gbWFyZ2luKSwgZGlmZlRleHRCeXRlQ291bnQgPSBjb3VudFV0ZjhCeXRlcyhkaWZmVGV4dCksIHBhdGNoLmxlbmd0aDEgKz0gZGlmZlRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBkaWZmVGV4dEJ5dGVDb3VudCwgc3RhcnQxICs9IGRpZmZUZXh0Lmxlbmd0aCwgZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgPyAocGF0Y2gubGVuZ3RoMiArPSBkaWZmVGV4dC5sZW5ndGgsIHBhdGNoLnV0ZjhMZW5ndGgyICs9IGRpZmZUZXh0Qnl0ZUNvdW50LCBzdGFydDIgKz0gZGlmZlRleHQubGVuZ3RoKSA6IGVtcHR5ID0gITEsIHBhdGNoLmRpZmZzLnB1c2goW2RpZmZUeXBlLCBkaWZmVGV4dF0pLCBkaWZmVGV4dCA9PT0gYmlncGF0Y2guZGlmZnNbMF1bMV0gPyBiaWdwYXRjaC5kaWZmcy5zaGlmdCgpIDogYmlncGF0Y2guZGlmZnNbMF1bMV0gPSBiaWdwYXRjaC5kaWZmc1swXVsxXS5zdWJzdHJpbmcoZGlmZlRleHQubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgICBwcmVDb250ZXh0ID0gZGlmZlRleHQyKHBhdGNoLmRpZmZzKSwgcHJlQ29udGV4dCA9IHByZUNvbnRleHQuc3Vic3RyaW5nKHByZUNvbnRleHQubGVuZ3RoIC0gbWFyZ2luKTtcbiAgICAgIGNvbnN0IHBvc3RDb250ZXh0ID0gZGlmZlRleHQxKGJpZ3BhdGNoLmRpZmZzKS5zdWJzdHJpbmcoMCwgbWFyZ2luKSwgcG9zdENvbnRleHRCeXRlQ291bnQgPSBjb3VudFV0ZjhCeXRlcyhwb3N0Q29udGV4dCk7XG4gICAgICBwb3N0Q29udGV4dCAhPT0gXCJcIiAmJiAocGF0Y2gubGVuZ3RoMSArPSBwb3N0Q29udGV4dC5sZW5ndGgsIHBhdGNoLmxlbmd0aDIgKz0gcG9zdENvbnRleHQubGVuZ3RoLCBwYXRjaC51dGY4TGVuZ3RoMSArPSBwb3N0Q29udGV4dEJ5dGVDb3VudCwgcGF0Y2gudXRmOExlbmd0aDIgKz0gcG9zdENvbnRleHRCeXRlQ291bnQsIHBhdGNoLmRpZmZzLmxlbmd0aCAhPT0gMCAmJiBwYXRjaC5kaWZmc1twYXRjaC5kaWZmcy5sZW5ndGggLSAxXVswXSA9PT0gRElGRl9FUVVBTCA/IHBhdGNoLmRpZmZzW3BhdGNoLmRpZmZzLmxlbmd0aCAtIDFdWzFdICs9IHBvc3RDb250ZXh0IDogcGF0Y2guZGlmZnMucHVzaChbRElGRl9FUVVBTCwgcG9zdENvbnRleHRdKSksIGVtcHR5IHx8IHBhdGNoZXMuc3BsaWNlKCsreCwgMCwgcGF0Y2gpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYXBwbHkocGF0Y2hlcywgb3JpZ2luYWxUZXh0LCBvcHRzID0ge30pIHtcbiAgaWYgKHR5cGVvZiBwYXRjaGVzID09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIlBhdGNoZXMgbXVzdCBiZSBhbiBhcnJheSAtIHBhc3MgdGhlIHBhdGNoIHRvIGBwYXJzZVBhdGNoKClgIGZpcnN0XCIpO1xuICBsZXQgdGV4dCA9IG9yaWdpbmFsVGV4dDtcbiAgaWYgKHBhdGNoZXMubGVuZ3RoID09PSAwKSByZXR1cm4gW3RleHQsIFtdXTtcbiAgY29uc3QgcGFyc2VkID0gYWRqdXN0SW5kaWNpZXNUb1VjczIocGF0Y2hlcywgdGV4dCwge1xuICAgIGFsbG93RXhjZWVkaW5nSW5kaWNlczogb3B0cy5hbGxvd0V4Y2VlZGluZ0luZGljZXNcbiAgfSksIG1hcmdpbiA9IG9wdHMubWFyZ2luIHx8IERFRkFVTFRfTUFSR0lOLCBkZWxldGVUaHJlc2hvbGQgPSBvcHRzLmRlbGV0ZVRocmVzaG9sZCB8fCAwLjQsIG51bGxQYWRkaW5nID0gYWRkUGFkZGluZyhwYXJzZWQsIG1hcmdpbik7XG4gIHRleHQgPSBudWxsUGFkZGluZyArIHRleHQgKyBudWxsUGFkZGluZywgc3BsaXRNYXgocGFyc2VkLCBtYXJnaW4pO1xuICBsZXQgZGVsdGEgPSAwO1xuICBjb25zdCByZXN1bHRzID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgcGFyc2VkLmxlbmd0aDsgeCsrKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRMb2MgPSBwYXJzZWRbeF0uc3RhcnQyICsgZGVsdGEsIHRleHQxID0gZGlmZlRleHQxKHBhcnNlZFt4XS5kaWZmcyk7XG4gICAgbGV0IHN0YXJ0TG9jLCBlbmRMb2MgPSAtMTtcbiAgICBpZiAodGV4dDEubGVuZ3RoID4gTUFYX0JJVFMgPyAoc3RhcnRMb2MgPSBtYXRjaCh0ZXh0LCB0ZXh0MS5zdWJzdHJpbmcoMCwgTUFYX0JJVFMpLCBleHBlY3RlZExvYyksIHN0YXJ0TG9jICE9PSAtMSAmJiAoZW5kTG9jID0gbWF0Y2godGV4dCwgdGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIE1BWF9CSVRTKSwgZXhwZWN0ZWRMb2MgKyB0ZXh0MS5sZW5ndGggLSBNQVhfQklUUyksIChlbmRMb2MgPT09IC0xIHx8IHN0YXJ0TG9jID49IGVuZExvYykgJiYgKHN0YXJ0TG9jID0gLTEpKSkgOiBzdGFydExvYyA9IG1hdGNoKHRleHQsIHRleHQxLCBleHBlY3RlZExvYyksIHN0YXJ0TG9jID09PSAtMSkgcmVzdWx0c1t4XSA9ICExLCBkZWx0YSAtPSBwYXJzZWRbeF0ubGVuZ3RoMiAtIHBhcnNlZFt4XS5sZW5ndGgxO1xuICAgIGVsc2Uge1xuICAgICAgcmVzdWx0c1t4XSA9ICEwLCBkZWx0YSA9IHN0YXJ0TG9jIC0gZXhwZWN0ZWRMb2M7XG4gICAgICBsZXQgdGV4dDI7XG4gICAgICBpZiAoZW5kTG9jID09PSAtMSA/IHRleHQyID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRMb2MsIHN0YXJ0TG9jICsgdGV4dDEubGVuZ3RoKSA6IHRleHQyID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRMb2MsIGVuZExvYyArIE1BWF9CSVRTKSwgdGV4dDEgPT09IHRleHQyKSB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRMb2MpICsgZGlmZlRleHQyKHBhcnNlZFt4XS5kaWZmcykgKyB0ZXh0LnN1YnN0cmluZyhzdGFydExvYyArIHRleHQxLmxlbmd0aCk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IGRpZmZzID0gZGlmZih0ZXh0MSwgdGV4dDIsIHtcbiAgICAgICAgICBjaGVja0xpbmVzOiAhMVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRleHQxLmxlbmd0aCA+IE1BWF9CSVRTICYmIGxldmVuc2h0ZWluKGRpZmZzKSAvIHRleHQxLmxlbmd0aCA+IGRlbGV0ZVRocmVzaG9sZCkgcmVzdWx0c1t4XSA9ICExO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkaWZmcyA9IGNsZWFudXBTZW1hbnRpY0xvc3NsZXNzKGRpZmZzKTtcbiAgICAgICAgICBsZXQgaW5kZXgxID0gMCwgaW5kZXgyID0gMDtcbiAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHBhcnNlZFt4XS5kaWZmcy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgY29uc3QgbW9kID0gcGFyc2VkW3hdLmRpZmZzW3ldO1xuICAgICAgICAgICAgbW9kWzBdICE9PSBESUZGX0VRVUFMICYmIChpbmRleDIgPSB4SW5kZXgoZGlmZnMsIGluZGV4MSkpLCBtb2RbMF0gPT09IERJRkZfSU5TRVJUID8gdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0TG9jICsgaW5kZXgyKSArIG1vZFsxXSArIHRleHQuc3Vic3RyaW5nKHN0YXJ0TG9jICsgaW5kZXgyKSA6IG1vZFswXSA9PT0gRElGRl9ERUxFVEUgJiYgKHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydExvYyArIGluZGV4MikgKyB0ZXh0LnN1YnN0cmluZyhzdGFydExvYyArIHhJbmRleChkaWZmcywgaW5kZXgxICsgbW9kWzFdLmxlbmd0aCkpKSwgbW9kWzBdICE9PSBESUZGX0RFTEVURSAmJiAoaW5kZXgxICs9IG1vZFsxXS5sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGV4dCA9IHRleHQuc3Vic3RyaW5nKG51bGxQYWRkaW5nLmxlbmd0aCwgdGV4dC5sZW5ndGggLSBudWxsUGFkZGluZy5sZW5ndGgpLCBbdGV4dCwgcmVzdWx0c107XG59XG5jb25zdCBwYXRjaEhlYWRlciA9IC9eQEAgLShcXGQrKSw/KFxcZCopIFxcKyhcXGQrKSw/KFxcZCopIEBAJC87XG5mdW5jdGlvbiBwYXJzZSh0ZXh0bGluZSkge1xuICBpZiAoIXRleHRsaW5lKSByZXR1cm4gW107XG4gIGNvbnN0IHBhdGNoZXMgPSBbXSwgbGluZXMgPSB0ZXh0bGluZS5zcGxpdChgXG5gKTtcbiAgbGV0IHRleHRQb2ludGVyID0gMDtcbiAgZm9yICg7IHRleHRQb2ludGVyIDwgbGluZXMubGVuZ3RoOyApIHtcbiAgICBjb25zdCBtID0gbGluZXNbdGV4dFBvaW50ZXJdLm1hdGNoKHBhdGNoSGVhZGVyKTtcbiAgICBpZiAoIW0pIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXRjaCBzdHJpbmc6ICR7bGluZXNbdGV4dFBvaW50ZXJdfWApO1xuICAgIGNvbnN0IHBhdGNoID0gY3JlYXRlUGF0Y2hPYmplY3QodG9JbnQobVsxXSksIHRvSW50KG1bM10pKTtcbiAgICBmb3IgKHBhdGNoZXMucHVzaChwYXRjaCksIG1bMl0gPT09IFwiXCIgPyAocGF0Y2guc3RhcnQxLS0sIHBhdGNoLnV0ZjhTdGFydDEtLSwgcGF0Y2gubGVuZ3RoMSA9IDEsIHBhdGNoLnV0ZjhMZW5ndGgxID0gMSkgOiBtWzJdID09PSBcIjBcIiA/IChwYXRjaC5sZW5ndGgxID0gMCwgcGF0Y2gudXRmOExlbmd0aDEgPSAwKSA6IChwYXRjaC5zdGFydDEtLSwgcGF0Y2gudXRmOFN0YXJ0MS0tLCBwYXRjaC51dGY4TGVuZ3RoMSA9IHRvSW50KG1bMl0pLCBwYXRjaC5sZW5ndGgxID0gcGF0Y2gudXRmOExlbmd0aDEpLCBtWzRdID09PSBcIlwiID8gKHBhdGNoLnN0YXJ0Mi0tLCBwYXRjaC51dGY4U3RhcnQyLS0sIHBhdGNoLmxlbmd0aDIgPSAxLCBwYXRjaC51dGY4TGVuZ3RoMiA9IDEpIDogbVs0XSA9PT0gXCIwXCIgPyAocGF0Y2gubGVuZ3RoMiA9IDAsIHBhdGNoLnV0ZjhMZW5ndGgyID0gMCkgOiAocGF0Y2guc3RhcnQyLS0sIHBhdGNoLnV0ZjhTdGFydDItLSwgcGF0Y2gudXRmOExlbmd0aDIgPSB0b0ludChtWzRdKSwgcGF0Y2gubGVuZ3RoMiA9IHBhdGNoLnV0ZjhMZW5ndGgyKSwgdGV4dFBvaW50ZXIrKzsgdGV4dFBvaW50ZXIgPCBsaW5lcy5sZW5ndGg7ICkge1xuICAgICAgY29uc3QgY3VycmVudExpbmUgPSBsaW5lc1t0ZXh0UG9pbnRlcl0sIHNpZ24gPSBjdXJyZW50TGluZS5jaGFyQXQoMCk7XG4gICAgICBpZiAoc2lnbiA9PT0gXCJAXCIpIGJyZWFrO1xuICAgICAgaWYgKHNpZ24gPT09IFwiXCIpIHtcbiAgICAgICAgdGV4dFBvaW50ZXIrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBsZXQgbGluZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpbmUgPSBkZWNvZGVVUkkoY3VycmVudExpbmUuc2xpY2UoMSkpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBlc2NhcGUgaW4gcGFyc2U6ICR7Y3VycmVudExpbmV9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCB1dGY4RGlmZiA9IGNvdW50VXRmOEJ5dGVzKGxpbmUpIC0gbGluZS5sZW5ndGg7XG4gICAgICBpZiAoc2lnbiA9PT0gXCItXCIpIHBhdGNoLmRpZmZzLnB1c2goW0RJRkZfREVMRVRFLCBsaW5lXSksIHBhdGNoLmxlbmd0aDEgLT0gdXRmOERpZmY7XG4gICAgICBlbHNlIGlmIChzaWduID09PSBcIitcIikgcGF0Y2guZGlmZnMucHVzaChbRElGRl9JTlNFUlQsIGxpbmVdKSwgcGF0Y2gubGVuZ3RoMiAtPSB1dGY4RGlmZjtcbiAgICAgIGVsc2UgaWYgKHNpZ24gPT09IFwiIFwiKSBwYXRjaC5kaWZmcy5wdXNoKFtESUZGX0VRVUFMLCBsaW5lXSksIHBhdGNoLmxlbmd0aDEgLT0gdXRmOERpZmYsIHBhdGNoLmxlbmd0aDIgLT0gdXRmOERpZmY7XG4gICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXRjaCBtb2RlIFwiJHtzaWdufVwiIGluOiAke2xpbmV9YCk7XG4gICAgICB0ZXh0UG9pbnRlcisrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0Y2hlcztcbn1cbmZ1bmN0aW9uIHRvSW50KG51bSkge1xuICByZXR1cm4gcGFyc2VJbnQobnVtLCAxMCk7XG59XG5jb25zdCBJU19VRE9JTkcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgSVNfUkVET0lORyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gd2l0aFVuZG9pbmcoZWRpdG9yLCBmbikge1xuICBjb25zdCBwcmV2ID0gaXNVbmRvaW5nKGVkaXRvcik7XG4gIElTX1VET0lORy5zZXQoZWRpdG9yLCAhMCksIGZuKCksIElTX1VET0lORy5zZXQoZWRpdG9yLCBwcmV2KTtcbn1cbmZ1bmN0aW9uIGlzVW5kb2luZyhlZGl0b3IpIHtcbiAgcmV0dXJuIElTX1VET0lORy5nZXQoZWRpdG9yKSA/PyAhMTtcbn1cbmZ1bmN0aW9uIHNldElzVW5kb2luZyhlZGl0b3IsIGlzVW5kb2luZzIpIHtcbiAgSVNfVURPSU5HLnNldChlZGl0b3IsIGlzVW5kb2luZzIpO1xufVxuZnVuY3Rpb24gd2l0aFJlZG9pbmcoZWRpdG9yLCBmbikge1xuICBjb25zdCBwcmV2ID0gaXNSZWRvaW5nKGVkaXRvcik7XG4gIElTX1JFRE9JTkcuc2V0KGVkaXRvciwgITApLCBmbigpLCBJU19SRURPSU5HLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNSZWRvaW5nKGVkaXRvcikge1xuICByZXR1cm4gSVNfUkVET0lORy5nZXQoZWRpdG9yKSA/PyAhMTtcbn1cbmZ1bmN0aW9uIHNldElzUmVkb2luZyhlZGl0b3IsIGlzUmVkb2luZzIpIHtcbiAgSVNfUkVET0lORy5zZXQoZWRpdG9yLCBpc1JlZG9pbmcyKTtcbn1cbmNvbnN0IGRlYnVnJGkgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhVbmRvUmVkb1wiKSwgU0FWSU5HID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIFJFTU9URV9QQVRDSEVTID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIFVORE9fU1RFUF9MSU1JVCA9IDFlMywgaXNTYXZpbmcgPSAoZWRpdG9yKSA9PiB7XG4gIGNvbnN0IHN0YXRlID0gU0FWSU5HLmdldChlZGl0b3IpO1xuICByZXR1cm4gc3RhdGUgPT09IHZvaWQgMCA/ICEwIDogc3RhdGU7XG59LCBnZXRSZW1vdGVQYXRjaGVzID0gKGVkaXRvcikgPT4gKFJFTU9URV9QQVRDSEVTLmdldChlZGl0b3IpIHx8IFJFTU9URV9QQVRDSEVTLnNldChlZGl0b3IsIFtdKSwgUkVNT1RFX1BBVENIRVMuZ2V0KGVkaXRvcikgfHwgW10pO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFVuZG9SZWRvKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGVkaXRvckFjdG9yLFxuICAgIGJsb2NrU2NoZW1hVHlwZVxuICB9ID0gb3B0aW9ucztcbiAgcmV0dXJuIChlZGl0b3IpID0+IHtcbiAgICBsZXQgcHJldmlvdXNTbmFwc2hvdCA9IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgYmxvY2tTY2hlbWFUeXBlLm5hbWUpO1xuICAgIGNvbnN0IHJlbW90ZVBhdGNoZXMgPSBnZXRSZW1vdGVQYXRjaGVzKGVkaXRvcik7XG4gICAgb3B0aW9ucy5zdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgICAgZGVidWckaShcIlN1YnNjcmliaW5nIHRvIHBhdGNoZXNcIik7XG4gICAgICBjb25zdCBzdWIgPSBlZGl0b3JBY3Rvci5vbihcInBhdGNoZXNcIiwgKHtcbiAgICAgICAgcGF0Y2hlcyxcbiAgICAgICAgc25hcHNob3RcbiAgICAgIH0pID0+IHtcbiAgICAgICAgbGV0IHJlc2V0ID0gITE7XG4gICAgICAgIHBhdGNoZXMuZm9yRWFjaCgocGF0Y2gpID0+IHtcbiAgICAgICAgICBpZiAoIXJlc2V0ICYmIHBhdGNoLm9yaWdpbiAhPT0gXCJsb2NhbFwiICYmIHJlbW90ZVBhdGNoZXMpIHtcbiAgICAgICAgICAgIGlmIChwYXRjaC50eXBlID09PSBcInVuc2V0XCIgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgZGVidWckaShcIlNvbWVvbmUgZWxzZSBjbGVhcmVkIHRoZSBjb250ZW50LCByZXNldHRpbmcgdW5kby9yZWRvIGhpc3RvcnlcIiksIGVkaXRvci5oaXN0b3J5ID0ge1xuICAgICAgICAgICAgICAgIHVuZG9zOiBbXSxcbiAgICAgICAgICAgICAgICByZWRvczogW11cbiAgICAgICAgICAgICAgfSwgcmVtb3RlUGF0Y2hlcy5zcGxpY2UoMCwgcmVtb3RlUGF0Y2hlcy5sZW5ndGgpLCBTQVZJTkcuc2V0KGVkaXRvciwgITApLCByZXNldCA9ICEwO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdGVQYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICBwYXRjaCxcbiAgICAgICAgICAgICAgdGltZTogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgIHNuYXBzaG90LFxuICAgICAgICAgICAgICBwcmV2aW91c1NuYXBzaG90XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLCBwcmV2aW91c1NuYXBzaG90ID0gc25hcHNob3Q7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRlYnVnJGkoXCJVbnN1YnNjcmliaW5nIHRvIHBhdGNoZXNcIiksIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgfTtcbiAgICB9KSwgZWRpdG9yLmhpc3RvcnkgPSB7XG4gICAgICB1bmRvczogW10sXG4gICAgICByZWRvczogW11cbiAgICB9O1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGx5OiBhcHBseTJcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3IuYXBwbHkgPSAob3ApID0+IHtcbiAgICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gICAgICB9KSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzVW5kb2luZyhlZGl0b3IpIHx8IGlzUmVkb2luZyhlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgb3BlcmF0aW9ucyxcbiAgICAgICAgaGlzdG9yeVxuICAgICAgfSA9IGVkaXRvciwge1xuICAgICAgICB1bmRvc1xuICAgICAgfSA9IGhpc3RvcnksIHN0ZXAgPSB1bmRvc1t1bmRvcy5sZW5ndGggLSAxXSwgbGFzdE9wID0gc3RlcCAmJiBzdGVwLm9wZXJhdGlvbnMgJiYgc3RlcC5vcGVyYXRpb25zW3N0ZXAub3BlcmF0aW9ucy5sZW5ndGggLSAxXSwgb3ZlcndyaXRlID0gc2hvdWxkT3ZlcndyaXRlKG9wLCBsYXN0T3ApLCBzYXZlID0gaXNTYXZpbmcoZWRpdG9yKTtcbiAgICAgIGxldCBtZXJnZSA9ICEwO1xuICAgICAgaWYgKHNhdmUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPyBvcGVyYXRpb25zLmxlbmd0aCA9PT0gMCAmJiAobWVyZ2UgPSBzaG91bGRNZXJnZShvcCwgbGFzdE9wKSB8fCBvdmVyd3JpdGUpIDogbWVyZ2UgPSAhMSwgc3RlcCAmJiBtZXJnZSlcbiAgICAgICAgICBzdGVwLm9wZXJhdGlvbnMucHVzaChvcCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG5ld1N0ZXAgPSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zOiBbLi4uZWRpdG9yLnNlbGVjdGlvbiA9PT0gbnVsbCA/IFtdIDogW2NyZWF0ZVNlbGVjdE9wZXJhdGlvbihlZGl0b3IpXSwgb3BdLFxuICAgICAgICAgICAgdGltZXN0YW1wOiAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKVxuICAgICAgICAgIH07XG4gICAgICAgICAgdW5kb3MucHVzaChuZXdTdGVwKSwgZGVidWckaShcIkNyZWF0ZWQgbmV3IHVuZG8gc3RlcFwiLCBzdGVwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgdW5kb3MubGVuZ3RoID4gVU5ET19TVEVQX0xJTUlUOyApXG4gICAgICAgICAgdW5kb3Muc2hpZnQoKTtcbiAgICAgICAgc2hvdWxkQ2xlYXIob3ApICYmIChoaXN0b3J5LnJlZG9zID0gW10pO1xuICAgICAgfVxuICAgICAgYXBwbHkyKG9wKTtcbiAgICB9LCBlZGl0b3IudW5kbyA9ICgpID0+IHtcbiAgICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gICAgICB9KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3Qge1xuICAgICAgICB1bmRvc1xuICAgICAgfSA9IGVkaXRvci5oaXN0b3J5O1xuICAgICAgaWYgKHVuZG9zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IHVuZG9zW3VuZG9zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZGVidWckaShcIlVuZG9pbmdcIiwgc3RlcCksIHN0ZXAub3BlcmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3Qgb3RoZXJQYXRjaGVzID0gcmVtb3RlUGF0Y2hlcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0udGltZSA+PSBzdGVwLnRpbWVzdGFtcCk7XG4gICAgICAgICAgbGV0IHRyYW5zZm9ybWVkT3BlcmF0aW9ucyA9IHN0ZXAub3BlcmF0aW9ucztcbiAgICAgICAgICBvdGhlclBhdGNoZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdHJhbnNmb3JtZWRPcGVyYXRpb25zID0gZmxhdHRlbih0cmFuc2Zvcm1lZE9wZXJhdGlvbnMubWFwKChvcCkgPT4gdHJhbnNmb3JtT3BlcmF0aW9uKGVkaXRvciwgaXRlbS5wYXRjaCwgb3AsIGl0ZW0uc25hcHNob3QsIGl0ZW0ucHJldmlvdXNTbmFwc2hvdCkpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCByZXZlcnNlZE9wZXJhdGlvbnMgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMubWFwKE9wZXJhdGlvbi5pbnZlcnNlKS5yZXZlcnNlKCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHdpdGhVbmRvaW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdpdGhvdXRTYXZpbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXZlcnNlZE9wZXJhdGlvbnMuZm9yRWFjaCgob3ApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmFwcGx5KG9wKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLCBlZGl0b3Iubm9ybWFsaXplKCksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVidWckaShcIkNvdWxkIG5vdCBwZXJmb3JtIHVuZG8gc3RlcFwiLCBlcnIpLCByZW1vdGVQYXRjaGVzLnNwbGljZSgwLCByZW1vdGVQYXRjaGVzLmxlbmd0aCksIFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKSwgZWRpdG9yLmhpc3RvcnkgPSB7XG4gICAgICAgICAgICAgIHVuZG9zOiBbXSxcbiAgICAgICAgICAgICAgcmVkb3M6IFtdXG4gICAgICAgICAgICB9LCBTQVZJTkcuc2V0KGVkaXRvciwgITApLCBzZXRJc1VuZG9pbmcoZWRpdG9yLCAhMSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlZGl0b3IuaGlzdG9yeS5yZWRvcy5wdXNoKHN0ZXApLCBlZGl0b3IuaGlzdG9yeS51bmRvcy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIGVkaXRvci5yZWRvID0gKCkgPT4ge1xuICAgICAgaWYgKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgICAgIH0pKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCB7XG4gICAgICAgIHJlZG9zXG4gICAgICB9ID0gZWRpdG9yLmhpc3Rvcnk7XG4gICAgICBpZiAocmVkb3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzdGVwID0gcmVkb3NbcmVkb3MubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChkZWJ1ZyRpKFwiUmVkb2luZ1wiLCBzdGVwKSwgc3RlcC5vcGVyYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBvdGhlclBhdGNoZXMgPSByZW1vdGVQYXRjaGVzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50aW1lID49IHN0ZXAudGltZXN0YW1wKTtcbiAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRPcGVyYXRpb25zID0gc3RlcC5vcGVyYXRpb25zO1xuICAgICAgICAgIG90aGVyUGF0Y2hlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbnMgPSBmbGF0dGVuKHRyYW5zZm9ybWVkT3BlcmF0aW9ucy5tYXAoKG9wKSA9PiB0cmFuc2Zvcm1PcGVyYXRpb24oZWRpdG9yLCBpdGVtLnBhdGNoLCBvcCwgaXRlbS5zbmFwc2hvdCwgaXRlbS5wcmV2aW91c1NuYXBzaG90KSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICB3aXRoUmVkb2luZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgICB3aXRob3V0U2F2aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRPcGVyYXRpb25zLmZvckVhY2goKG9wKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5hcHBseShvcCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSwgZWRpdG9yLm5vcm1hbGl6ZSgpLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGRlYnVnJGkoXCJDb3VsZCBub3QgcGVyZm9ybSByZWRvIHN0ZXBcIiwgZXJyKSwgcmVtb3RlUGF0Y2hlcy5zcGxpY2UoMCwgcmVtb3RlUGF0Y2hlcy5sZW5ndGgpLCBUcmFuc2Zvcm1zLmRlc2VsZWN0KGVkaXRvciksIGVkaXRvci5oaXN0b3J5ID0ge1xuICAgICAgICAgICAgICB1bmRvczogW10sXG4gICAgICAgICAgICAgIHJlZG9zOiBbXVxuICAgICAgICAgICAgfSwgU0FWSU5HLnNldChlZGl0b3IsICEwKSwgc2V0SXNSZWRvaW5nKGVkaXRvciwgITEpLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWRpdG9yLmhpc3RvcnkudW5kb3MucHVzaChzdGVwKSwgZWRpdG9yLmhpc3RvcnkucmVkb3MucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1PcGVyYXRpb24oZWRpdG9yLCBwYXRjaCwgb3BlcmF0aW9uLCBzbmFwc2hvdCwgcHJldmlvdXNTbmFwc2hvdCkge1xuICBjb25zdCB0cmFuc2Zvcm1lZE9wZXJhdGlvbiA9IHtcbiAgICAuLi5vcGVyYXRpb25cbiAgfTtcbiAgaWYgKHBhdGNoLnR5cGUgPT09IFwiaW5zZXJ0XCIgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBpbnNlcnRCbG9ja0luZGV4ID0gKHNuYXBzaG90IHx8IFtdKS5maW5kSW5kZXgoKGJsaykgPT4gaXNFcXVhbCh7XG4gICAgICBfa2V5OiBibGsuX2tleVxuICAgIH0sIHBhdGNoLnBhdGhbMF0pKTtcbiAgICByZXR1cm4gZGVidWckaShgQWRqdXN0aW5nIGJsb2NrIHBhdGggKCske3BhdGNoLml0ZW1zLmxlbmd0aH0pIGZvciAnJHt0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlfScgb3BlcmF0aW9uIGFuZCBwYXRjaCAnJHtwYXRjaC50eXBlfSdgKSwgW2FkanVzdEJsb2NrUGF0aCh0cmFuc2Zvcm1lZE9wZXJhdGlvbiwgcGF0Y2guaXRlbXMubGVuZ3RoLCBpbnNlcnRCbG9ja0luZGV4KV07XG4gIH1cbiAgaWYgKHBhdGNoLnR5cGUgPT09IFwidW5zZXRcIiAmJiBwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHVuc2V0QmxvY2tJbmRleCA9IChwcmV2aW91c1NuYXBzaG90IHx8IFtdKS5maW5kSW5kZXgoKGJsaykgPT4gaXNFcXVhbCh7XG4gICAgICBfa2V5OiBibGsuX2tleVxuICAgIH0sIHBhdGNoLnBhdGhbMF0pKTtcbiAgICByZXR1cm4gXCJwYXRoXCIgaW4gdHJhbnNmb3JtZWRPcGVyYXRpb24gJiYgQXJyYXkuaXNBcnJheSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoKSAmJiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wYXRoWzBdID09PSB1bnNldEJsb2NrSW5kZXggPyAoZGVidWckaShcIlNraXBwaW5nIHRyYW5zZm9ybWF0aW9uIHRoYXQgdGFyZ2V0ZWQgcmVtb3ZlZCBibG9ja1wiKSwgW10pIDogW2FkanVzdEJsb2NrUGF0aCh0cmFuc2Zvcm1lZE9wZXJhdGlvbiwgLTEsIHVuc2V0QmxvY2tJbmRleCldO1xuICB9XG4gIGlmIChwYXRjaC50eXBlID09PSBcInVuc2V0XCIgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIGRlYnVnJGkoYEFkanVzdGluZyBzZWxlY3Rpb24gZm9yIHVuc2V0IGV2ZXJ5dGhpbmcgcGF0Y2ggYW5kICR7b3BlcmF0aW9uLnR5cGV9IG9wZXJhdGlvbmApLCBbXTtcbiAgaWYgKHBhdGNoLnR5cGUgPT09IFwiZGlmZk1hdGNoUGF0Y2hcIikge1xuICAgIGNvbnN0IG9wZXJhdGlvblRhcmdldEJsb2NrID0gZmluZE9wZXJhdGlvblRhcmdldEJsb2NrKGVkaXRvciwgdHJhbnNmb3JtZWRPcGVyYXRpb24pO1xuICAgIHJldHVybiAhb3BlcmF0aW9uVGFyZ2V0QmxvY2sgfHwgIWlzRXF1YWwoe1xuICAgICAgX2tleTogb3BlcmF0aW9uVGFyZ2V0QmxvY2suX2tleVxuICAgIH0sIHBhdGNoLnBhdGhbMF0pID8gW3RyYW5zZm9ybWVkT3BlcmF0aW9uXSA6IChwYXJzZShwYXRjaC52YWx1ZSkuZm9yRWFjaCgoZGlmZlBhdGNoKSA9PiB7XG4gICAgICBsZXQgYWRqdXN0T2Zmc2V0QnkgPSAwLCBjaGFuZ2VkT2Zmc2V0ID0gZGlmZlBhdGNoLnV0ZjhTdGFydDE7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGRpZmZzXG4gICAgICB9ID0gZGlmZlBhdGNoO1xuICAgICAgaWYgKGRpZmZzLmZvckVhY2goKGRpZmYyLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBbZGlmZlR5cGUsIHRleHRdID0gZGlmZjI7XG4gICAgICAgIGRpZmZUeXBlID09PSBESUZGX0lOU0VSVCA/IChhZGp1c3RPZmZzZXRCeSArPSB0ZXh0Lmxlbmd0aCwgY2hhbmdlZE9mZnNldCArPSB0ZXh0Lmxlbmd0aCkgOiBkaWZmVHlwZSA9PT0gRElGRl9ERUxFVEUgPyAoYWRqdXN0T2Zmc2V0QnkgLT0gdGV4dC5sZW5ndGgsIGNoYW5nZWRPZmZzZXQgLT0gdGV4dC5sZW5ndGgpIDogZGlmZlR5cGUgPT09IERJRkZfRVFVQUwgJiYgKGRpZmZzLnNsaWNlKGluZGV4KS5ldmVyeSgoW2RUeXBlXSkgPT4gZFR5cGUgPT09IERJRkZfRVFVQUwpIHx8IChjaGFuZ2VkT2Zmc2V0ICs9IHRleHQubGVuZ3RoKSk7XG4gICAgICB9KSwgdHJhbnNmb3JtZWRPcGVyYXRpb24udHlwZSA9PT0gXCJpbnNlcnRfdGV4dFwiICYmIGNoYW5nZWRPZmZzZXQgPCB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vZmZzZXQgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9mZnNldCArPSBhZGp1c3RPZmZzZXRCeSksIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgPT09IFwicmVtb3ZlX3RleHRcIiAmJiBjaGFuZ2VkT2Zmc2V0IDw9IHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9mZnNldCAtIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnRleHQubGVuZ3RoICYmICh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vZmZzZXQgKz0gYWRqdXN0T2Zmc2V0QnkpLCB0cmFuc2Zvcm1lZE9wZXJhdGlvbi50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIikge1xuICAgICAgICBjb25zdCBjdXJyZW50Rm9jdXMgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzPy5mb2N1cyA/IHtcbiAgICAgICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzLmZvY3VzXG4gICAgICAgIH0gOiB2b2lkIDAsIGN1cnJlbnRBbmNob3IgPSB0cmFuc2Zvcm1lZE9wZXJhdGlvbj8ucHJvcGVydGllcz8uYW5jaG9yID8ge1xuICAgICAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMuYW5jaG9yXG4gICAgICAgIH0gOiB2b2lkIDAsIG5ld0ZvY3VzID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/Lm5ld1Byb3BlcnRpZXM/LmZvY3VzID8ge1xuICAgICAgICAgIC4uLnRyYW5zZm9ybWVkT3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMuZm9jdXNcbiAgICAgICAgfSA6IHZvaWQgMCwgbmV3QW5jaG9yID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/Lm5ld1Byb3BlcnRpZXM/LmFuY2hvciA/IHtcbiAgICAgICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzLmFuY2hvclxuICAgICAgICB9IDogdm9pZCAwO1xuICAgICAgICAoY3VycmVudEZvY3VzICYmIGN1cnJlbnRBbmNob3IgfHwgbmV3Rm9jdXMgJiYgbmV3QW5jaG9yKSAmJiAoW2N1cnJlbnRGb2N1cywgY3VycmVudEFuY2hvciwgbmV3Rm9jdXMsIG5ld0FuY2hvcl0uZm9yRWFjaCgocG9pbnQpID0+IHtcbiAgICAgICAgICBwb2ludCAmJiBjaGFuZ2VkT2Zmc2V0IDwgcG9pbnQub2Zmc2V0ICYmIChwb2ludC5vZmZzZXQgKz0gYWRqdXN0T2Zmc2V0QnkpO1xuICAgICAgICB9KSwgY3VycmVudEZvY3VzICYmIGN1cnJlbnRBbmNob3IgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgZm9jdXM6IGN1cnJlbnRGb2N1cyxcbiAgICAgICAgICBhbmNob3I6IGN1cnJlbnRBbmNob3JcbiAgICAgICAgfSksIG5ld0ZvY3VzICYmIG5ld0FuY2hvciAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcyA9IHtcbiAgICAgICAgICBmb2N1czogbmV3Rm9jdXMsXG4gICAgICAgICAgYW5jaG9yOiBuZXdBbmNob3JcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pLCBbdHJhbnNmb3JtZWRPcGVyYXRpb25dKTtcbiAgfVxuICByZXR1cm4gW3RyYW5zZm9ybWVkT3BlcmF0aW9uXTtcbn1cbmZ1bmN0aW9uIGFkanVzdEJsb2NrUGF0aChvcGVyYXRpb24sIGxldmVsLCBibG9ja0luZGV4KSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVkT3BlcmF0aW9uID0ge1xuICAgIC4uLm9wZXJhdGlvblxuICB9O1xuICBpZiAoYmxvY2tJbmRleCA+PSAwICYmIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgIT09IFwic2V0X3NlbGVjdGlvblwiICYmIEFycmF5LmlzQXJyYXkodHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aCkgJiYgdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aFswXSA+PSBibG9ja0luZGV4ICsgbGV2ZWwgJiYgdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aFswXSArIGxldmVsID4gLTEpIHtcbiAgICBjb25zdCBuZXdQYXRoID0gW3RyYW5zZm9ybWVkT3BlcmF0aW9uLnBhdGhbMF0gKyBsZXZlbCwgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aC5zbGljZSgxKV07XG4gICAgdHJhbnNmb3JtZWRPcGVyYXRpb24ucGF0aCA9IG5ld1BhdGg7XG4gIH1cbiAgaWYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiKSB7XG4gICAgY29uc3QgY3VycmVudEZvY3VzID0gdHJhbnNmb3JtZWRPcGVyYXRpb24ucHJvcGVydGllcz8uZm9jdXMgPyB7XG4gICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzLmZvY3VzXG4gICAgfSA6IHZvaWQgMCwgY3VycmVudEFuY2hvciA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5wcm9wZXJ0aWVzPy5hbmNob3IgPyB7XG4gICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5wcm9wZXJ0aWVzLmFuY2hvclxuICAgIH0gOiB2b2lkIDAsIG5ld0ZvY3VzID0gdHJhbnNmb3JtZWRPcGVyYXRpb24/Lm5ld1Byb3BlcnRpZXM/LmZvY3VzID8ge1xuICAgICAgLi4udHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcy5mb2N1c1xuICAgIH0gOiB2b2lkIDAsIG5ld0FuY2hvciA9IHRyYW5zZm9ybWVkT3BlcmF0aW9uPy5uZXdQcm9wZXJ0aWVzPy5hbmNob3IgPyB7XG4gICAgICAuLi50cmFuc2Zvcm1lZE9wZXJhdGlvbi5uZXdQcm9wZXJ0aWVzLmFuY2hvclxuICAgIH0gOiB2b2lkIDA7XG4gICAgKGN1cnJlbnRGb2N1cyAmJiBjdXJyZW50QW5jaG9yIHx8IG5ld0ZvY3VzICYmIG5ld0FuY2hvcikgJiYgKFtjdXJyZW50Rm9jdXMsIGN1cnJlbnRBbmNob3IsIG5ld0ZvY3VzLCBuZXdBbmNob3JdLmZvckVhY2goKHBvaW50KSA9PiB7XG4gICAgICBwb2ludCAmJiBwb2ludC5wYXRoWzBdID49IGJsb2NrSW5kZXggKyBsZXZlbCAmJiBwb2ludC5wYXRoWzBdICsgbGV2ZWwgPiAtMSAmJiAocG9pbnQucGF0aCA9IFtwb2ludC5wYXRoWzBdICsgbGV2ZWwsIC4uLnBvaW50LnBhdGguc2xpY2UoMSldKTtcbiAgICB9KSwgY3VycmVudEZvY3VzICYmIGN1cnJlbnRBbmNob3IgJiYgKHRyYW5zZm9ybWVkT3BlcmF0aW9uLnByb3BlcnRpZXMgPSB7XG4gICAgICBmb2N1czogY3VycmVudEZvY3VzLFxuICAgICAgYW5jaG9yOiBjdXJyZW50QW5jaG9yXG4gICAgfSksIG5ld0ZvY3VzICYmIG5ld0FuY2hvciAmJiAodHJhbnNmb3JtZWRPcGVyYXRpb24ubmV3UHJvcGVydGllcyA9IHtcbiAgICAgIGZvY3VzOiBuZXdGb2N1cyxcbiAgICAgIGFuY2hvcjogbmV3QW5jaG9yXG4gICAgfSkpO1xuICB9XG4gIHJldHVybiB0cmFuc2Zvcm1lZE9wZXJhdGlvbjtcbn1cbmNvbnN0IHNob3VsZE1lcmdlID0gKG9wLCBwcmV2KSA9PiAhIShvcC50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiB8fCBwcmV2ICYmIG9wLnR5cGUgPT09IFwiaW5zZXJ0X3RleHRcIiAmJiBwcmV2LnR5cGUgPT09IFwiaW5zZXJ0X3RleHRcIiAmJiBvcC5vZmZzZXQgPT09IHByZXYub2Zmc2V0ICsgcHJldi50ZXh0Lmxlbmd0aCAmJiBQYXRoLmVxdWFscyhvcC5wYXRoLCBwcmV2LnBhdGgpICYmIG9wLnRleHQgIT09IFwiIFwiIHx8IHByZXYgJiYgb3AudHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiICYmIHByZXYudHlwZSA9PT0gXCJyZW1vdmVfdGV4dFwiICYmIG9wLm9mZnNldCArIG9wLnRleHQubGVuZ3RoID09PSBwcmV2Lm9mZnNldCAmJiBQYXRoLmVxdWFscyhvcC5wYXRoLCBwcmV2LnBhdGgpKSwgc2hvdWxkT3ZlcndyaXRlID0gKG9wLCBwcmV2KSA9PiAhIShwcmV2ICYmIG9wLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiICYmIHByZXYudHlwZSA9PT0gXCJzZXRfc2VsZWN0aW9uXCIpLCBzaG91bGRDbGVhciA9IChvcCkgPT4gb3AudHlwZSAhPT0gXCJzZXRfc2VsZWN0aW9uXCI7XG5mdW5jdGlvbiB3aXRob3V0U2F2aW5nKGVkaXRvciwgZm4pIHtcbiAgY29uc3QgcHJldiA9IGlzU2F2aW5nKGVkaXRvcik7XG4gIFNBVklORy5zZXQoZWRpdG9yLCAhMSksIGZuKCksIFNBVklORy5zZXQoZWRpdG9yLCBwcmV2KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdE9wZXJhdGlvbihlZGl0b3IpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcInNldF9zZWxlY3Rpb25cIixcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAuLi5lZGl0b3Iuc2VsZWN0aW9uXG4gICAgfSxcbiAgICBuZXdQcm9wZXJ0aWVzOiB7XG4gICAgICAuLi5lZGl0b3Iuc2VsZWN0aW9uXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZmluZE9wZXJhdGlvblRhcmdldEJsb2NrKGVkaXRvciwgb3BlcmF0aW9uKSB7XG4gIGxldCBibG9jaztcbiAgcmV0dXJuIG9wZXJhdGlvbi50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiAmJiBlZGl0b3Iuc2VsZWN0aW9uID8gYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdXSA6IFwicGF0aFwiIGluIG9wZXJhdGlvbiAmJiAoYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dKSwgYmxvY2s7XG59XG5jb25zdCBzeW5jVmFsdWVDYWxsYmFjayA9ICh7XG4gIHNlbmRCYWNrLFxuICBpbnB1dFxufSkgPT4ge1xuICB1cGRhdGVWYWx1ZSh7XG4gICAgY29udGV4dDogaW5wdXQuY29udGV4dCxcbiAgICBzZW5kQmFjayxcbiAgICBzbGF0ZUVkaXRvcjogaW5wdXQuc2xhdGVFZGl0b3IsXG4gICAgdmFsdWU6IGlucHV0LnZhbHVlLFxuICAgIHN0cmVhbUJsb2NrczogaW5wdXQuc3RyZWFtQmxvY2tzXG4gIH0pO1xufSwgc3luY1ZhbHVlTG9naWMgPSBmcm9tQ2FsbGJhY2soc3luY1ZhbHVlQ2FsbGJhY2spLCBzeW5jTWFjaGluZSA9IHNldHVwKHtcbiAgdHlwZXM6IHtcbiAgICBjb250ZXh0OiB7fSxcbiAgICBpbnB1dDoge30sXG4gICAgZXZlbnRzOiB7fSxcbiAgICBlbWl0dGVkOiB7fVxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgXCJhc3NpZ24gaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIjogYXNzaWduKHtcbiAgICAgIGluaXRpYWxWYWx1ZVN5bmNlZDogITBcbiAgICB9KSxcbiAgICBcImFzc2lnbiByZWFkT25seVwiOiBhc3NpZ24oe1xuICAgICAgcmVhZE9ubHk6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwidXBkYXRlIHJlYWRPbmx5XCIpLCBldmVudC5yZWFkT25seSlcbiAgICB9KSxcbiAgICBcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nVmFsdWU6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwidXBkYXRlIHZhbHVlXCIpLCBldmVudC52YWx1ZSlcbiAgICB9KSxcbiAgICBcImNsZWFyIHBlbmRpbmcgdmFsdWVcIjogYXNzaWduKHtcbiAgICAgIHBlbmRpbmdWYWx1ZTogdm9pZCAwXG4gICAgfSksXG4gICAgXCJhc3NpZ24gcHJldmlvdXMgdmFsdWVcIjogYXNzaWduKHtcbiAgICAgIHByZXZpb3VzVmFsdWU6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwiZG9uZSBzeW5jaW5nXCIpLCBldmVudC52YWx1ZSlcbiAgICB9KSxcbiAgICBcImVtaXQgZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIjogZW1pdCh7XG4gICAgICB0eXBlOiBcImRvbmUgc3luY2luZyBpbml0aWFsIHZhbHVlXCJcbiAgICB9KVxuICB9LFxuICBndWFyZHM6IHtcbiAgICBcImluaXRpYWwgdmFsdWUgc3luY2VkXCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gY29udGV4dC5pbml0aWFsVmFsdWVTeW5jZWQsXG4gICAgXCJpcyBidXN5XCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gIWNvbnRleHQucmVhZE9ubHkgJiYgKGNvbnRleHQuaXNQcm9jZXNzaW5nTG9jYWxDaGFuZ2VzIHx8IChpc0NoYW5naW5nUmVtb3RlbHkoY29udGV4dC5zbGF0ZUVkaXRvcikgPz8gITEpKSxcbiAgICBcInZhbHVlIGNoYW5nZWQgd2hpbGUgc3luY2luZ1wiOiAoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGV2ZW50XG4gICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBcImRvbmUgc3luY2luZ1wiKSwgY29udGV4dC5wZW5kaW5nVmFsdWUgIT09IGV2ZW50LnZhbHVlKSxcbiAgICBcInBlbmRpbmcgdmFsdWUgZXF1YWxzIHByZXZpb3VzIHZhbHVlXCI6ICh7XG4gICAgICBjb250ZXh0XG4gICAgfSkgPT4gIShjb250ZXh0LnByZXZpb3VzVmFsdWUgPT09IHZvaWQgMCAmJiBjb250ZXh0LnBlbmRpbmdWYWx1ZSA9PT0gdm9pZCAwKSAmJiBpc0VxdWFsKGNvbnRleHQucGVuZGluZ1ZhbHVlLCBjb250ZXh0LnByZXZpb3VzVmFsdWUpXG4gIH0sXG4gIGFjdG9yczoge1xuICAgIFwic3luYyB2YWx1ZVwiOiBzeW5jVmFsdWVMb2dpY1xuICB9XG59KS5jcmVhdGVNYWNoaW5lKHtcbiAgaWQ6IFwic3luY1wiLFxuICBjb250ZXh0OiAoe1xuICAgIGlucHV0XG4gIH0pID0+ICh7XG4gICAgaW5pdGlhbFZhbHVlU3luY2VkOiAhMSxcbiAgICBpc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXM6ICExLFxuICAgIGtleUdlbmVyYXRvcjogaW5wdXQua2V5R2VuZXJhdG9yLFxuICAgIHNjaGVtYTogaW5wdXQuc2NoZW1hLFxuICAgIHJlYWRPbmx5OiBpbnB1dC5yZWFkT25seSxcbiAgICBzbGF0ZUVkaXRvcjogaW5wdXQuc2xhdGVFZGl0b3IsXG4gICAgcGVuZGluZ1ZhbHVlOiB2b2lkIDAsXG4gICAgcHJldmlvdXNWYWx1ZTogdm9pZCAwXG4gIH0pLFxuICBvbjoge1xuICAgIFwiaGFzIHBlbmRpbmcgcGF0Y2hlc1wiOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICBpc1Byb2Nlc3NpbmdMb2NhbENoYW5nZXM6ICEwXG4gICAgICB9KVxuICAgIH0sXG4gICAgbXV0YXRpb246IHtcbiAgICAgIGFjdGlvbnM6IGFzc2lnbih7XG4gICAgICAgIGlzUHJvY2Vzc2luZ0xvY2FsQ2hhbmdlczogITFcbiAgICAgIH0pXG4gICAgfSxcbiAgICBcInVwZGF0ZSByZWFkT25seVwiOiB7XG4gICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcmVhZE9ubHlcIl1cbiAgICB9XG4gIH0sXG4gIHR5cGU6IFwicGFyYWxsZWxcIixcbiAgc3RhdGVzOiB7XG4gICAgXCJzZXR0aW5nIHVwXCI6IHtcbiAgICAgIGluaXRpYWw6IFwic3luY2luZyBpbml0aWFsIHZhbHVlXCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgXCJzeW5jaW5nIGluaXRpYWwgdmFsdWVcIjoge1xuICAgICAgICAgIGFsd2F5czoge1xuICAgICAgICAgICAgZ3VhcmQ6IFwiaW5pdGlhbCB2YWx1ZSBzeW5jZWRcIixcbiAgICAgICAgICAgIHRhcmdldDogXCJkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRvbmUgc3luY2luZyBpbml0aWFsIHZhbHVlXCI6IHtcbiAgICAgICAgICBlbnRyeTogW1wiZW1pdCBkb25lIHN5bmNpbmcgaW5pdGlhbCB2YWx1ZVwiXSxcbiAgICAgICAgICB0eXBlOiBcImZpbmFsXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3luY2luZzoge1xuICAgICAgaW5pdGlhbDogXCJpZGxlXCIsXG4gICAgICBzdGF0ZXM6IHtcbiAgICAgICAgaWRsZToge1xuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBcInVwZGF0ZSB2YWx1ZVwiOiBbe1xuICAgICAgICAgICAgICBndWFyZDogXCJpcyBidXN5XCIsXG4gICAgICAgICAgICAgIHRhcmdldDogXCJidXN5XCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCJdXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHRhcmdldDogXCJzeW5jaW5nXCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImFzc2lnbiBwZW5kaW5nIHZhbHVlXCJdXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYnVzeToge1xuICAgICAgICAgIGFmdGVyOiB7XG4gICAgICAgICAgICAxZTM6IFt7XG4gICAgICAgICAgICAgIGd1YXJkOiBcImlzIGJ1c3lcIixcbiAgICAgICAgICAgICAgcmVlbnRlcjogITBcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBcInN5bmNpbmdcIlxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBcInVwZGF0ZSB2YWx1ZVwiOiBbe1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJhc3NpZ24gcGVuZGluZyB2YWx1ZVwiXVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN5bmNpbmc6IHtcbiAgICAgICAgICBhbHdheXM6IHtcbiAgICAgICAgICAgIGd1YXJkOiBcInBlbmRpbmcgdmFsdWUgZXF1YWxzIHByZXZpb3VzIHZhbHVlXCIsXG4gICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiY2xlYXIgcGVuZGluZyB2YWx1ZVwiLCBcImFzc2lnbiBpbml0aWFsIHZhbHVlIHN5bmNlZFwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW52b2tlOiB7XG4gICAgICAgICAgICBzcmM6IFwic3luYyB2YWx1ZVwiLFxuICAgICAgICAgICAgaWQ6IFwic3luYyB2YWx1ZVwiLFxuICAgICAgICAgICAgaW5wdXQ6ICh7XG4gICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICBrZXlHZW5lcmF0b3I6IGNvbnRleHQua2V5R2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWU6IGNvbnRleHQucHJldmlvdXNWYWx1ZSxcbiAgICAgICAgICAgICAgICByZWFkT25seTogY29udGV4dC5yZWFkT25seSxcbiAgICAgICAgICAgICAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHNsYXRlRWRpdG9yOiBjb250ZXh0LnNsYXRlRWRpdG9yLFxuICAgICAgICAgICAgICBzdHJlYW1CbG9ja3M6ICFjb250ZXh0LmluaXRpYWxWYWx1ZVN5bmNlZCxcbiAgICAgICAgICAgICAgdmFsdWU6IGNvbnRleHQucGVuZGluZ1ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwidXBkYXRlIHZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIHBlbmRpbmcgdmFsdWVcIl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRjaDoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImludmFsaWQgdmFsdWVcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInZhbHVlIGNoYW5nZWRcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRvbmUgc3luY2luZ1wiOiBbe1xuICAgICAgICAgICAgICBndWFyZDogXCJ2YWx1ZSBjaGFuZ2VkIHdoaWxlIHN5bmNpbmdcIixcbiAgICAgICAgICAgICAgYWN0aW9uczogW1wiYXNzaWduIHByZXZpb3VzIHZhbHVlXCIsIFwiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCJdLFxuICAgICAgICAgICAgICByZWVudGVyOiAhMFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICB0YXJnZXQ6IFwiaWRsZVwiLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbXCJjbGVhciBwZW5kaW5nIHZhbHVlXCIsIFwiYXNzaWduIHByZXZpb3VzIHZhbHVlXCIsIFwiYXNzaWduIGluaXRpYWwgdmFsdWUgc3luY2VkXCJdXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSksIGRlYnVnJGggPSBkZWJ1Z1dpdGhOYW1lKFwiaG9vazp1c2VTeW5jVmFsdWVcIik7XG5hc3luYyBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh7XG4gIGNvbnRleHQsXG4gIHNlbmRCYWNrLFxuICBzbGF0ZUVkaXRvcixcbiAgc3RyZWFtQmxvY2tzLFxuICB2YWx1ZVxufSkge1xuICBsZXQgaXNDaGFuZ2VkID0gITEsIGlzVmFsaWQgPSAhMDtcbiAgY29uc3QgaGFkU2VsZWN0aW9uID0gISFzbGF0ZUVkaXRvci5zZWxlY3Rpb247XG4gIGlmICgoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCkgJiYgKGRlYnVnJGgoXCJWYWx1ZSBpcyBlbXB0eVwiKSwgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgIHdpdGhvdXRTYXZpbmcoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgIHdpdGhvdXRQYXRjaGluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICBoYWRTZWxlY3Rpb24gJiYgVHJhbnNmb3Jtcy5kZXNlbGVjdChzbGF0ZUVkaXRvcik7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuTGVuZ3RoID0gc2xhdGVFZGl0b3IuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBzbGF0ZUVkaXRvci5jaGlsZHJlbi5mb3JFYWNoKChfLCBpbmRleCkgPT4ge1xuICAgICAgICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoc2xhdGVFZGl0b3IsIHtcbiAgICAgICAgICAgIGF0OiBbY2hpbGRyZW5MZW5ndGggLSAxIC0gaW5kZXhdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBzbGF0ZUVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgICAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgYXQ6IFswXVxuICAgICAgICB9KSwgaGFkU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBbMCwgMF0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pLCBpc0NoYW5nZWQgPSAhMCksIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBzbGF0ZVZhbHVlRnJvbVByb3BzID0gdG9TbGF0ZVZhbHVlKHZhbHVlLCB7XG4gICAgICBzY2hlbWFUeXBlczogY29udGV4dC5zY2hlbWFcbiAgICB9KTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICB3aXRoUmVtb3RlQ2hhbmdlcyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIHdpdGhvdXRQYXRjaGluZyhzbGF0ZUVkaXRvciwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW5MZW5ndGggPSBzbGF0ZUVkaXRvci5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoc2xhdGVWYWx1ZUZyb21Qcm9wcy5sZW5ndGggPCBjaGlsZHJlbkxlbmd0aCkge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY2hpbGRyZW5MZW5ndGggLSAxOyBpID4gc2xhdGVWYWx1ZUZyb21Qcm9wcy5sZW5ndGggLSAxOyBpLS0pXG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgYXQ6IFtpXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpc0NoYW5nZWQgPSAhMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgW2N1cnJlbnRCbG9jaywgY3VycmVudEJsb2NrSW5kZXhdIG9mIGdldEJsb2Nrcyh7XG4gICAgICAgICAgICAgIHNsYXRlVmFsdWU6IHNsYXRlVmFsdWVGcm9tUHJvcHMsXG4gICAgICAgICAgICAgIHN0cmVhbUJsb2Nrc1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGJsb2NrQ2hhbmdlZCxcbiAgICAgICAgICAgICAgICBibG9ja1ZhbGlkXG4gICAgICAgICAgICAgIH0gPSBzeW5jQmxvY2soe1xuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgc2VuZEJhY2ssXG4gICAgICAgICAgICAgICAgYmxvY2s6IGN1cnJlbnRCbG9jayxcbiAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudEJsb2NrSW5kZXgsXG4gICAgICAgICAgICAgICAgc2xhdGVFZGl0b3IsXG4gICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlzQ2hhbmdlZCA9IGJsb2NrQ2hhbmdlZCB8fCBpc0NoYW5nZWQsIGlzVmFsaWQgPSBpc1ZhbGlkICYmIGJsb2NrVmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgZGVidWckaChcIkludmFsaWQgdmFsdWUsIHJldHVybmluZ1wiKSwgc2VuZEJhY2soe1xuICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmdcIixcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpc0NoYW5nZWQpIHtcbiAgICBkZWJ1ZyRoKFwiU2VydmVyIHZhbHVlIGNoYW5nZWQsIHN5bmNpbmcgZWRpdG9yXCIpO1xuICAgIHRyeSB7XG4gICAgICBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpLCBzZW5kQmFjayh7XG4gICAgICAgIHR5cGU6IFwiaW52YWxpZCB2YWx1ZVwiLFxuICAgICAgICByZXNvbHV0aW9uOiBudWxsLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSksIHNlbmRCYWNrKHtcbiAgICAgICAgdHlwZTogXCJkb25lIHN5bmNpbmdcIixcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoYWRTZWxlY3Rpb24gJiYgIXNsYXRlRWRpdG9yLnNlbGVjdGlvbiAmJiAoVHJhbnNmb3Jtcy5zZWxlY3Qoc2xhdGVFZGl0b3IsIHtcbiAgICAgIGFuY2hvcjoge1xuICAgICAgICBwYXRoOiBbMCwgMF0sXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSxcbiAgICAgIGZvY3VzOiB7XG4gICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9XG4gICAgfSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCkpLCBzZW5kQmFjayh7XG4gICAgICB0eXBlOiBcInZhbHVlIGNoYW5nZWRcIixcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gIH0gZWxzZVxuICAgIGRlYnVnJGgoXCJTZXJ2ZXIgdmFsdWUgYW5kIGVkaXRvciB2YWx1ZSBpcyBlcXVhbCwgbm8gbmVlZCB0byBzeW5jLlwiKTtcbiAgc2VuZEJhY2soe1xuICAgIHR5cGU6IFwiZG9uZSBzeW5jaW5nXCIsXG4gICAgdmFsdWVcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiogZ2V0QmxvY2tzKHtcbiAgc2xhdGVWYWx1ZSxcbiAgc3RyZWFtQmxvY2tzXG59KSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciBhd2FpdCAoY29uc3QgYmxvY2sgb2Ygc2xhdGVWYWx1ZSlcbiAgICBzdHJlYW1CbG9ja3MgJiYgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMCkpLCB5aWVsZCBbYmxvY2ssIGluZGV4XSwgaW5kZXgrKztcbn1cbmZ1bmN0aW9uIHN5bmNCbG9jayh7XG4gIGNvbnRleHQsXG4gIHNlbmRCYWNrLFxuICBibG9jayxcbiAgaW5kZXgsXG4gIHNsYXRlRWRpdG9yLFxuICB2YWx1ZVxufSkge1xuICBsZXQgYmxvY2tDaGFuZ2VkID0gITEsIGJsb2NrVmFsaWQgPSAhMDtcbiAgY29uc3QgY3VycmVudEJsb2NrID0gYmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4ID0gaW5kZXgsIG9sZEJsb2NrID0gc2xhdGVFZGl0b3IuY2hpbGRyZW5bY3VycmVudEJsb2NrSW5kZXhdLCBoYXNDaGFuZ2VzID0gb2xkQmxvY2sgJiYgIWlzRXF1YWwoY3VycmVudEJsb2NrLCBvbGRCbG9jayk7XG4gIHJldHVybiBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKHNsYXRlRWRpdG9yLCAoKSA9PiB7XG4gICAgd2l0aFJlbW90ZUNoYW5nZXMoc2xhdGVFZGl0b3IsICgpID0+IHtcbiAgICAgIHdpdGhvdXRQYXRjaGluZyhzbGF0ZUVkaXRvciwgKCkgPT4ge1xuICAgICAgICBpZiAoaGFzQ2hhbmdlcyAmJiBibG9ja1ZhbGlkKSB7XG4gICAgICAgICAgY29uc3QgdmFsaWRhdGlvblZhbHVlID0gW3ZhbHVlW2N1cnJlbnRCbG9ja0luZGV4XV0sIHZhbGlkYXRpb24gPSB2YWxpZGF0ZVZhbHVlKHZhbGlkYXRpb25WYWx1ZSwgY29udGV4dC5zY2hlbWEsIGNvbnRleHQua2V5R2VuZXJhdG9yKTtcbiAgICAgICAgICAhdmFsaWRhdGlvbi52YWxpZCAmJiB2YWxpZGF0aW9uLnJlc29sdXRpb24/LmF1dG9SZXNvbHZlICYmIHZhbGlkYXRpb24ucmVzb2x1dGlvbj8ucGF0Y2hlcy5sZW5ndGggPiAwICYmICFjb250ZXh0LnJlYWRPbmx5ICYmIGNvbnRleHQucHJldmlvdXNWYWx1ZSAmJiBjb250ZXh0LnByZXZpb3VzVmFsdWUgIT09IHZhbHVlICYmIChjb25zb2xlLndhcm4oYCR7dmFsaWRhdGlvbi5yZXNvbHV0aW9uLmFjdGlvbn0gZm9yIGJsb2NrIHdpdGggX2tleSAnJHt2YWxpZGF0aW9uVmFsdWVbMF0uX2tleX0nLiAke3ZhbGlkYXRpb24ucmVzb2x1dGlvbj8uZGVzY3JpcHRpb259YCksIHZhbGlkYXRpb24ucmVzb2x1dGlvbi5wYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICAgICAgICBzZW5kQmFjayh7XG4gICAgICAgICAgICAgIHR5cGU6IFwicGF0Y2hcIixcbiAgICAgICAgICAgICAgcGF0Y2hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKSwgdmFsaWRhdGlvbi52YWxpZCB8fCB2YWxpZGF0aW9uLnJlc29sdXRpb24/LmF1dG9SZXNvbHZlID8gKG9sZEJsb2NrLl9rZXkgPT09IGN1cnJlbnRCbG9jay5fa2V5ID8gKGRlYnVnJGguZW5hYmxlZCAmJiBkZWJ1ZyRoKFwiVXBkYXRpbmcgYmxvY2tcIiwgb2xkQmxvY2ssIGN1cnJlbnRCbG9jayksIF91cGRhdGVCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBvbGRCbG9jaywgY3VycmVudEJsb2NrSW5kZXgpKSA6IChkZWJ1ZyRoLmVuYWJsZWQgJiYgZGVidWckaChcIlJlcGxhY2luZyBibG9ja1wiLCBvbGRCbG9jaywgY3VycmVudEJsb2NrKSwgX3JlcGxhY2VCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBjdXJyZW50QmxvY2tJbmRleCkpLCBibG9ja0NoYW5nZWQgPSAhMCkgOiAoc2VuZEJhY2soe1xuICAgICAgICAgICAgdHlwZTogXCJpbnZhbGlkIHZhbHVlXCIsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiB2YWxpZGF0aW9uLnJlc29sdXRpb24sXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0pLCBibG9ja1ZhbGlkID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb2xkQmxvY2sgJiYgYmxvY2tWYWxpZCkge1xuICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25WYWx1ZSA9IFt2YWx1ZVtjdXJyZW50QmxvY2tJbmRleF1dLCB2YWxpZGF0aW9uID0gdmFsaWRhdGVWYWx1ZSh2YWxpZGF0aW9uVmFsdWUsIGNvbnRleHQuc2NoZW1hLCBjb250ZXh0LmtleUdlbmVyYXRvcik7XG4gICAgICAgICAgZGVidWckaC5lbmFibGVkICYmIGRlYnVnJGgoXCJWYWxpZGF0aW5nIGFuZCBpbnNlcnRpbmcgbmV3IGJsb2NrIGluIHRoZSBlbmQgb2YgdGhlIHZhbHVlXCIsIGN1cnJlbnRCbG9jayksIHZhbGlkYXRpb24udmFsaWQgfHwgdmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5hdXRvUmVzb2x2ZSA/IFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywge1xuICAgICAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleF1cbiAgICAgICAgICB9KSA6IChkZWJ1ZyRoKFwiSW52YWxpZFwiLCB2YWxpZGF0aW9uKSwgc2VuZEJhY2soe1xuICAgICAgICAgICAgdHlwZTogXCJpbnZhbGlkIHZhbHVlXCIsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiB2YWxpZGF0aW9uLnJlc29sdXRpb24sXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0pLCBibG9ja1ZhbGlkID0gITEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSksIHtcbiAgICBibG9ja0NoYW5nZWQsXG4gICAgYmxvY2tWYWxpZFxuICB9O1xufVxuZnVuY3Rpb24gX3JlcGxhY2VCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBjdXJyZW50QmxvY2tJbmRleCkge1xuICBjb25zdCBjdXJyZW50U2VsZWN0aW9uID0gc2xhdGVFZGl0b3Iuc2VsZWN0aW9uLCBzZWxlY3Rpb25Gb2N1c09uQmxvY2sgPSBjdXJyZW50U2VsZWN0aW9uICYmIGN1cnJlbnRTZWxlY3Rpb24uZm9jdXMucGF0aFswXSA9PT0gY3VycmVudEJsb2NrSW5kZXg7XG4gIHNlbGVjdGlvbkZvY3VzT25CbG9jayAmJiBUcmFuc2Zvcm1zLmRlc2VsZWN0KHNsYXRlRWRpdG9yKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhzbGF0ZUVkaXRvciwge1xuICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXhdXG4gIH0pLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2ssIHtcbiAgICBhdDogW2N1cnJlbnRCbG9ja0luZGV4XVxuICB9KSwgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKSwgc2VsZWN0aW9uRm9jdXNPbkJsb2NrICYmIFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBjdXJyZW50U2VsZWN0aW9uKTtcbn1cbmZ1bmN0aW9uIF91cGRhdGVCbG9jayhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrLCBvbGRCbG9jaywgY3VycmVudEJsb2NrSW5kZXgpIHtcbiAgaWYgKFRyYW5zZm9ybXMuc2V0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9jaywge1xuICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXhdXG4gIH0pLCBzbGF0ZUVkaXRvci5pc1RleHRCbG9jayhjdXJyZW50QmxvY2spICYmIHNsYXRlRWRpdG9yLmlzVGV4dEJsb2NrKG9sZEJsb2NrKSkge1xuICAgIGNvbnN0IG9sZEJsb2NrQ2hpbGRyZW5MZW5ndGggPSBvbGRCbG9jay5jaGlsZHJlbi5sZW5ndGg7XG4gICAgY3VycmVudEJsb2NrLmNoaWxkcmVuLmxlbmd0aCA8IG9sZEJsb2NrQ2hpbGRyZW5MZW5ndGggJiYgQXJyYXkuZnJvbShBcnJheShvbGRCbG9ja0NoaWxkcmVuTGVuZ3RoIC0gY3VycmVudEJsb2NrLmNoaWxkcmVuLmxlbmd0aCkpLmZvckVhY2goKF8sIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBjaGlsZEluZGV4ID0gb2xkQmxvY2tDaGlsZHJlbkxlbmd0aCAtIDEgLSBpbmRleDtcbiAgICAgIGNoaWxkSW5kZXggPiAwICYmIChkZWJ1ZyRoKFwiUmVtb3ZpbmcgY2hpbGRcIiksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoc2xhdGVFZGl0b3IsIHtcbiAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleCwgY2hpbGRJbmRleF1cbiAgICAgIH0pKTtcbiAgICB9KSwgY3VycmVudEJsb2NrLmNoaWxkcmVuLmZvckVhY2goKGN1cnJlbnRCbG9ja0NoaWxkLCBjdXJyZW50QmxvY2tDaGlsZEluZGV4KSA9PiB7XG4gICAgICBjb25zdCBvbGRCbG9ja0NoaWxkID0gb2xkQmxvY2suY2hpbGRyZW5bY3VycmVudEJsb2NrQ2hpbGRJbmRleF0sIGlzQ2hpbGRDaGFuZ2VkID0gIWlzRXF1YWwoY3VycmVudEJsb2NrQ2hpbGQsIG9sZEJsb2NrQ2hpbGQpLCBpc1RleHRDaGFuZ2VkID0gIWlzRXF1YWwoY3VycmVudEJsb2NrQ2hpbGQudGV4dCwgb2xkQmxvY2tDaGlsZD8udGV4dCksIHBhdGggPSBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdO1xuICAgICAgaWYgKGlzQ2hpbGRDaGFuZ2VkKVxuICAgICAgICBpZiAoY3VycmVudEJsb2NrQ2hpbGQuX2tleSA9PT0gb2xkQmxvY2tDaGlsZD8uX2tleSkge1xuICAgICAgICAgIGRlYnVnJGgoXCJVcGRhdGluZyBjaGFuZ2VkIGNoaWxkXCIsIGN1cnJlbnRCbG9ja0NoaWxkLCBvbGRCbG9ja0NoaWxkKSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhzbGF0ZUVkaXRvciwgY3VycmVudEJsb2NrQ2hpbGQsIHtcbiAgICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgaXNTcGFuTm9kZSA9IFRleHQuaXNUZXh0KGN1cnJlbnRCbG9ja0NoaWxkKSAmJiBjdXJyZW50QmxvY2tDaGlsZC5fdHlwZSA9PT0gXCJzcGFuXCIgJiYgVGV4dC5pc1RleHQob2xkQmxvY2tDaGlsZCkgJiYgb2xkQmxvY2tDaGlsZC5fdHlwZSA9PT0gXCJzcGFuXCI7XG4gICAgICAgICAgaXNTcGFuTm9kZSAmJiBpc1RleHRDaGFuZ2VkID8gKFRyYW5zZm9ybXMuZGVsZXRlKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgICBhdDoge1xuICAgICAgICAgICAgICBmb2N1czoge1xuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvbGRCbG9ja0NoaWxkLnRleHQubGVuZ3RoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnRUZXh0KHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZC50ZXh0LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSA6IGlzU3Bhbk5vZGUgfHwgKGRlYnVnJGgoXCJVcGRhdGluZyBjaGFuZ2VkIGlubGluZSBvYmplY3QgY2hpbGRcIiwgY3VycmVudEJsb2NrQ2hpbGQpLCBUcmFuc2Zvcm1zLnNldE5vZGVzKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgICBfa2V5OiBWT0lEX0NISUxEX0tFWVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBbLi4ucGF0aCwgMF0sXG4gICAgICAgICAgICB2b2lkczogITBcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSBvbGRCbG9ja0NoaWxkID8gKGRlYnVnJGgoXCJSZXBsYWNpbmcgY2hpbGRcIiwgY3VycmVudEJsb2NrQ2hpbGQpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKHNsYXRlRWRpdG9yLCB7XG4gICAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleCwgY3VycmVudEJsb2NrQ2hpbGRJbmRleF1cbiAgICAgICAgfSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoc2xhdGVFZGl0b3IsIGN1cnJlbnRCbG9ja0NoaWxkLCB7XG4gICAgICAgICAgYXQ6IFtjdXJyZW50QmxvY2tJbmRleCwgY3VycmVudEJsb2NrQ2hpbGRJbmRleF1cbiAgICAgICAgfSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCkpIDogb2xkQmxvY2tDaGlsZCB8fCAoZGVidWckaChcIkluc2VydGluZyBuZXcgY2hpbGRcIiwgY3VycmVudEJsb2NrQ2hpbGQpLCBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKHNsYXRlRWRpdG9yLCBjdXJyZW50QmxvY2tDaGlsZCwge1xuICAgICAgICAgIGF0OiBbY3VycmVudEJsb2NrSW5kZXgsIGN1cnJlbnRCbG9ja0NoaWxkSW5kZXhdXG4gICAgICAgIH0pLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKTtcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgZGVidWckZyA9IGRlYnVnV2l0aE5hbWUoXCJjb21wb25lbnQ6UG9ydGFibGVUZXh0RWRpdG9yOlN5bmNocm9uaXplclwiKTtcbmZ1bmN0aW9uIFN5bmNocm9uaXplcihwcm9wcykge1xuICBjb25zdCAkID0gYyg0MCksIHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBzbGF0ZUVkaXRvclxuICB9ID0gcHJvcHMsIHZhbHVlID0gdXNlU2VsZWN0b3IocHJvcHMuZWRpdG9yQWN0b3IsIF90ZW1wKSwgcmVhZE9ubHkgPSB1c2VTZWxlY3Rvcihwcm9wcy5lZGl0b3JBY3RvciwgX3RlbXAyKTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBwcm9wcy5lZGl0b3JBY3RvciA/ICh0MCA9IHByb3BzLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksICRbMF0gPSBwcm9wcy5lZGl0b3JBY3RvciwgJFsxXSA9IHQwKSA6IHQwID0gJFsxXTtcbiAgY29uc3QgdDEgPSB0MC5jb250ZXh0LmtleUdlbmVyYXRvcjtcbiAgbGV0IHQyO1xuICAkWzJdICE9PSBwcm9wcy5lZGl0b3JBY3RvciA/ICh0MiA9IHByb3BzLmVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICB9KSwgJFsyXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzNdID0gdDIpIDogdDIgPSAkWzNdO1xuICBsZXQgdDM7XG4gICRbNF0gIT09IHByb3BzLmVkaXRvckFjdG9yID8gKHQzID0gcHJvcHMuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKSwgJFs0XSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzVdID0gdDMpIDogdDMgPSAkWzVdO1xuICBsZXQgdDQ7XG4gICRbNl0gIT09IHNsYXRlRWRpdG9yIHx8ICRbN10gIT09IHQwLmNvbnRleHQua2V5R2VuZXJhdG9yIHx8ICRbOF0gIT09IHQyIHx8ICRbOV0gIT09IHQzLmNvbnRleHQuc2NoZW1hID8gKHQ0ID0ge1xuICAgIGlucHV0OiB7XG4gICAgICBrZXlHZW5lcmF0b3I6IHQxLFxuICAgICAgcmVhZE9ubHk6IHQyLFxuICAgICAgc2NoZW1hOiB0My5jb250ZXh0LnNjaGVtYSxcbiAgICAgIHNsYXRlRWRpdG9yXG4gICAgfVxuICB9LCAkWzZdID0gc2xhdGVFZGl0b3IsICRbN10gPSB0MC5jb250ZXh0LmtleUdlbmVyYXRvciwgJFs4XSA9IHQyLCAkWzldID0gdDMuY29udGV4dC5zY2hlbWEsICRbMTBdID0gdDQpIDogdDQgPSAkWzEwXTtcbiAgY29uc3Qgc3luY0FjdG9yUmVmID0gdXNlQWN0b3JSZWYoc3luY01hY2hpbmUsIHQ0KTtcbiAgbGV0IHQ1O1xuICAkWzExXSAhPT0gZWRpdG9yQWN0b3IgPyAodDUgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLCAkWzExXSA9IGVkaXRvckFjdG9yLCAkWzEyXSA9IHQ1KSA6IHQ1ID0gJFsxMl07XG4gIGxldCB0NjtcbiAgJFsxM10gIT09IHNsYXRlRWRpdG9yIHx8ICRbMTRdICE9PSB0NS5jb250ZXh0LnNjaGVtYSA/ICh0NiA9IHtcbiAgICBpbnB1dDoge1xuICAgICAgc2NoZW1hOiB0NS5jb250ZXh0LnNjaGVtYSxcbiAgICAgIHNsYXRlRWRpdG9yXG4gICAgfVxuICB9LCAkWzEzXSA9IHNsYXRlRWRpdG9yLCAkWzE0XSA9IHQ1LmNvbnRleHQuc2NoZW1hLCAkWzE1XSA9IHQ2KSA6IHQ2ID0gJFsxNV07XG4gIGNvbnN0IG11dGF0aW9uQWN0b3JSZWYgPSB1c2VBY3RvclJlZihtdXRhdGlvbk1hY2hpbmUsIHQ2KTtcbiAgbGV0IHQ3LCB0ODtcbiAgJFsxNl0gIT09IGVkaXRvckFjdG9yIHx8ICRbMTddICE9PSBtdXRhdGlvbkFjdG9yUmVmIHx8ICRbMThdICE9PSBzeW5jQWN0b3JSZWYgPyAodDcgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gbXV0YXRpb25BY3RvclJlZi5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC50eXBlID09PSBcImhhcyBwZW5kaW5nIHBhdGNoZXNcIiAmJiBzeW5jQWN0b3JSZWYuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiaGFzIHBlbmRpbmcgcGF0Y2hlc1wiXG4gICAgICB9KSwgZXZlbnQudHlwZSA9PT0gXCJtdXRhdGlvblwiICYmIChzeW5jQWN0b3JSZWYuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwibXV0YXRpb25cIlxuICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcIm11dGF0aW9uXCIsXG4gICAgICAgIHBhdGNoZXM6IGV2ZW50LnBhdGNoZXMsXG4gICAgICAgIHNuYXBzaG90OiBldmVudC5zbmFwc2hvdCxcbiAgICAgICAgdmFsdWU6IGV2ZW50LnNuYXBzaG90XG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQ4ID0gW211dGF0aW9uQWN0b3JSZWYsIHN5bmNBY3RvclJlZiwgZWRpdG9yQWN0b3JdLCAkWzE2XSA9IGVkaXRvckFjdG9yLCAkWzE3XSA9IG11dGF0aW9uQWN0b3JSZWYsICRbMThdID0gc3luY0FjdG9yUmVmLCAkWzE5XSA9IHQ3LCAkWzIwXSA9IHQ4KSA6ICh0NyA9ICRbMTldLCB0OCA9ICRbMjBdKSwgdXNlRWZmZWN0KHQ3LCB0OCk7XG4gIGxldCB0MTAsIHQ5O1xuICAkWzIxXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgfHwgJFsyMl0gIT09IHN5bmNBY3RvclJlZiA/ICh0OSA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25fMCA9IHN5bmNBY3RvclJlZi5vbihcIipcIiwgKGV2ZW50XzApID0+IHtcbiAgICAgIHByb3BzLmVkaXRvckFjdG9yLnNlbmQoZXZlbnRfMCk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbl8wLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgdDEwID0gW3Byb3BzLmVkaXRvckFjdG9yLCBzeW5jQWN0b3JSZWZdLCAkWzIxXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzIyXSA9IHN5bmNBY3RvclJlZiwgJFsyM10gPSB0MTAsICRbMjRdID0gdDkpIDogKHQxMCA9ICRbMjNdLCB0OSA9ICRbMjRdKSwgdXNlRWZmZWN0KHQ5LCB0MTApO1xuICBsZXQgdDExLCB0MTI7XG4gICRbMjVdICE9PSByZWFkT25seSB8fCAkWzI2XSAhPT0gc3luY0FjdG9yUmVmID8gKHQxMSA9ICgpID0+IHtcbiAgICBzeW5jQWN0b3JSZWYuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSByZWFkT25seVwiLFxuICAgICAgcmVhZE9ubHlcbiAgICB9KTtcbiAgfSwgdDEyID0gW3N5bmNBY3RvclJlZiwgcmVhZE9ubHldLCAkWzI1XSA9IHJlYWRPbmx5LCAkWzI2XSA9IHN5bmNBY3RvclJlZiwgJFsyN10gPSB0MTEsICRbMjhdID0gdDEyKSA6ICh0MTEgPSAkWzI3XSwgdDEyID0gJFsyOF0pLCB1c2VFZmZlY3QodDExLCB0MTIpO1xuICBsZXQgdDEzLCB0MTQ7XG4gICRbMjldICE9PSBzeW5jQWN0b3JSZWYgfHwgJFszMF0gIT09IHZhbHVlID8gKHQxMyA9ICgpID0+IHtcbiAgICBkZWJ1ZyRnKFwiVmFsdWUgZnJvbSBwcm9wcyBjaGFuZ2VkLCBzeW5jaW5nIG5ldyB2YWx1ZVwiKSwgc3luY0FjdG9yUmVmLnNlbmQoe1xuICAgICAgdHlwZTogXCJ1cGRhdGUgdmFsdWVcIixcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gIH0sIHQxNCA9IFtzeW5jQWN0b3JSZWYsIHZhbHVlXSwgJFsyOV0gPSBzeW5jQWN0b3JSZWYsICRbMzBdID0gdmFsdWUsICRbMzFdID0gdDEzLCAkWzMyXSA9IHQxNCkgOiAodDEzID0gJFszMV0sIHQxNCA9ICRbMzJdKSwgdXNlRWZmZWN0KHQxMywgdDE0KTtcbiAgbGV0IHQxNTtcbiAgJFszM10gIT09IGVkaXRvckFjdG9yIHx8ICRbMzRdICE9PSBtdXRhdGlvbkFjdG9yUmVmID8gKHQxNSA9ICgpID0+IHtcbiAgICBkZWJ1ZyRnKFwiU3Vic2NyaWJpbmcgdG8gcGF0Y2ggZXZlbnRzXCIpO1xuICAgIGNvbnN0IHN1YiA9IGVkaXRvckFjdG9yLm9uKFwicGF0Y2hcIiwgKGV2ZW50XzEpID0+IHtcbiAgICAgIG11dGF0aW9uQWN0b3JSZWYuc2VuZChldmVudF8xKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGVidWckZyhcIlVuc3Vic2NyaWJpbmcgdG8gcGF0Y2ggZXZlbnRzXCIpLCBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCAkWzMzXSA9IGVkaXRvckFjdG9yLCAkWzM0XSA9IG11dGF0aW9uQWN0b3JSZWYsICRbMzVdID0gdDE1KSA6IHQxNSA9ICRbMzVdO1xuICBsZXQgdDE2O1xuICByZXR1cm4gJFszNl0gIT09IGVkaXRvckFjdG9yIHx8ICRbMzddICE9PSBtdXRhdGlvbkFjdG9yUmVmIHx8ICRbMzhdICE9PSBzbGF0ZUVkaXRvciA/ICh0MTYgPSBbZWRpdG9yQWN0b3IsIG11dGF0aW9uQWN0b3JSZWYsIHNsYXRlRWRpdG9yXSwgJFszNl0gPSBlZGl0b3JBY3RvciwgJFszN10gPSBtdXRhdGlvbkFjdG9yUmVmLCAkWzM4XSA9IHNsYXRlRWRpdG9yLCAkWzM5XSA9IHQxNikgOiB0MTYgPSAkWzM5XSwgdXNlRWZmZWN0KHQxNSwgdDE2KSwgbnVsbDtcbn1cbmZ1bmN0aW9uIF90ZW1wMihzXzApIHtcbiAgcmV0dXJuIHNfMC5tYXRjaGVzKHtcbiAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gIH0pO1xufVxuZnVuY3Rpb24gX3RlbXAocykge1xuICByZXR1cm4gcy5jb250ZXh0LnZhbHVlO1xufVxuU3luY2hyb25pemVyLmRpc3BsYXlOYW1lID0gXCJTeW5jaHJvbml6ZXJcIjtcbmNvbnN0IGRlYnVnJGYgPSBkZWJ1Z1dpdGhOYW1lKFwib3BlcmF0aW9uVG9QYXRjaGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlT3BlcmF0aW9uVG9QYXRjaGVzKHR5cGVzKSB7XG4gIGNvbnN0IHRleHRCbG9ja05hbWUgPSB0eXBlcy5ibG9jay5uYW1lO1xuICBmdW5jdGlvbiBpbnNlcnRUZXh0UGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgZGVidWckZi5lbmFibGVkICYmIGRlYnVnJGYoXCJPcGVyYXRpb25cIiwgSlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLCBudWxsLCAyKSk7XG4gICAgY29uc3QgYmxvY2sgPSBlZGl0b3IuaXNUZXh0QmxvY2soZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXSkgJiYgZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAoIWJsb2NrKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYmxvY2tcIik7XG4gICAgY29uc3QgdGV4dENoaWxkID0gZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBlZGl0b3IuaXNUZXh0U3BhbihibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0pICYmIGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICBpZiAoIXRleHRDaGlsZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGNoaWxkXCIpO1xuICAgIGNvbnN0IHBhdGggPSBbe1xuICAgICAgX2tleTogYmxvY2suX2tleVxuICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgX2tleTogdGV4dENoaWxkLl9rZXlcbiAgICB9LCBcInRleHRcIl0sIHByZXZCbG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgcHJldkNoaWxkID0gZWRpdG9yLmlzVGV4dEJsb2NrKHByZXZCbG9jaykgJiYgcHJldkJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSwgcHJldlRleHQgPSBlZGl0b3IuaXNUZXh0U3BhbihwcmV2Q2hpbGQpID8gcHJldkNoaWxkLnRleHQgOiBcIlwiLCBwYXRjaCA9IGRpZmZNYXRjaFBhdGNoJDEocHJldlRleHQsIHRleHRDaGlsZC50ZXh0LCBwYXRoKTtcbiAgICByZXR1cm4gcGF0Y2gudmFsdWUubGVuZ3RoID8gW3BhdGNoXSA6IFtdO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZVRleHRQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgICBjb25zdCBibG9jayA9IGVkaXRvciAmJiBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgIGlmICghYmxvY2spXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBibG9ja1wiKTtcbiAgICBjb25zdCBjaGlsZCA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dIHx8IHZvaWQgMCwgdGV4dENoaWxkID0gZWRpdG9yLmlzVGV4dFNwYW4oY2hpbGQpID8gY2hpbGQgOiB2b2lkIDA7XG4gICAgaWYgKGNoaWxkICYmICF0ZXh0Q2hpbGQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzcGFuXCIpO1xuICAgIGlmICghdGV4dENoaWxkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgY2hpbGRcIik7XG4gICAgY29uc3QgcGF0aCA9IFt7XG4gICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiB0ZXh0Q2hpbGQuX2tleVxuICAgIH0sIFwidGV4dFwiXSwgYmVmb3JlQmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV0sIHByZXZUZXh0Q2hpbGQgPSBlZGl0b3IuaXNUZXh0QmxvY2soYmVmb3JlQmxvY2spICYmIGJlZm9yZUJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSwgcHJldlRleHQgPSBlZGl0b3IuaXNUZXh0U3BhbihwcmV2VGV4dENoaWxkKSAmJiBwcmV2VGV4dENoaWxkLnRleHQsIHBhdGNoID0gZGlmZk1hdGNoUGF0Y2gkMShwcmV2VGV4dCB8fCBcIlwiLCB0ZXh0Q2hpbGQudGV4dCwgcGF0aCk7XG4gICAgcmV0dXJuIHBhdGNoLnZhbHVlID8gW3BhdGNoXSA6IFtdO1xuICB9XG4gIGZ1bmN0aW9uIHNldE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbikge1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICAgIGlmICh0eXBlb2YgYmxvY2suX2tleSAhPSBcInN0cmluZ1wiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBibG9jayB0byBoYXZlIGEgX2tleVwiKTtcbiAgICAgIGNvbnN0IHNldE5vZGUgPSBvbWl0Qnkoe1xuICAgICAgICAuLi5lZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dLFxuICAgICAgICAuLi5vcGVyYXRpb24ubmV3UHJvcGVydGllc1xuICAgICAgfSwgaXNVbmRlZmluZWQpO1xuICAgICAgcmV0dXJuIFtzZXQoZnJvbVNsYXRlVmFsdWUoW3NldE5vZGVdLCB0ZXh0QmxvY2tOYW1lKVswXSwgW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV0pXTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgYmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGNvbnN0IGJsb2NrS2V5ID0gYmxvY2suX2tleSwgY2hpbGRLZXkgPSBjaGlsZC5fa2V5LCBwYXRjaGVzID0gW10sIGtleXMgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24ubmV3UHJvcGVydGllcyk7XG4gICAgICAgICAgcmV0dXJuIGtleXMuZm9yRWFjaCgoa2V5TmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIGtleU5hbWUgPT09IFwiX2tleVwiKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGdldChvcGVyYXRpb24ubmV3UHJvcGVydGllcywga2V5TmFtZSk7XG4gICAgICAgICAgICAgIHBhdGNoZXMucHVzaChzZXQodmFsLCBbe1xuICAgICAgICAgICAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwgYmxvY2suY2hpbGRyZW4uaW5kZXhPZihjaGlsZCksIGtleU5hbWVdKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCB2YWwgPSBnZXQob3BlcmF0aW9uLm5ld1Byb3BlcnRpZXMsIGtleU5hbWUpO1xuICAgICAgICAgICAgICBwYXRjaGVzLnB1c2goc2V0KHZhbCwgW3tcbiAgICAgICAgICAgICAgICBfa2V5OiBibG9ja0tleVxuICAgICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgICAgICBfa2V5OiBjaGlsZEtleVxuICAgICAgICAgICAgICB9LCBrZXlOYW1lXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLCBwYXRjaGVzO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgdmFsaWQgY2hpbGRcIik7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBhIHZhbGlkIGJsb2NrXCIpO1xuICAgIH0gZWxzZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHBhdGggZW5jb3VudGVyZWQ6ICR7SlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLnBhdGgpfWApO1xuICB9XG4gIGZ1bmN0aW9uIGluc2VydE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgICBjb25zdCBibG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgaXNUZXh0QmxvY2sgPSBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spO1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gb3BlcmF0aW9uLnBhdGhbMF0gPT09IDAgPyBcImJlZm9yZVwiIDogXCJhZnRlclwiLCBiZWZvcmVCbG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdIC0gMV0sIHRhcmdldEtleSA9IG9wZXJhdGlvbi5wYXRoWzBdID09PSAwID8gYmxvY2s/Ll9rZXkgOiBiZWZvcmVCbG9jaz8uX2tleTtcbiAgICAgIHJldHVybiB0YXJnZXRLZXkgPyBbaW5zZXJ0KFtmcm9tU2xhdGVWYWx1ZShbb3BlcmF0aW9uLm5vZGVdLCB0ZXh0QmxvY2tOYW1lKVswXV0sIHBvc2l0aW9uLCBbe1xuICAgICAgICBfa2V5OiB0YXJnZXRLZXlcbiAgICAgIH1dKV0gOiBbc2V0SWZNaXNzaW5nKGJlZm9yZVZhbHVlLCBbXSksIGluc2VydChbZnJvbVNsYXRlVmFsdWUoW29wZXJhdGlvbi5ub2RlXSwgdGV4dEJsb2NrTmFtZSlbMF1dLCBcImJlZm9yZVwiLCBbb3BlcmF0aW9uLnBhdGhbMF1dKV07XG4gICAgfSBlbHNlIGlmIChpc1RleHRCbG9jayAmJiBvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIgJiYgZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXSkge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBibG9jay5jaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgIWJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdIC0gMV0gPyBcImJlZm9yZVwiIDogXCJhZnRlclwiLCBub2RlID0ge1xuICAgICAgICAuLi5vcGVyYXRpb24ubm9kZVxuICAgICAgfTtcbiAgICAgICFub2RlLl90eXBlICYmIFRleHQuaXNUZXh0KG5vZGUpICYmIChub2RlLl90eXBlID0gXCJzcGFuXCIsIG5vZGUubWFya3MgPSBbXSk7XG4gICAgICBjb25zdCBjaGlsZCA9IGZyb21TbGF0ZVZhbHVlKFt7XG4gICAgICAgIF9rZXk6IFwiYm9ndXNcIixcbiAgICAgICAgX3R5cGU6IHRleHRCbG9ja05hbWUsXG4gICAgICAgIGNoaWxkcmVuOiBbbm9kZV1cbiAgICAgIH1dLCB0ZXh0QmxvY2tOYW1lKVswXS5jaGlsZHJlblswXTtcbiAgICAgIHJldHVybiBbaW5zZXJ0KFtjaGlsZF0sIHBvc2l0aW9uLCBbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA8PSAxIHx8ICFibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdID8gMCA6IHtcbiAgICAgICAgX2tleTogYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV0gLSAxXS5fa2V5XG4gICAgICB9XSldO1xuICAgIH1cbiAgICByZXR1cm4gZGVidWckZihcIlNvbWV0aGluZyB3YXMgaW5zZXJ0ZWQgaW50byBhIHZvaWQgYmxvY2suIE5vdCBwcm9kdWNpbmcgZWRpdG9yIHBhdGNoZXMuXCIpLCBbXTtcbiAgfVxuICBmdW5jdGlvbiBzcGxpdE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgYmVmb3JlVmFsdWUpIHtcbiAgICBjb25zdCBwYXRjaGVzID0gW10sIHNwbGl0QmxvY2sgPSBlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF1dO1xuICAgIGlmICghZWRpdG9yLmlzVGV4dEJsb2NrKHNwbGl0QmxvY2spKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCbG9jayB3aXRoIHBhdGggJHtKU09OLnN0cmluZ2lmeShvcGVyYXRpb24ucGF0aFswXSl9IGlzIG5vdCBhIHRleHQgYmxvY2sgYW5kIGNhbid0IGJlIHNwbGl0YCk7XG4gICAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3Qgb2xkQmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV07XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG9sZEJsb2NrKSkge1xuICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IGZyb21TbGF0ZVZhbHVlKFtlZGl0b3IuY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMF0gKyAxXV0sIHRleHRCbG9ja05hbWUpWzBdO1xuICAgICAgICB0YXJnZXRWYWx1ZSAmJiAocGF0Y2hlcy5wdXNoKGluc2VydChbdGFyZ2V0VmFsdWVdLCBcImFmdGVyXCIsIFt7XG4gICAgICAgICAgX2tleTogc3BsaXRCbG9jay5fa2V5XG4gICAgICAgIH1dKSksIG9sZEJsb2NrLmNoaWxkcmVuLnNsaWNlKG9wZXJhdGlvbi5wb3NpdGlvbikuZm9yRWFjaCgoc3BhbikgPT4ge1xuICAgICAgICAgIGNvbnN0IHBhdGggPSBbe1xuICAgICAgICAgICAgX2tleTogb2xkQmxvY2suX2tleVxuICAgICAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICAgICAgX2tleTogc3Bhbi5fa2V5XG4gICAgICAgICAgfV07XG4gICAgICAgICAgcGF0Y2hlcy5wdXNoKHVuc2V0KHBhdGgpKTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGNoZXM7XG4gICAgfVxuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IHNwbGl0U3BhbiA9IHNwbGl0QmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dO1xuICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKHNwbGl0U3BhbikpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0U3BhbnMgPSBmcm9tU2xhdGVWYWx1ZShbe1xuICAgICAgICAgIC4uLnNwbGl0QmxvY2ssXG4gICAgICAgICAgY2hpbGRyZW46IHNwbGl0QmxvY2suY2hpbGRyZW4uc2xpY2Uob3BlcmF0aW9uLnBhdGhbMV0gKyAxLCBvcGVyYXRpb24ucGF0aFsxXSArIDIpXG4gICAgICAgIH1dLCB0ZXh0QmxvY2tOYW1lKVswXS5jaGlsZHJlbjtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKGluc2VydCh0YXJnZXRTcGFucywgXCJhZnRlclwiLCBbe1xuICAgICAgICAgIF9rZXk6IHNwbGl0QmxvY2suX2tleVxuICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICBfa2V5OiBzcGxpdFNwYW4uX2tleVxuICAgICAgICB9XSkpLCBwYXRjaGVzLnB1c2goc2V0KHNwbGl0U3Bhbi50ZXh0LCBbe1xuICAgICAgICAgIF9rZXk6IHNwbGl0QmxvY2suX2tleVxuICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICBfa2V5OiBzcGxpdFNwYW4uX2tleVxuICAgICAgICB9LCBcInRleHRcIl0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRjaGVzO1xuICAgIH1cbiAgICByZXR1cm4gcGF0Y2hlcztcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgYmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ucGF0aFswXV07XG4gICAgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLl9rZXkpXG4gICAgICAgIHJldHVybiBbdW5zZXQoW3tcbiAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgIH1dKV07XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCbG9jayBub3QgZm91bmRcIik7XG4gICAgfSBlbHNlIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3Qgc3BhblRvUmVtb3ZlID0gYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dO1xuICAgICAgcmV0dXJuIHNwYW5Ub1JlbW92ZSA/IGJsb2NrLmNoaWxkcmVuLmZpbHRlcigoc3BhbikgPT4gc3Bhbi5fa2V5ID09PSBvcGVyYXRpb24ubm9kZS5fa2V5KS5sZW5ndGggPiAxID8gKGNvbnNvbGUud2FybihgTXVsdGlwbGUgc3BhbnMgaGF2ZSBcXGBfa2V5XFxgICR7b3BlcmF0aW9uLm5vZGUuX2tleX0uIEl0J3MgYW1iaWd1b3VzIHdoaWNoIG9uZSB0byByZW1vdmUuYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKSwgW10pIDogW3Vuc2V0KFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiBzcGFuVG9SZW1vdmUuX2tleVxuICAgICAgfV0pXSA6IChkZWJ1ZyRmKFwiU3BhbiBub3QgZm91bmQgaW4gZWRpdG9yIHRyeWluZyB0byByZW1vdmUgbm9kZVwiKSwgW10pO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIGRlYnVnJGYoXCJOb3QgY3JlYXRpbmcgcGF0Y2ggaW5zaWRlIG9iamVjdCBibG9ja1wiKSwgW107XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgcGF0Y2hlcyA9IFtdLCBibG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgdXBkYXRlZEJsb2NrID0gZWRpdG9yLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzBdXTtcbiAgICBpZiAob3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxKVxuICAgICAgaWYgKGJsb2NrPy5fa2V5KSB7XG4gICAgICAgIGNvbnN0IG5ld0Jsb2NrID0gZnJvbVNsYXRlVmFsdWUoW2VkaXRvci5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFswXSAtIDFdXSwgdGV4dEJsb2NrTmFtZSlbMF07XG4gICAgICAgIHBhdGNoZXMucHVzaChzZXQobmV3QmxvY2ssIFt7XG4gICAgICAgICAgX2tleTogbmV3QmxvY2suX2tleVxuICAgICAgICB9XSkpLCBwYXRjaGVzLnB1c2godW5zZXQoW3tcbiAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgIH1dKSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGFyZ2V0IGtleSBub3QgZm91bmQhXCIpO1xuICAgIGVsc2UgaWYgKGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKHVwZGF0ZWRCbG9jaykgJiYgb3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAyKSB7XG4gICAgICBjb25zdCB1cGRhdGVkU3BhbiA9IHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdICYmIGVkaXRvci5pc1RleHRTcGFuKHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdKSA/IHVwZGF0ZWRCbG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXSAtIDFdIDogdm9pZCAwLCByZW1vdmVkU3BhbiA9IGJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXSAmJiBlZGl0b3IuaXNUZXh0U3BhbihibG9jay5jaGlsZHJlbltvcGVyYXRpb24ucGF0aFsxXV0pID8gYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dIDogdm9pZCAwO1xuICAgICAgdXBkYXRlZFNwYW4gJiYgKGJsb2NrLmNoaWxkcmVuLmZpbHRlcigoc3BhbikgPT4gc3Bhbi5fa2V5ID09PSB1cGRhdGVkU3Bhbi5fa2V5KS5sZW5ndGggPT09IDEgPyBwYXRjaGVzLnB1c2goc2V0KHVwZGF0ZWRTcGFuLnRleHQsIFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiB1cGRhdGVkU3Bhbi5fa2V5XG4gICAgICB9LCBcInRleHRcIl0pKSA6IGNvbnNvbGUud2FybihgTXVsdGlwbGUgc3BhbnMgaGF2ZSBcXGBfa2V5XFxgICR7dXBkYXRlZFNwYW4uX2tleX0uIEl0J3MgYW1iaWd1b3VzIHdoaWNoIG9uZSB0byB1cGRhdGUuYCwgSlNPTi5zdHJpbmdpZnkoYmxvY2ssIG51bGwsIDIpKSksIHJlbW92ZWRTcGFuICYmIChibG9jay5jaGlsZHJlbi5maWx0ZXIoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0gcmVtb3ZlZFNwYW4uX2tleSkubGVuZ3RoID09PSAxID8gcGF0Y2hlcy5wdXNoKHVuc2V0KFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiByZW1vdmVkU3Bhbi5fa2V5XG4gICAgICB9XSkpIDogY29uc29sZS53YXJuKGBNdWx0aXBsZSBzcGFucyBoYXZlIFxcYF9rZXlcXGAgJHtyZW1vdmVkU3Bhbi5fa2V5fS4gSXQncyBhbWJpZ3VvdXMgd2hpY2ggb25lIHRvIHJlbW92ZS5gLCBKU09OLnN0cmluZ2lmeShibG9jaywgbnVsbCwgMikpKTtcbiAgICB9IGVsc2VcbiAgICAgIGRlYnVnJGYoXCJWb2lkIG5vZGVzIGNhbid0IGJlIG1lcmdlZCwgbm90IGNyZWF0aW5nIGFueSBwYXRjaGVzXCIpO1xuICAgIHJldHVybiBwYXRjaGVzO1xuICB9XG4gIGZ1bmN0aW9uIG1vdmVOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIGJlZm9yZVZhbHVlKSB7XG4gICAgY29uc3QgcGF0Y2hlcyA9IFtdLCBibG9jayA9IGJlZm9yZVZhbHVlW29wZXJhdGlvbi5wYXRoWzBdXSwgdGFyZ2V0QmxvY2sgPSBiZWZvcmVWYWx1ZVtvcGVyYXRpb24ubmV3UGF0aFswXV07XG4gICAgaWYgKCF0YXJnZXRCbG9jaylcbiAgICAgIHJldHVybiBwYXRjaGVzO1xuICAgIGlmIChvcGVyYXRpb24ucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gb3BlcmF0aW9uLnBhdGhbMF0gPiBvcGVyYXRpb24ubmV3UGF0aFswXSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCI7XG4gICAgICBwYXRjaGVzLnB1c2godW5zZXQoW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV0pKSwgcGF0Y2hlcy5wdXNoKGluc2VydChbZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdGV4dEJsb2NrTmFtZSlbMF1dLCBwb3NpdGlvbiwgW3tcbiAgICAgICAgX2tleTogdGFyZ2V0QmxvY2suX2tleVxuICAgICAgfV0pKTtcbiAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbi5wYXRoLmxlbmd0aCA9PT0gMiAmJiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGVkaXRvci5pc1RleHRCbG9jayh0YXJnZXRCbG9jaykpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gYmxvY2suY2hpbGRyZW5bb3BlcmF0aW9uLnBhdGhbMV1dLCB0YXJnZXRDaGlsZCA9IHRhcmdldEJsb2NrLmNoaWxkcmVuW29wZXJhdGlvbi5uZXdQYXRoWzFdXSwgcG9zaXRpb24gPSBvcGVyYXRpb24ubmV3UGF0aFsxXSA9PT0gdGFyZ2V0QmxvY2suY2hpbGRyZW4ubGVuZ3RoID8gXCJhZnRlclwiIDogXCJiZWZvcmVcIiwgY2hpbGRUb0luc2VydCA9IGZyb21TbGF0ZVZhbHVlKFtibG9ja10sIHRleHRCbG9ja05hbWUpWzBdLmNoaWxkcmVuW29wZXJhdGlvbi5wYXRoWzFdXTtcbiAgICAgIHBhdGNoZXMucHVzaCh1bnNldChbe1xuICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogY2hpbGQuX2tleVxuICAgICAgfV0pKSwgcGF0Y2hlcy5wdXNoKGluc2VydChbY2hpbGRUb0luc2VydF0sIHBvc2l0aW9uLCBbe1xuICAgICAgICBfa2V5OiB0YXJnZXRCbG9jay5fa2V5XG4gICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgX2tleTogdGFyZ2V0Q2hpbGQuX2tleVxuICAgICAgfV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGNoZXM7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpbnNlcnROb2RlUGF0Y2gsXG4gICAgaW5zZXJ0VGV4dFBhdGNoLFxuICAgIG1lcmdlTm9kZVBhdGNoLFxuICAgIG1vdmVOb2RlUGF0Y2gsXG4gICAgcmVtb3ZlTm9kZVBhdGNoLFxuICAgIHJlbW92ZVRleHRQYXRjaCxcbiAgICBzZXROb2RlUGF0Y2gsXG4gICAgc3BsaXROb2RlUGF0Y2hcbiAgfTtcbn1cbmNvbnN0IElTX0FQUExZSU5HX0JFSEFWSU9SX0FDVElPTlMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IsIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcik7XG4gIElTX0FQUExZSU5HX0JFSEFWSU9SX0FDVElPTlMuc2V0KGVkaXRvciwgITApLCBmbigpLCBJU19BUFBMWUlOR19CRUhBVklPUl9BQ1RJT05TLnNldChlZGl0b3IsIHByZXYpO1xufVxuZnVuY3Rpb24gaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpIHtcbiAgcmV0dXJuIElTX0FQUExZSU5HX0JFSEFWSU9SX0FDVElPTlMuZ2V0KGVkaXRvcikgPz8gITE7XG59XG5mdW5jdGlvbiBjcmVhdGVXaXRoRXZlbnRMaXN0ZW5lcnMoZWRpdG9yQWN0b3IsIHN1YnNjcmlwdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQubWF4QmxvY2tzICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gZWRpdG9yO1xuICAgIHN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBlZGl0b3JBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJhbm5vdGF0aW9uLmFkZFwiOiB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJhbm5vdGF0aW9uLmFkZFwiLFxuICAgICAgICAgICAgICAgIGFubm90YXRpb246IGV2ZW50LmFubm90YXRpb25cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiYW5ub3RhdGlvbi5yZW1vdmVcIjoge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5yZW1vdmVcIixcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiBldmVudC5hbm5vdGF0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImJsdXJcIjoge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYmx1clwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImN1c3RvbS4qXCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImN1c3RvbSBiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiBldmVudC5ldmVudCxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiZGVjb3JhdG9yLnRvZ2dsZVwiOiB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gICAgICAgICAgICAgICAgZGVjb3JhdG9yOiBldmVudC5kZWNvcmF0b3JcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiZm9jdXNcIjoge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZm9jdXNcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJpbnNlcnQuYmxvY2sgb2JqZWN0XCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImluc2VydC5ibG9jayBvYmplY3RcIixcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IGV2ZW50LnBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICBibG9ja09iamVjdDogZXZlbnQuYmxvY2tPYmplY3RcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiaW5zZXJ0LmlubGluZSBvYmplY3RcIjoge1xuICAgICAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0LmlubGluZSBvYmplY3RcIixcbiAgICAgICAgICAgICAgICBpbmxpbmVPYmplY3Q6IGV2ZW50LmlubGluZU9iamVjdFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJsaXN0IGl0ZW0udG9nZ2xlXCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImxpc3QgaXRlbS50b2dnbGVcIixcbiAgICAgICAgICAgICAgICBsaXN0SXRlbTogZXZlbnQubGlzdEl0ZW1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6IHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNlbGVjdFwiLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjogZXZlbnQuc2VsZWN0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcInN0eWxlLnRvZ2dsZVwiOiB7XG4gICAgICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHlsZS50b2dnbGVcIixcbiAgICAgICAgICAgICAgICBzdHlsZTogZXZlbnQuc3R5bGVcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZWRpdG9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgZGVsZXRlQmFja3dhcmQ6IGRlbGV0ZUJhY2t3YXJkMixcbiAgICAgIGRlbGV0ZUZvcndhcmQ6IGRlbGV0ZUZvcndhcmQyLFxuICAgICAgaW5zZXJ0QnJlYWssXG4gICAgICBpbnNlcnRTb2Z0QnJlYWssXG4gICAgICBpbnNlcnRUZXh0OiBpbnNlcnRUZXh0MixcbiAgICAgIHNlbGVjdFxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5kZWxldGVCYWNrd2FyZCA9ICh1bml0KSA9PiB7XG4gICAgICBpZiAoaXNBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhlZGl0b3IpKSB7XG4gICAgICAgIGRlbGV0ZUJhY2t3YXJkMih1bml0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlLmJhY2t3YXJkXCIsXG4gICAgICAgICAgdW5pdFxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5kZWxldGVGb3J3YXJkID0gKHVuaXQpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcikpIHtcbiAgICAgICAgZGVsZXRlRm9yd2FyZDIodW5pdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImRlbGV0ZS5mb3J3YXJkXCIsXG4gICAgICAgICAgdW5pdFxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5pbnNlcnRCcmVhayA9ICgpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcikpIHtcbiAgICAgICAgaW5zZXJ0QnJlYWsoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0LmJyZWFrXCJcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0U29mdEJyZWFrID0gKCkgPT4ge1xuICAgICAgaWYgKGlzQXBwbHlpbmdCZWhhdmlvckFjdGlvbnMoZWRpdG9yKSkge1xuICAgICAgICBpbnNlcnRTb2Z0QnJlYWsoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0LnNvZnQgYnJlYWtcIlxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5pbnNlcnRUZXh0ID0gKHRleHQsIG9wdGlvbnMpID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcikpIHtcbiAgICAgICAgaW5zZXJ0VGV4dDIodGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImluc2VydC50ZXh0XCIsXG4gICAgICAgICAgdGV4dCxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvcixcbiAgICAgICAgZGVmYXVsdEFjdGlvbkNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgaW5zZXJ0VGV4dDIodGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGVkaXRvci5zZWxlY3QgPSAobG9jYXRpb24pID0+IHtcbiAgICAgIGlmIChpc0FwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGVkaXRvcikpIHtcbiAgICAgICAgc2VsZWN0KGxvY2F0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmFuZ2UgPSBFZGl0b3IucmFuZ2UoZWRpdG9yLCBsb2NhdGlvbik7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJzZWxlY3RcIixcbiAgICAgICAgICBzZWxlY3Rpb246IHRvUG9ydGFibGVUZXh0UmFuZ2UoZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKSwgcmFuZ2UsIGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEpXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvcixcbiAgICAgICAgZGVmYXVsdEFjdGlvbkNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgc2VsZWN0KGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlV2l0aE1heEJsb2NrcyhlZGl0b3JBY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MlxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5hcHBseSA9IChvcGVyYXRpb24pID0+IHtcbiAgICAgIGlmIChlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgICBcImVkaXQgbW9kZVwiOiBcInJlYWQgb25seVwiXG4gICAgICB9KSkge1xuICAgICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ2hhbmdpbmdSZW1vdGVseShlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcGVyYXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRvaW5nKGVkaXRvcikgfHwgaXNSZWRvaW5nKGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJvd3MgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQubWF4QmxvY2tzID8/IC0xO1xuICAgICAgcm93cyA+IDAgJiYgZWRpdG9yLmNoaWxkcmVuLmxlbmd0aCA+PSByb3dzICYmIChvcGVyYXRpb24udHlwZSA9PT0gXCJpbnNlcnRfbm9kZVwiIHx8IG9wZXJhdGlvbi50eXBlID09PSBcInNwbGl0X25vZGVcIikgJiYgb3BlcmF0aW9uLnBhdGgubGVuZ3RoID09PSAxIHx8IGFwcGx5MihvcGVyYXRpb24pO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdpdGhPYmplY3RLZXlzKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcykge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MixcbiAgICAgIG5vcm1hbGl6ZU5vZGVcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3IuYXBwbHkgPSAob3BlcmF0aW9uKSA9PiB7XG4gICAgICBpZiAoaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZG9pbmcoZWRpdG9yKSB8fCBpc1JlZG9pbmcoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdGlvbi50eXBlID09PSBcInNwbGl0X25vZGVcIikge1xuICAgICAgICBhcHBseTIoe1xuICAgICAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAuLi5vcGVyYXRpb24ucHJvcGVydGllcyxcbiAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gXCJpbnNlcnRfbm9kZVwiICYmICFFZGl0b3IuaXNFZGl0b3Iob3BlcmF0aW9uLm5vZGUpKSB7XG4gICAgICAgIGFwcGx5Mih7XG4gICAgICAgICAgLi4ub3BlcmF0aW9uLFxuICAgICAgICAgIG5vZGU6IHtcbiAgICAgICAgICAgIC4uLm9wZXJhdGlvbi5ub2RlLFxuICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgfSwgZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlLCBwYXRoXSA9IGVudHJ5O1xuICAgICAgaWYgKEVsZW1lbnQkMS5pc0VsZW1lbnQobm9kZSkgJiYgbm9kZS5fdHlwZSA9PT0gc2NoZW1hVHlwZXMuYmxvY2submFtZSkge1xuICAgICAgICBpZiAoIW5vZGUuX2tleSkge1xuICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKClcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBwYXRoKSlcbiAgICAgICAgICBpZiAoIWNoaWxkLl9rZXkpIHtcbiAgICAgICAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKClcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYXQ6IGNoaWxkUGF0aFxuICAgICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm9ybWFsaXplTm9kZShlbnRyeSk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckZSA9IGRlYnVnV2l0aE5hbWUoXCJhcHBseVBhdGNoZXNcIiksIGRlYnVnVmVyYm9zZSA9IGRlYnVnJGUuZW5hYmxlZCAmJiAhMDtcbmZ1bmN0aW9uIGNyZWF0ZUFwcGx5UGF0Y2goc2NoZW1hVHlwZXMpIHtcbiAgcmV0dXJuIChlZGl0b3IsIHBhdGNoKSA9PiB7XG4gICAgbGV0IGNoYW5nZWQgPSAhMTtcbiAgICBkZWJ1Z1ZlcmJvc2UgJiYgKGRlYnVnJGUoYFxuXG5ORVcgUEFUQ0ggPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PWApLCBkZWJ1ZyRlKEpTT04uc3RyaW5naWZ5KHBhdGNoLCBudWxsLCAyKSkpO1xuICAgIHRyeSB7XG4gICAgICBzd2l0Y2ggKHBhdGNoLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImluc2VydFwiOlxuICAgICAgICAgIGNoYW5nZWQgPSBpbnNlcnRQYXRjaChlZGl0b3IsIHBhdGNoLCBzY2hlbWFUeXBlcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ1bnNldFwiOlxuICAgICAgICAgIGNoYW5nZWQgPSB1bnNldFBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2V0XCI6XG4gICAgICAgICAgY2hhbmdlZCA9IHNldFBhdGNoKGVkaXRvciwgcGF0Y2gpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGlmZk1hdGNoUGF0Y2hcIjpcbiAgICAgICAgICBjaGFuZ2VkID0gZGlmZk1hdGNoUGF0Y2goZWRpdG9yLCBwYXRjaCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZGVidWckZShcIlVuaGFuZGxlZCBwYXRjaFwiLCBwYXRjaC50eXBlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH07XG59XG5mdW5jdGlvbiBkaWZmTWF0Y2hQYXRjaChlZGl0b3IsIHBhdGNoKSB7XG4gIGNvbnN0IHtcbiAgICBibG9jayxcbiAgICBjaGlsZCxcbiAgICBjaGlsZFBhdGhcbiAgfSA9IGZpbmRCbG9ja0FuZENoaWxkRnJvbVBhdGgoZWRpdG9yLCBwYXRjaC5wYXRoKTtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gZGVidWckZShcIkJsb2NrIG5vdCBmb3VuZFwiKSwgITE7XG4gIGlmICghY2hpbGQgfHwgIWNoaWxkUGF0aClcbiAgICByZXR1cm4gZGVidWckZShcIkNoaWxkIG5vdCBmb3VuZFwiKSwgITE7XG4gIGlmICghKGJsb2NrICYmIGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgcGF0Y2gucGF0aC5sZW5ndGggPT09IDQgJiYgcGF0Y2gucGF0aFsxXSA9PT0gXCJjaGlsZHJlblwiICYmIHBhdGNoLnBhdGhbM10gPT09IFwidGV4dFwiKSB8fCAhVGV4dC5pc1RleHQoY2hpbGQpKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3QgcGF0Y2hlcyA9IHBhcnNlKHBhdGNoLnZhbHVlKSwgW25ld1ZhbHVlXSA9IGFwcGx5KHBhdGNoZXMsIGNoaWxkLnRleHQsIHtcbiAgICBhbGxvd0V4Y2VlZGluZ0luZGljZXM6ICEwXG4gIH0pLCBkaWZmJDEgPSBjbGVhbnVwRWZmaWNpZW5jeShkaWZmKGNoaWxkLnRleHQsIG5ld1ZhbHVlKSwgNSk7XG4gIGRlYnVnU3RhdGUoZWRpdG9yLCBcImJlZm9yZVwiKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgW29wLCB0ZXh0XSBvZiBkaWZmJDEpXG4gICAgb3AgPT09IERJRkZfSU5TRVJUID8gKGVkaXRvci5hcHBseSh7XG4gICAgICB0eXBlOiBcImluc2VydF90ZXh0XCIsXG4gICAgICBwYXRoOiBjaGlsZFBhdGgsXG4gICAgICBvZmZzZXQsXG4gICAgICB0ZXh0XG4gICAgfSksIG9mZnNldCArPSB0ZXh0Lmxlbmd0aCkgOiBvcCA9PT0gRElGRl9ERUxFVEUgPyBlZGl0b3IuYXBwbHkoe1xuICAgICAgdHlwZTogXCJyZW1vdmVfdGV4dFwiLFxuICAgICAgcGF0aDogY2hpbGRQYXRoLFxuICAgICAgb2Zmc2V0LFxuICAgICAgdGV4dFxuICAgIH0pIDogb3AgPT09IERJRkZfRVFVQUwgJiYgKG9mZnNldCArPSB0ZXh0Lmxlbmd0aCk7XG4gIHJldHVybiBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJhZnRlclwiKSwgITA7XG59XG5mdW5jdGlvbiBpbnNlcnRQYXRjaChlZGl0b3IsIHBhdGNoLCBzY2hlbWFUeXBlcykge1xuICBjb25zdCB7XG4gICAgYmxvY2s6IHRhcmdldEJsb2NrLFxuICAgIGNoaWxkOiB0YXJnZXRDaGlsZCxcbiAgICBibG9ja1BhdGg6IHRhcmdldEJsb2NrUGF0aCxcbiAgICBjaGlsZFBhdGg6IHRhcmdldENoaWxkUGF0aFxuICB9ID0gZmluZEJsb2NrQW5kQ2hpbGRGcm9tUGF0aChlZGl0b3IsIHBhdGNoLnBhdGgpO1xuICBpZiAoIXRhcmdldEJsb2NrIHx8ICF0YXJnZXRCbG9ja1BhdGgpXG4gICAgcmV0dXJuIGRlYnVnJGUoXCJCbG9jayBub3QgZm91bmRcIiksICExO1xuICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPiAxICYmIHBhdGNoLnBhdGhbMV0gIT09IFwiY2hpbGRyZW5cIilcbiAgICByZXR1cm4gZGVidWckZShcIklnbm9yaW5nIHBhdGNoIHRhcmdldGluZyB2b2lkIHZhbHVlXCIpLCAhMTtcbiAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXRlbXM6IGl0ZW1zMixcbiAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbjJcbiAgICB9ID0gcGF0Y2gsIGJsb2Nrc1RvSW5zZXJ0ID0gdG9TbGF0ZVZhbHVlKGl0ZW1zMiwge1xuICAgICAgc2NoZW1hVHlwZXNcbiAgICB9LCBLRVlfVE9fU0xBVEVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIHRhcmdldEJsb2NrSW5kZXggPSB0YXJnZXRCbG9ja1BhdGhbMF0sIG5vcm1hbGl6ZWRJZHgyID0gcG9zaXRpb24yID09PSBcImFmdGVyXCIgPyB0YXJnZXRCbG9ja0luZGV4ICsgMSA6IHRhcmdldEJsb2NrSW5kZXg7XG4gICAgcmV0dXJuIGRlYnVnJGUoYEluc2VydGluZyBibG9ja3MgYXQgcGF0aCBbJHtub3JtYWxpemVkSWR4Mn1dYCksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImJlZm9yZVwiKSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGJsb2Nrc1RvSW5zZXJ0LCB7XG4gICAgICBhdDogW25vcm1hbGl6ZWRJZHgyXVxuICAgIH0pLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJhZnRlclwiKSwgITA7XG4gIH1cbiAgY29uc3Qge1xuICAgIGl0ZW1zLFxuICAgIHBvc2l0aW9uXG4gIH0gPSBwYXRjaDtcbiAgaWYgKCF0YXJnZXRDaGlsZCB8fCAhdGFyZ2V0Q2hpbGRQYXRoKVxuICAgIHJldHVybiBkZWJ1ZyRlKFwiQ2hpbGQgbm90IGZvdW5kXCIpLCAhMTtcbiAgY29uc3QgY2hpbGRyZW5Ub0luc2VydCA9IHRhcmdldEJsb2NrICYmIHRvU2xhdGVWYWx1ZShbe1xuICAgIC4uLnRhcmdldEJsb2NrLFxuICAgIGNoaWxkcmVuOiBpdGVtc1xuICB9XSwge1xuICAgIHNjaGVtYVR5cGVzXG4gIH0sIEtFWV9UT19TTEFURV9FTEVNRU5ULmdldChlZGl0b3IpKSwgdGFyZ2V0Q2hpbGRJbmRleCA9IHRhcmdldENoaWxkUGF0aFsxXSwgbm9ybWFsaXplZElkeCA9IHBvc2l0aW9uID09PSBcImFmdGVyXCIgPyB0YXJnZXRDaGlsZEluZGV4ICsgMSA6IHRhcmdldENoaWxkSW5kZXgsIGNoaWxkSW5zZXJ0UGF0aCA9IFt0YXJnZXRDaGlsZFBhdGhbMF0sIG5vcm1hbGl6ZWRJZHhdO1xuICByZXR1cm4gZGVidWckZShgSW5zZXJ0aW5nIGNoaWxkcmVuIGF0IHBhdGggJHtjaGlsZEluc2VydFBhdGh9YCksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImJlZm9yZVwiKSwgY2hpbGRyZW5Ub0luc2VydCAmJiBFbGVtZW50JDEuaXNFbGVtZW50KGNoaWxkcmVuVG9JbnNlcnRbMF0pICYmIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBjaGlsZHJlblRvSW5zZXJ0WzBdLmNoaWxkcmVuLCB7XG4gICAgYXQ6IGNoaWxkSW5zZXJ0UGF0aFxuICB9KSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwO1xufVxuZnVuY3Rpb24gc2V0UGF0Y2goZWRpdG9yLCBwYXRjaCkge1xuICBsZXQgdmFsdWUgPSBwYXRjaC52YWx1ZTtcbiAgdHlwZW9mIHBhdGNoLnBhdGhbM10gPT0gXCJzdHJpbmdcIiAmJiAodmFsdWUgPSB7fSwgdmFsdWVbcGF0Y2gucGF0aFszXV0gPSBwYXRjaC52YWx1ZSk7XG4gIGNvbnN0IHtcbiAgICBibG9jayxcbiAgICBibG9ja1BhdGgsXG4gICAgY2hpbGQsXG4gICAgY2hpbGRQYXRoXG4gIH0gPSBmaW5kQmxvY2tBbmRDaGlsZEZyb21QYXRoKGVkaXRvciwgcGF0Y2gucGF0aCk7XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuIGRlYnVnJGUoXCJCbG9jayBub3QgZm91bmRcIiksICExO1xuICBjb25zdCBpc1RleHRCbG9jayA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jayk7XG4gIGlmIChpc1RleHRCbG9jayAmJiBwYXRjaC5wYXRoLmxlbmd0aCA+IDEgJiYgcGF0Y2gucGF0aFsxXSAhPT0gXCJjaGlsZHJlblwiKVxuICAgIHJldHVybiBkZWJ1ZyRlKFwiSWdub3Jpbmcgc2V0dGluZyB2b2lkIHZhbHVlXCIpLCAhMTtcbiAgaWYgKGRlYnVnU3RhdGUoZWRpdG9yLCBcImJlZm9yZVwiKSwgaXNUZXh0QmxvY2sgJiYgY2hpbGQgJiYgY2hpbGRQYXRoKSB7XG4gICAgaWYgKFRleHQuaXNUZXh0KHZhbHVlKSAmJiBUZXh0LmlzVGV4dChjaGlsZCkpIHtcbiAgICAgIGNvbnN0IG5ld1RleHQgPSBjaGlsZC50ZXh0O1xuICAgICAgdmFsdWUudGV4dCAhPT0gbmV3VGV4dCAmJiAoZGVidWckZShcIlNldHRpbmcgdGV4dCBwcm9wZXJ0eVwiKSwgZWRpdG9yLmFwcGx5KHtcbiAgICAgICAgdHlwZTogXCJyZW1vdmVfdGV4dFwiLFxuICAgICAgICBwYXRoOiBjaGlsZFBhdGgsXG4gICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgdGV4dDogbmV3VGV4dFxuICAgICAgfSksIGVkaXRvci5hcHBseSh7XG4gICAgICAgIHR5cGU6IFwiaW5zZXJ0X3RleHRcIixcbiAgICAgICAgcGF0aDogY2hpbGRQYXRoLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIHRleHQ6IHZhbHVlLnRleHRcbiAgICAgIH0pLCBlZGl0b3Iub25DaGFuZ2UoKSk7XG4gICAgfSBlbHNlXG4gICAgICBkZWJ1ZyRlKFwiU2V0dGluZyBub24tdGV4dCBwcm9wZXJ0eVwiKSwgZWRpdG9yLmFwcGx5KHtcbiAgICAgICAgdHlwZTogXCJzZXRfbm9kZVwiLFxuICAgICAgICBwYXRoOiBjaGlsZFBhdGgsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBuZXdQcm9wZXJ0aWVzOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgcmV0dXJuICEwO1xuICB9IGVsc2UgaWYgKEVsZW1lbnQkMS5pc0VsZW1lbnQoYmxvY2spICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAxICYmIGJsb2NrUGF0aCkge1xuICAgIGRlYnVnJGUoXCJTZXR0aW5nIGJsb2NrIHByb3BlcnR5XCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgLi4ubmV4dFJlc3RcbiAgICB9ID0gdmFsdWUsIHtcbiAgICAgIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sXG4gICAgICAuLi5wcmV2UmVzdFxuICAgIH0gPSBibG9jayB8fCB7XG4gICAgICBjaGlsZHJlbjogdm9pZCAwXG4gICAgfTtcbiAgICBlZGl0b3IuYXBwbHkoe1xuICAgICAgdHlwZTogXCJzZXRfbm9kZVwiLFxuICAgICAgcGF0aDogYmxvY2tQYXRoLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAuLi5wcmV2UmVzdFxuICAgICAgfSxcbiAgICAgIG5ld1Byb3BlcnRpZXM6IG5leHRSZXN0XG4gICAgfSksIGRlYnVnJGUoXCJTZXR0aW5nIGNoaWxkcmVuXCIpLCBibG9jay5jaGlsZHJlbi5mb3JFYWNoKChjMiwgY0luZGV4KSA9PiB7XG4gICAgICBlZGl0b3IuYXBwbHkoe1xuICAgICAgICB0eXBlOiBcInJlbW92ZV9ub2RlXCIsXG4gICAgICAgIHBhdGg6IGJsb2NrUGF0aC5jb25jYXQoYmxvY2suY2hpbGRyZW4ubGVuZ3RoIC0gMSAtIGNJbmRleCksXG4gICAgICAgIG5vZGU6IGMyXG4gICAgICB9KTtcbiAgICB9KSwgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4uZm9yRWFjaCgoYzIsIGNJbmRleCkgPT4ge1xuICAgICAgZWRpdG9yLmFwcGx5KHtcbiAgICAgICAgdHlwZTogXCJpbnNlcnRfbm9kZVwiLFxuICAgICAgICBwYXRoOiBibG9ja1BhdGguY29uY2F0KGNJbmRleCksXG4gICAgICAgIG5vZGU6IGMyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChibG9jayAmJiBcInZhbHVlXCIgaW4gYmxvY2spIHtcbiAgICBjb25zdCBuZXdWYWwgPSBhcHBseUFsbChbYmxvY2sudmFsdWVdLCBbcGF0Y2hdKVswXTtcbiAgICByZXR1cm4gVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgIC4uLmJsb2NrLFxuICAgICAgdmFsdWU6IG5ld1ZhbFxuICAgIH0sIHtcbiAgICAgIGF0OiBibG9ja1BhdGhcbiAgICB9KSwgITA7XG4gIH1cbiAgcmV0dXJuIGRlYnVnU3RhdGUoZWRpdG9yLCBcImFmdGVyXCIpLCAhMDtcbn1cbmZ1bmN0aW9uIHVuc2V0UGF0Y2goZWRpdG9yLCBwYXRjaCkge1xuICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICBkZWJ1ZyRlKFwiUmVtb3ZpbmcgZXZlcnl0aGluZ1wiKSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYmVmb3JlXCIpO1xuICAgIGNvbnN0IHByZXZpb3VzU2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbjtcbiAgICByZXR1cm4gVHJhbnNmb3Jtcy5kZXNlbGVjdChlZGl0b3IpLCBlZGl0b3IuY2hpbGRyZW4uZm9yRWFjaCgoX2NoaWxkLCBpKSA9PiB7XG4gICAgICBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogW2ldXG4gICAgICB9KTtcbiAgICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGVkaXRvci5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgICAgZGVjb3JhdG9yczogW11cbiAgICB9KSksIHByZXZpb3VzU2VsZWN0aW9uICYmIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwge1xuICAgICAgYW5jaG9yOiB7XG4gICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9LFxuICAgICAgZm9jdXM6IHtcbiAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH1cbiAgICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCksIGRlYnVnU3RhdGUoZWRpdG9yLCBcImFmdGVyXCIpLCAhMDtcbiAgfVxuICBjb25zdCB7XG4gICAgYmxvY2ssXG4gICAgYmxvY2tQYXRoLFxuICAgIGNoaWxkLFxuICAgIGNoaWxkUGF0aFxuICB9ID0gZmluZEJsb2NrQW5kQ2hpbGRGcm9tUGF0aChlZGl0b3IsIHBhdGNoLnBhdGgpO1xuICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoIWJsb2NrIHx8ICFibG9ja1BhdGgpXG4gICAgICByZXR1cm4gZGVidWckZShcIkJsb2NrIG5vdCBmb3VuZFwiKSwgITE7XG4gICAgY29uc3QgYmxvY2tJbmRleCA9IGJsb2NrUGF0aFswXTtcbiAgICByZXR1cm4gZGVidWckZShgUmVtb3ZpbmcgYmxvY2sgYXQgcGF0aCBbJHtibG9ja0luZGV4fV1gKSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYmVmb3JlXCIpLCBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwge1xuICAgICAgYXQ6IFtibG9ja0luZGV4XVxuICAgIH0pLCBkZWJ1Z1N0YXRlKGVkaXRvciwgXCJhZnRlclwiKSwgITA7XG4gIH1cbiAgcmV0dXJuIGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgcGF0Y2gucGF0aFsxXSA9PT0gXCJjaGlsZHJlblwiICYmIHBhdGNoLnBhdGgubGVuZ3RoID09PSAzID8gIWNoaWxkIHx8ICFjaGlsZFBhdGggPyAoZGVidWckZShcIkNoaWxkIG5vdCBmb3VuZFwiKSwgITEpIDogKGRlYnVnJGUoYFVuc2V0dGluZyBjaGlsZCBhdCBwYXRoICR7SlNPTi5zdHJpbmdpZnkoY2hpbGRQYXRoKX1gKSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYmVmb3JlXCIpLCBkZWJ1Z1ZlcmJvc2UgJiYgZGVidWckZShgUmVtb3ZpbmcgY2hpbGQgYXQgcGF0aCAke0pTT04uc3RyaW5naWZ5KGNoaWxkUGF0aCl9YCksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgYXQ6IGNoaWxkUGF0aFxuICB9KSwgZGVidWdTdGF0ZShlZGl0b3IsIFwiYWZ0ZXJcIiksICEwKSA6ICExO1xufVxuZnVuY3Rpb24gaXNLZXllZFNlZ21lbnQoc2VnbWVudCkge1xuICByZXR1cm4gdHlwZW9mIHNlZ21lbnQgPT0gXCJvYmplY3RcIiAmJiBcIl9rZXlcIiBpbiBzZWdtZW50O1xufVxuZnVuY3Rpb24gZGVidWdTdGF0ZShlZGl0b3IsIHN0YXRlTmFtZSkge1xuICBkZWJ1Z1ZlcmJvc2UgJiYgKGRlYnVnJGUoYENoaWxkcmVuICR7c3RhdGVOYW1lfTpgLCBKU09OLnN0cmluZ2lmeShlZGl0b3IuY2hpbGRyZW4sIG51bGwsIDIpKSwgZGVidWckZShgU2VsZWN0aW9uICR7c3RhdGVOYW1lfTogYCwgSlNPTi5zdHJpbmdpZnkoZWRpdG9yLnNlbGVjdGlvbiwgbnVsbCwgMikpKTtcbn1cbmZ1bmN0aW9uIGZpbmRCbG9ja0Zyb21QYXRoKGVkaXRvciwgcGF0aCkge1xuICBsZXQgYmxvY2tJbmRleCA9IC0xO1xuICBjb25zdCBibG9jayA9IGVkaXRvci5jaGlsZHJlbi5maW5kKChub2RlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBpc0tleWVkU2VnbWVudChwYXRoWzBdKSA/IG5vZGUuX2tleSA9PT0gcGF0aFswXS5fa2V5IDogaW5kZXggPT09IHBhdGhbMF07XG4gICAgcmV0dXJuIGlzTWF0Y2ggJiYgKGJsb2NrSW5kZXggPSBpbmRleCksIGlzTWF0Y2g7XG4gIH0pO1xuICByZXR1cm4gYmxvY2sgPyB7XG4gICAgYmxvY2ssXG4gICAgcGF0aDogW2Jsb2NrSW5kZXhdXG4gIH0gOiB7fTtcbn1cbmZ1bmN0aW9uIGZpbmRCbG9ja0FuZENoaWxkRnJvbVBhdGgoZWRpdG9yLCBwYXRoKSB7XG4gIGNvbnN0IHtcbiAgICBibG9jayxcbiAgICBwYXRoOiBibG9ja1BhdGhcbiAgfSA9IGZpbmRCbG9ja0Zyb21QYXRoKGVkaXRvciwgcGF0aCk7XG4gIGlmICghKEVsZW1lbnQkMS5pc0VsZW1lbnQoYmxvY2spICYmIHBhdGhbMV0gPT09IFwiY2hpbGRyZW5cIikpXG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrLFxuICAgICAgYmxvY2tQYXRoLFxuICAgICAgY2hpbGQ6IHZvaWQgMCxcbiAgICAgIGNoaWxkUGF0aDogdm9pZCAwXG4gICAgfTtcbiAgbGV0IGNoaWxkSW5kZXggPSAtMTtcbiAgY29uc3QgY2hpbGQgPSBibG9jay5jaGlsZHJlbi5maW5kKChub2RlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBpc0tleWVkU2VnbWVudChwYXRoWzJdKSA/IG5vZGUuX2tleSA9PT0gcGF0aFsyXS5fa2V5IDogaW5kZXggPT09IHBhdGhbMl07XG4gICAgcmV0dXJuIGlzTWF0Y2ggJiYgKGNoaWxkSW5kZXggPSBpbmRleCksIGlzTWF0Y2g7XG4gIH0pO1xuICByZXR1cm4gY2hpbGQgPyB7XG4gICAgYmxvY2ssXG4gICAgY2hpbGQsXG4gICAgYmxvY2tQYXRoLFxuICAgIGNoaWxkUGF0aDogYmxvY2tQYXRoPy5jb25jYXQoY2hpbGRJbmRleClcbiAgfSA6IHtcbiAgICBibG9jayxcbiAgICBibG9ja1BhdGgsXG4gICAgY2hpbGQ6IHZvaWQgMCxcbiAgICBjaGlsZFBhdGg6IHZvaWQgMFxuICB9O1xufVxuY29uc3QgZGVidWckZCA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFBhdGNoZXNcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoUGF0Y2hlcyh7XG4gIGVkaXRvckFjdG9yLFxuICBwYXRjaEZ1bmN0aW9ucyxcbiAgc2NoZW1hVHlwZXMsXG4gIHN1YnNjcmlwdGlvbnNcbn0pIHtcbiAgbGV0IHByZXZpb3VzQ2hpbGRyZW47XG4gIGNvbnN0IGFwcGx5UGF0Y2ggPSBjcmVhdGVBcHBseVBhdGNoKHNjaGVtYVR5cGVzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIElTX1BST0NFU1NJTkdfUkVNT1RFX0NIQU5HRVMuc2V0KGVkaXRvciwgITEpLCBQQVRDSElORy5zZXQoZWRpdG9yLCAhMCksIHByZXZpb3VzQ2hpbGRyZW4gPSBbLi4uZWRpdG9yLmNoaWxkcmVuXTtcbiAgICBjb25zdCB7XG4gICAgICBhcHBseTogYXBwbHkyXG4gICAgfSA9IGVkaXRvcjtcbiAgICBsZXQgYnVmZmVyZWRQYXRjaGVzID0gW107XG4gICAgY29uc3QgaGFuZGxlQnVmZmVyZWRSZW1vdGVQYXRjaGVzID0gKCkgPT4ge1xuICAgICAgaWYgKGJ1ZmZlcmVkUGF0Y2hlcy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHBhdGNoZXMgPSBidWZmZXJlZFBhdGNoZXM7XG4gICAgICBidWZmZXJlZFBhdGNoZXMgPSBbXTtcbiAgICAgIGxldCBjaGFuZ2VkID0gITE7XG4gICAgICB3aXRoUmVtb3RlQ2hhbmdlcyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgICB3aXRob3V0UGF0Y2hpbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICB3aXRob3V0U2F2aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICBwYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVidWckZC5lbmFibGVkICYmIGRlYnVnJGQoYEhhbmRsaW5nIHJlbW90ZSBwYXRjaCAke0pTT04uc3RyaW5naWZ5KHBhdGNoKX1gKSwgY2hhbmdlZCA9IGFwcGx5UGF0Y2goZWRpdG9yLCBwYXRjaCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLCBjaGFuZ2VkICYmIChlZGl0b3Iubm9ybWFsaXplKCksIGVkaXRvci5vbkNoYW5nZSgpKTtcbiAgICAgIH0pO1xuICAgIH0sIGhhbmRsZVBhdGNoZXMgPSAoe1xuICAgICAgcGF0Y2hlc1xuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHJlbW90ZVBhdGNoZXMgPSBwYXRjaGVzLmZpbHRlcigocCkgPT4gcC5vcmlnaW4gIT09IFwibG9jYWxcIik7XG4gICAgICByZW1vdGVQYXRjaGVzLmxlbmd0aCAhPT0gMCAmJiAoYnVmZmVyZWRQYXRjaGVzID0gYnVmZmVyZWRQYXRjaGVzLmNvbmNhdChyZW1vdGVQYXRjaGVzKSwgaGFuZGxlQnVmZmVyZWRSZW1vdGVQYXRjaGVzKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICBkZWJ1ZyRkKFwiU3Vic2NyaWJpbmcgdG8gcmVtb3RlIHBhdGNoZXNcIik7XG4gICAgICBjb25zdCBzdWIgPSBlZGl0b3JBY3Rvci5vbihcInBhdGNoZXNcIiwgaGFuZGxlUGF0Y2hlcyk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkZWJ1ZyRkKFwiVW5zdWJzY3JpYmluZyB0byByZW1vdGUgcGF0Y2hlc1wiKSwgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pLCBlZGl0b3IuYXBwbHkgPSAob3BlcmF0aW9uKSA9PiB7XG4gICAgICBsZXQgcGF0Y2hlcyA9IFtdO1xuICAgICAgcHJldmlvdXNDaGlsZHJlbiA9IGVkaXRvci5jaGlsZHJlbjtcbiAgICAgIGNvbnN0IGVkaXRvcldhc0VtcHR5ID0gaXNFcXVhbFRvRW1wdHlFZGl0b3IocHJldmlvdXNDaGlsZHJlbiwgc2NoZW1hVHlwZXMpO1xuICAgICAgYXBwbHkyKG9wZXJhdGlvbik7XG4gICAgICBjb25zdCBlZGl0b3JJc0VtcHR5ID0gaXNFcXVhbFRvRW1wdHlFZGl0b3IoZWRpdG9yLmNoaWxkcmVuLCBzY2hlbWFUeXBlcyk7XG4gICAgICBpZiAoIWlzUGF0Y2hpbmcoZWRpdG9yKSlcbiAgICAgICAgcmV0dXJuIGVkaXRvcjtcbiAgICAgIHN3aXRjaCAoZWRpdG9yV2FzRW1wdHkgJiYgIWVkaXRvcklzRW1wdHkgJiYgb3BlcmF0aW9uLnR5cGUgIT09IFwic2V0X3NlbGVjdGlvblwiICYmIHBhdGNoZXMucHVzaChpbnNlcnQocHJldmlvdXNDaGlsZHJlbiwgXCJiZWZvcmVcIiwgWzBdKSksIG9wZXJhdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJpbnNlcnRfdGV4dFwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4ucGF0Y2hGdW5jdGlvbnMuaW5zZXJ0VGV4dFBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBwcmV2aW91c0NoaWxkcmVuKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJyZW1vdmVfdGV4dFwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4ucGF0Y2hGdW5jdGlvbnMucmVtb3ZlVGV4dFBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBwcmV2aW91c0NoaWxkcmVuKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJyZW1vdmVfbm9kZVwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4ucGF0Y2hGdW5jdGlvbnMucmVtb3ZlTm9kZVBhdGNoKGVkaXRvciwgb3BlcmF0aW9uLCBwcmV2aW91c0NoaWxkcmVuKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzcGxpdF9ub2RlXCI6XG4gICAgICAgICAgcGF0Y2hlcyA9IFsuLi5wYXRjaGVzLCAuLi5wYXRjaEZ1bmN0aW9ucy5zcGxpdE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaW5zZXJ0X25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLmluc2VydE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2V0X25vZGVcIjpcbiAgICAgICAgICBwYXRjaGVzID0gWy4uLnBhdGNoZXMsIC4uLnBhdGNoRnVuY3Rpb25zLnNldE5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWVyZ2Vfbm9kZVwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4ucGF0Y2hGdW5jdGlvbnMubWVyZ2VOb2RlUGF0Y2goZWRpdG9yLCBvcGVyYXRpb24sIHByZXZpb3VzQ2hpbGRyZW4pXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1vdmVfbm9kZVwiOlxuICAgICAgICAgIHBhdGNoZXMgPSBbLi4ucGF0Y2hlcywgLi4ucGF0Y2hGdW5jdGlvbnMubW92ZU5vZGVQYXRjaChlZGl0b3IsIG9wZXJhdGlvbiwgcHJldmlvdXNDaGlsZHJlbildO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFlZGl0b3JXYXNFbXB0eSAmJiBlZGl0b3JJc0VtcHR5ICYmIFtcIm1lcmdlX25vZGVcIiwgXCJzZXRfbm9kZVwiLCBcInJlbW92ZV90ZXh0XCIsIFwicmVtb3ZlX25vZGVcIl0uaW5jbHVkZXMob3BlcmF0aW9uLnR5cGUpICYmIChwYXRjaGVzID0gWy4uLnBhdGNoZXMsIHVuc2V0KFtdKV0sIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcInVuc2V0XCIsXG4gICAgICAgIHByZXZpb3VzVmFsdWU6IGZyb21TbGF0ZVZhbHVlKHByZXZpb3VzQ2hpbGRyZW4sIHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKVxuICAgICAgfSkpLCBlZGl0b3JXYXNFbXB0eSAmJiBwYXRjaGVzLmxlbmd0aCA+IDAgJiYgKHBhdGNoZXMgPSBbc2V0SWZNaXNzaW5nKFtdLCBbXSksIC4uLnBhdGNoZXNdKSwgcGF0Y2hlcy5sZW5ndGggPiAwICYmIHBhdGNoZXMuZm9yRWFjaCgocGF0Y2gpID0+IHtcbiAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJwYXRjaFwiLFxuICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAuLi5wYXRjaCxcbiAgICAgICAgICAgIG9yaWdpbjogXCJsb2NhbFwiXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pLCBlZGl0b3I7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckYyA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFBsYWNlaG9sZGVyQmxvY2tcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoUGxhY2Vob2xkZXJCbG9jayhlZGl0b3JBY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MlxuICAgIH0gPSBlZGl0b3I7XG4gICAgcmV0dXJuIGVkaXRvci5hcHBseSA9IChvcCkgPT4ge1xuICAgICAgaWYgKGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkubWF0Y2hlcyh7XG4gICAgICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgICAgIH0pKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc0NoYW5naW5nUmVtb3RlbHkoZWRpdG9yKSkge1xuICAgICAgICBhcHBseTIob3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRvaW5nKGVkaXRvcikgfHwgaXNSZWRvaW5nKGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG9wLnR5cGUgPT09IFwicmVtb3ZlX25vZGVcIikge1xuICAgICAgICBjb25zdCBub2RlID0gb3Aubm9kZTtcbiAgICAgICAgaWYgKG9wLnBhdGhbMF0gPT09IDAgJiYgRWRpdG9yLmlzVm9pZChlZGl0b3IsIG5vZGUpKSB7XG4gICAgICAgICAgY29uc3QgbmV4dFBhdGggPSBQYXRoLm5leHQob3AucGF0aCk7XG4gICAgICAgICAgZWRpdG9yLmNoaWxkcmVuW25leHRQYXRoWzBdXSB8fCAoZGVidWckYyhcIkFkZGluZyBwbGFjZWhvbGRlciBibG9ja1wiKSwgRWRpdG9yLmluc2VydE5vZGUoZWRpdG9yLCBlZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICAgICAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgICAgICAgfSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwbHkyKG9wKTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCBkZWJ1ZyRiID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoUG9ydGFibGVUZXh0QmxvY2tTdHlsZVwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhQb3J0YWJsZVRleHRCbG9ja1N0eWxlKGVkaXRvckFjdG9yLCB0eXBlcykge1xuICBjb25zdCBkZWZhdWx0U3R5bGUgPSB0eXBlcy5zdHlsZXNbMF0udmFsdWU7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBjb25zdCB7XG4gICAgICBub3JtYWxpemVOb2RlXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAobm9kZUVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBbLCBwYXRoXSA9IG5vZGVFbnRyeTtcbiAgICAgIGZvciAoY29uc3Qgb3Agb2YgZWRpdG9yLm9wZXJhdGlvbnMpXG4gICAgICAgIGlmIChvcC50eXBlID09PSBcInNwbGl0X25vZGVcIiAmJiBvcC5wYXRoLmxlbmd0aCA9PT0gMSAmJiBlZGl0b3IuaXNUZXh0QmxvY2sob3AucHJvcGVydGllcykgJiYgb3AucHJvcGVydGllcy5zdHlsZSAhPT0gZGVmYXVsdFN0eWxlICYmIG9wLnBhdGhbMF0gPT09IHBhdGhbMF0gJiYgIVBhdGguZXF1YWxzKHBhdGgsIG9wLnBhdGgpKSB7XG4gICAgICAgICAgY29uc3QgW2NoaWxkXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgW29wLnBhdGhbMF0gKyAxLCAwXSk7XG4gICAgICAgICAgaWYgKFRleHQuaXNUZXh0KGNoaWxkKSAmJiBjaGlsZC50ZXh0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICBkZWJ1ZyRiKGBOb3JtYWxpemluZyBzcGxpdCBub2RlIHRvICR7ZGVmYXVsdFN0eWxlfSBzdHlsZWAsIG9wKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiBkZWZhdWx0U3R5bGVcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYXQ6IFtvcC5wYXRoWzBdICsgMV0sXG4gICAgICAgICAgICAgIHZvaWRzOiAhMVxuICAgICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBub3JtYWxpemVOb2RlKG5vZGVFbnRyeSk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuZnVuY3Rpb24gaXNQb3J0YWJsZVRleHRTcGFuKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX3R5cGUgPT09IFwic3BhblwiICYmIFwidGV4dFwiIGluIG5vZGUgJiYgdHlwZW9mIG5vZGUudGV4dCA9PSBcInN0cmluZ1wiICYmICh0eXBlb2Ygbm9kZS5tYXJrcyA+IFwidVwiIHx8IEFycmF5LmlzQXJyYXkobm9kZS5tYXJrcykgJiYgbm9kZS5tYXJrcy5ldmVyeSgobWFyaykgPT4gdHlwZW9mIG1hcmsgPT0gXCJzdHJpbmdcIikpO1xufVxuZnVuY3Rpb24gaXNQb3J0YWJsZVRleHRCbG9jayhub2RlKSB7XG4gIHJldHVybiAoXG4gICAgLy8gQSBibG9jayBkb2Vzbid0IF9oYXZlXyB0byBiZSBuYW1lZCAnYmxvY2snIC0gdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuXG4gICAgLy8gYWxsb3dlZCBjaGlsZCB0eXBlcyBhbmQgbWFya3MsIG9uZSBtaWdodCBuYW1lIHRoZW0gZGlmZmVyZW50bHlcbiAgICB0eXBlb2Ygbm9kZS5fdHlwZSA9PSBcInN0cmluZ1wiICYmIC8vIFRvb2xraXQtdHlwZXMgbGlrZSBuZXN0ZWQgc3BhbnMgYXJlIEAtcHJlZml4ZWRcbiAgICBub2RlLl90eXBlWzBdICE9PSBcIkBcIiAmJiAvLyBgbWFya0RlZnNgIGlzbid0IF9yZXF1aXJlZF8gcGVyIHNheSwgYnV0IGlmIGl0J3MgdGhlcmUsIGl0IG5lZWRzIHRvIGJlIGFuIGFycmF5XG4gICAgKCEoXCJtYXJrRGVmc1wiIGluIG5vZGUpIHx8ICFub2RlLm1hcmtEZWZzIHx8IEFycmF5LmlzQXJyYXkobm9kZS5tYXJrRGVmcykgJiYgLy8gRXZlcnkgbWFyayBkZWZpbml0aW9uIG5lZWRzIHRvIGhhdmUgYW4gYF9rZXlgIHRvIGJlIG1hcHBhYmxlIGluIGNoaWxkIHNwYW5zXG4gICAgbm9kZS5tYXJrRGVmcy5ldmVyeSgoZGVmKSA9PiB0eXBlb2YgZGVmLl9rZXkgPT0gXCJzdHJpbmdcIikpICYmIC8vIGBjaGlsZHJlbmAgaXMgcmVxdWlyZWQgYW5kIG5lZWRzIHRvIGJlIGFuIGFycmF5XG4gICAgXCJjaGlsZHJlblwiIGluIG5vZGUgJiYgQXJyYXkuaXNBcnJheShub2RlLmNoaWxkcmVuKSAmJiAvLyBBbGwgY2hpbGRyZW4gYXJlIG9iamVjdHMgd2l0aCBgX3R5cGVgICh1c3VhbGx5IHNwYW5zLCBidXQgY2FuIGNvbnRhaW4gb3RoZXIgc3R1ZmYpXG4gICAgbm9kZS5jaGlsZHJlbi5ldmVyeSgoY2hpbGQpID0+IHR5cGVvZiBjaGlsZCA9PSBcIm9iamVjdFwiICYmIFwiX3R5cGVcIiBpbiBjaGlsZClcbiAgKTtcbn1cbmZ1bmN0aW9uIGdldFByZXZpb3VzU3Bhbih7XG4gIGVkaXRvcixcbiAgYmxvY2tQYXRoLFxuICBzcGFuUGF0aFxufSkge1xuICBsZXQgcHJldmlvdXNTcGFuO1xuICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoLCB7XG4gICAgcmV2ZXJzZTogITBcbiAgfSkpXG4gICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSAmJiBQYXRoLmlzQmVmb3JlKGNoaWxkUGF0aCwgc3BhblBhdGgpKSB7XG4gICAgICBwcmV2aW91c1NwYW4gPSBjaGlsZDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgcmV0dXJuIHByZXZpb3VzU3Bhbjtcbn1cbmZ1bmN0aW9uIGdldE5leHRTcGFuKHtcbiAgZWRpdG9yLFxuICBibG9ja1BhdGgsXG4gIHNwYW5QYXRoXG59KSB7XG4gIGxldCBuZXh0U3BhbjtcbiAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgTm9kZS5jaGlsZHJlbihlZGl0b3IsIGJsb2NrUGF0aCkpXG4gICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSAmJiBQYXRoLmlzQWZ0ZXIoY2hpbGRQYXRoLCBzcGFuUGF0aCkpIHtcbiAgICAgIG5leHRTcGFuID0gY2hpbGQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gIHJldHVybiBuZXh0U3Bhbjtcbn1cbmNvbnN0IGRlYnVnJGEgPSBkZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQb3J0YWJsZVRleHRNYXJrTW9kZWxcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoUG9ydGFibGVUZXh0TWFya01vZGVsKGVkaXRvckFjdG9yLCB0eXBlcykge1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbHk6IGFwcGx5MixcbiAgICAgIG5vcm1hbGl6ZU5vZGVcbiAgICB9ID0gZWRpdG9yLCBkZWNvcmF0b3JzID0gdHlwZXMuZGVjb3JhdG9ycy5tYXAoKHQpID0+IHQudmFsdWUpO1xuICAgIHJldHVybiBlZGl0b3Iubm9ybWFsaXplTm9kZSA9IChub2RlRW50cnkpID0+IHtcbiAgICAgIGNvbnN0IFtub2RlLCBwYXRoXSA9IG5vZGVFbnRyeTtcbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgcGF0aCk7XG4gICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgY29uc3QgbmV4dE5vZGUgPSBub2RlLmNoaWxkcmVuW2NoaWxkUGF0aFsxXSArIDFdO1xuICAgICAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgJiYgZWRpdG9yLmlzVGV4dFNwYW4obmV4dE5vZGUpICYmIGNoaWxkLm1hcmtzPy5ldmVyeSgobWFyaykgPT4gbmV4dE5vZGUubWFya3M/LmluY2x1ZGVzKG1hcmspKSAmJiBuZXh0Tm9kZS5tYXJrcz8uZXZlcnkoKG1hcmspID0+IGNoaWxkLm1hcmtzPy5pbmNsdWRlcyhtYXJrKSkpIHtcbiAgICAgICAgICAgIGRlYnVnJGEoXCJNZXJnaW5nIHNwYW5zXCIsIEpTT04uc3RyaW5naWZ5KGNoaWxkLCBudWxsLCAyKSwgSlNPTi5zdHJpbmdpZnkobmV4dE5vZGUsIG51bGwsIDIpKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICAgICAgfSksIFRyYW5zZm9ybXMubWVyZ2VOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgYXQ6IFtjaGlsZFBhdGhbMF0sIGNoaWxkUGF0aFsxXSArIDFdLFxuICAgICAgICAgICAgICB2b2lkczogITBcbiAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhub2RlKSAmJiAhQXJyYXkuaXNBcnJheShub2RlLm1hcmtEZWZzKSkge1xuICAgICAgICBkZWJ1ZyRhKFwiQWRkaW5nIC5tYXJrRGVmcyB0byBibG9jayBub2RlXCIpLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya0RlZnM6IFtdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogcGF0aFxuICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0U3Bhbihub2RlKSAmJiAhQXJyYXkuaXNBcnJheShub2RlLm1hcmtzKSkge1xuICAgICAgICBkZWJ1ZyRhKFwiQWRkaW5nIC5tYXJrcyB0byBzcGFuIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwibm9ybWFsaXppbmdcIlxuICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogW11cbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImRvbmUgbm9ybWFsaXppbmdcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrUGF0aCA9IFBhdGgucGFyZW50KHBhdGgpLCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBibG9ja1BhdGgpLCBkZWNvcmF0b3JzMiA9IHR5cGVzLmRlY29yYXRvcnMubWFwKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSksIGFubm90YXRpb25zID0gbm9kZS5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9yczIuaW5jbHVkZXMobWFyaykpO1xuICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSAmJiBub2RlLnRleHQgPT09IFwiXCIgJiYgYW5ub3RhdGlvbnMgJiYgYW5ub3RhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGRlYnVnJGEoXCJSZW1vdmluZyBhbm5vdGF0aW9ucyBmcm9tIGVtcHR5IHNwYW4gbm9kZVwiKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KSwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hcmtzOiBub2RlLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+IGRlY29yYXRvcnMyLmluY2x1ZGVzKG1hcmspKVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkpIHtcbiAgICAgICAgY29uc3QgZGVjb3JhdG9yczIgPSB0eXBlcy5kZWNvcmF0b3JzLm1hcCgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUpO1xuICAgICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgcGF0aCkpXG4gICAgICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSkge1xuICAgICAgICAgICAgY29uc3QgbWFya3MgPSBjaGlsZC5tYXJrcyA/PyBbXSwgb3JwaGFuZWRBbm5vdGF0aW9ucyA9IG1hcmtzLmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMyLmluY2x1ZGVzKG1hcmspICYmICFub2RlLm1hcmtEZWZzPy5maW5kKChkZWYpID0+IGRlZi5fa2V5ID09PSBtYXJrKSk7XG4gICAgICAgICAgICBpZiAob3JwaGFuZWRBbm5vdGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGRlYnVnJGEoXCJSZW1vdmluZyBvcnBoYW5lZCBhbm5vdGF0aW9ucyBmcm9tIHNwYW4gbm9kZVwiKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAgIG1hcmtzOiBtYXJrcy5maWx0ZXIoKG1hcmspID0+ICFvcnBoYW5lZEFubm90YXRpb25zLmluY2x1ZGVzKG1hcmspKVxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgYXQ6IGNoaWxkUGF0aFxuICAgICAgICAgICAgICB9KSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dFNwYW4obm9kZSkpIHtcbiAgICAgICAgY29uc3QgYmxvY2tQYXRoID0gUGF0aC5wYXJlbnQocGF0aCksIFtibG9ja10gPSBFZGl0b3Iubm9kZShlZGl0b3IsIGJsb2NrUGF0aCk7XG4gICAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spKSB7XG4gICAgICAgICAgY29uc3QgZGVjb3JhdG9yczIgPSB0eXBlcy5kZWNvcmF0b3JzLm1hcCgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUpLCBtYXJrcyA9IG5vZGUubWFya3MgPz8gW10sIG9ycGhhbmVkQW5ub3RhdGlvbnMgPSBtYXJrcy5maWx0ZXIoKG1hcmspID0+ICFkZWNvcmF0b3JzMi5pbmNsdWRlcyhtYXJrKSAmJiAhYmxvY2subWFya0RlZnM/LmZpbmQoKGRlZikgPT4gZGVmLl9rZXkgPT09IG1hcmspKTtcbiAgICAgICAgICBpZiAob3JwaGFuZWRBbm5vdGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBkZWJ1ZyRhKFwiUmVtb3Zpbmcgb3JwaGFuZWQgYW5ub3RhdGlvbnMgZnJvbSBzcGFuIG5vZGVcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICBtYXJrczogbWFya3MuZmlsdGVyKChtYXJrKSA9PiAhb3JwaGFuZWRBbm5vdGF0aW9ucy5pbmNsdWRlcyhtYXJrKSlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkb25lIG5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhub2RlKSkge1xuICAgICAgICBjb25zdCBtYXJrRGVmcyA9IG5vZGUubWFya0RlZnMgPz8gW10sIG1hcmtEZWZLZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSwgbmV3TWFya0RlZnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBtYXJrRGVmIG9mIG1hcmtEZWZzKVxuICAgICAgICAgIG1hcmtEZWZLZXlzLmhhcyhtYXJrRGVmLl9rZXkpIHx8IChtYXJrRGVmS2V5cy5hZGQobWFya0RlZi5fa2V5KSwgbmV3TWFya0RlZnMucHVzaChtYXJrRGVmKSk7XG4gICAgICAgIGlmIChtYXJrRGVmcy5sZW5ndGggIT09IG5ld01hcmtEZWZzLmxlbmd0aCkge1xuICAgICAgICAgIGRlYnVnJGEoXCJSZW1vdmluZyBkdXBsaWNhdGUgbWFya0RlZnNcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrRGVmczogbmV3TWFya0RlZnNcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpICYmICFlZGl0b3Iub3BlcmF0aW9ucy5zb21lKChvcCkgPT4gb3AudHlwZSA9PT0gXCJtZXJnZV9ub2RlXCIgJiYgXCJtYXJrRGVmc1wiIGluIG9wLnByb3BlcnRpZXMgJiYgb3AucGF0aC5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIGNvbnN0IG5ld01hcmtEZWZzID0gKG5vZGUubWFya0RlZnMgfHwgW10pLmZpbHRlcigoZGVmKSA9PiBub2RlLmNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiBUZXh0LmlzVGV4dChjaGlsZCkgJiYgQXJyYXkuaXNBcnJheShjaGlsZC5tYXJrcykgJiYgY2hpbGQubWFya3MuaW5jbHVkZXMoZGVmLl9rZXkpKSk7XG4gICAgICAgIGlmIChub2RlLm1hcmtEZWZzICYmICFpc0VxdWFsKG5ld01hcmtEZWZzLCBub2RlLm1hcmtEZWZzKSkge1xuICAgICAgICAgIGRlYnVnJGEoXCJSZW1vdmluZyBtYXJrRGVmIG5vdCBpbiB1c2VcIiksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrRGVmczogbmV3TWFya0RlZnNcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogcGF0aFxuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub3JtYWxpemVOb2RlKG5vZGVFbnRyeSk7XG4gICAgfSwgZWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgICBpZiAoaXNDaGFuZ2luZ1JlbW90ZWx5KGVkaXRvcikpIHtcbiAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzVW5kb2luZyhlZGl0b3IpIHx8IGlzUmVkb2luZyhlZGl0b3IpKSB7XG4gICAgICAgIGFwcGx5MihvcCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcInNldF9zZWxlY3Rpb25cIiAmJiBFZGl0b3IubWFya3MoZWRpdG9yKSAmJiBvcC5wcm9wZXJ0aWVzICYmIG9wLm5ld1Byb3BlcnRpZXMgJiYgb3AucHJvcGVydGllcy5hbmNob3IgJiYgb3AucHJvcGVydGllcy5mb2N1cyAmJiBvcC5uZXdQcm9wZXJ0aWVzLmFuY2hvciAmJiBvcC5uZXdQcm9wZXJ0aWVzLmZvY3VzKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBSYW5nZS5pc0NvbGxhcHNlZCh7XG4gICAgICAgICAgYW5jaG9yOiBvcC5wcm9wZXJ0aWVzLmFuY2hvcixcbiAgICAgICAgICBmb2N1czogb3AucHJvcGVydGllcy5mb2N1c1xuICAgICAgICB9KSwgbmV3U2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBSYW5nZS5pc0NvbGxhcHNlZCh7XG4gICAgICAgICAgYW5jaG9yOiBvcC5uZXdQcm9wZXJ0aWVzLmFuY2hvcixcbiAgICAgICAgICBmb2N1czogb3AubmV3UHJvcGVydGllcy5mb2N1c1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByZXZpb3VzU2VsZWN0aW9uSXNDb2xsYXBzZWQgJiYgbmV3U2VsZWN0aW9uSXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICBjb25zdCBmb2N1c1NwYW4gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgICAgICAgICBhdDogb3AucHJvcGVydGllcy5mb2N1cyxcbiAgICAgICAgICAgIG1hdGNoOiAobikgPT4gZWRpdG9yLmlzVGV4dFNwYW4obiksXG4gICAgICAgICAgICB2b2lkczogITFcbiAgICAgICAgICB9KSlbMF0/LlswXSwgbmV3Rm9jdXNTcGFuID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtb2RlOiBcImxvd2VzdFwiLFxuICAgICAgICAgICAgYXQ6IG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMsXG4gICAgICAgICAgICBtYXRjaDogKG4pID0+IGVkaXRvci5pc1RleHRTcGFuKG4pLFxuICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgfSkpWzBdPy5bMF0sIG1vdmVkVG9OZXh0U3BhbiA9IGZvY3VzU3BhbiAmJiBuZXdGb2N1c1NwYW4gJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5wYXRoWzBdID09PSBvcC5wcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMF0gJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5wYXRoWzFdID09PSBvcC5wcm9wZXJ0aWVzLmZvY3VzLnBhdGhbMV0gKyAxICYmIGZvY3VzU3Bhbi50ZXh0Lmxlbmd0aCA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5vZmZzZXQgJiYgb3AubmV3UHJvcGVydGllcy5mb2N1cy5vZmZzZXQgPT09IDAsIG1vdmVkVG9QcmV2aW91c1NwYW4gPSBmb2N1c1NwYW4gJiYgbmV3Rm9jdXNTcGFuICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMucGF0aFswXSA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5wYXRoWzBdICYmIG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMucGF0aFsxXSA9PT0gb3AucHJvcGVydGllcy5mb2N1cy5wYXRoWzFdIC0gMSAmJiBvcC5wcm9wZXJ0aWVzLmZvY3VzLm9mZnNldCA9PT0gMCAmJiBuZXdGb2N1c1NwYW4udGV4dC5sZW5ndGggPT09IG9wLm5ld1Byb3BlcnRpZXMuZm9jdXMub2Zmc2V0O1xuICAgICAgICAgIGlmIChtb3ZlZFRvTmV4dFNwYW4gfHwgbW92ZWRUb1ByZXZpb3VzU3BhbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9wLnR5cGUgPT09IFwiaW5zZXJ0X25vZGVcIikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgc2VsZWN0aW9uXG4gICAgICAgIH0gPSBlZGl0b3I7XG4gICAgICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICBjb25zdCBbX2Jsb2NrLCBibG9ja1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBzZWxlY3Rpb24sIHtcbiAgICAgICAgICAgIGRlcHRoOiAxXG4gICAgICAgICAgfSksIHByZXZpb3VzU3BhbiA9IGdldFByZXZpb3VzU3Bhbih7XG4gICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICBzcGFuUGF0aDogb3AucGF0aFxuICAgICAgICAgIH0pLCBwcmV2aW91c1NwYW5Bbm5vdGF0aW9ucyA9IHByZXZpb3VzU3BhbiA/IHByZXZpb3VzU3Bhbi5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkgOiBbXSwgbmV4dFNwYW4gPSBnZXROZXh0U3Bhbih7XG4gICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICBzcGFuUGF0aDogW29wLnBhdGhbMF0sIG9wLnBhdGhbMV0gLSAxXVxuICAgICAgICAgIH0pLCBuZXh0U3BhbkFubm90YXRpb25zID0gbmV4dFNwYW4gPyBuZXh0U3Bhbi5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkgOiBbXSwgYW5ub3RhdGlvbnNFbmRpbmcgPSBwcmV2aW91c1NwYW5Bbm5vdGF0aW9ucz8uZmlsdGVyKChhbm5vdGF0aW9uKSA9PiAhbmV4dFNwYW5Bbm5vdGF0aW9ucz8uaW5jbHVkZXMoYW5ub3RhdGlvbikpID8/IFtdLCBhdFRoZUVuZE9mQW5ub3RhdGlvbiA9IGFubm90YXRpb25zRW5kaW5nLmxlbmd0aCA+IDA7XG4gICAgICAgICAgaWYgKGF0VGhlRW5kT2ZBbm5vdGF0aW9uICYmIGlzUG9ydGFibGVUZXh0U3BhbihvcC5ub2RlKSAmJiBvcC5ub2RlLm1hcmtzPy5zb21lKChtYXJrKSA9PiBhbm5vdGF0aW9uc0VuZGluZy5pbmNsdWRlcyhtYXJrKSkpIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIC4uLm9wLm5vZGUsXG4gICAgICAgICAgICAgIG1hcmtzOiBvcC5ub2RlLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFhbm5vdGF0aW9uc0VuZGluZy5pbmNsdWRlcyhtYXJrKSkgPz8gW11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uc1N0YXJ0aW5nID0gbmV4dFNwYW5Bbm5vdGF0aW9ucz8uZmlsdGVyKChhbm5vdGF0aW9uKSA9PiAhcHJldmlvdXNTcGFuQW5ub3RhdGlvbnM/LmluY2x1ZGVzKGFubm90YXRpb24pKSA/PyBbXSwgYXRUaGVTdGFydE9mQW5ub3RhdGlvbiA9IGFubm90YXRpb25zU3RhcnRpbmcubGVuZ3RoID4gMDtcbiAgICAgICAgICBpZiAoYXRUaGVTdGFydE9mQW5ub3RhdGlvbiAmJiBpc1BvcnRhYmxlVGV4dFNwYW4ob3Aubm9kZSkgJiYgb3Aubm9kZS5tYXJrcz8uc29tZSgobWFyaykgPT4gYW5ub3RhdGlvbnNTdGFydGluZy5pbmNsdWRlcyhtYXJrKSkpIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgIC4uLm9wLm5vZGUsXG4gICAgICAgICAgICAgIG1hcmtzOiBvcC5ub2RlLm1hcmtzPy5maWx0ZXIoKG1hcmspID0+ICFhbm5vdGF0aW9uc1N0YXJ0aW5nLmluY2x1ZGVzKG1hcmspKSA/PyBbXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG5leHRTcGFuRGVjb3JhdG9ycyA9IG5leHRTcGFuPy5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKSA/PyBbXTtcbiAgICAgICAgICBpZiAobmV4dFNwYW5EZWNvcmF0b3JzLmxlbmd0aCA+IDAgJiYgYXRUaGVFbmRPZkFubm90YXRpb24gJiYgIWF0VGhlU3RhcnRPZkFubm90YXRpb24gJiYgaXNQb3J0YWJsZVRleHRTcGFuKG9wLm5vZGUpICYmIG9wLm5vZGUubWFya3M/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgLi4ub3Aubm9kZSxcbiAgICAgICAgICAgICAgbWFya3M6IG5leHRTcGFuRGVjb3JhdG9yc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJpbnNlcnRfdGV4dFwiKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBzZWxlY3Rpb25cbiAgICAgICAgfSA9IGVkaXRvciwgY29sbGFwc2VkU2VsZWN0aW9uID0gc2VsZWN0aW9uID8gUmFuZ2UuaXNDb2xsYXBzZWQoc2VsZWN0aW9uKSA6ICExO1xuICAgICAgICBpZiAoc2VsZWN0aW9uICYmIGNvbGxhcHNlZFNlbGVjdGlvbikge1xuICAgICAgICAgIGNvbnN0IFtfYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbiwge1xuICAgICAgICAgICAgZGVwdGg6IDFcbiAgICAgICAgICB9KSwgW3NwYW4sIHNwYW5QYXRoXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICAgICAgICAgIGF0OiBzZWxlY3Rpb24uZm9jdXMsXG4gICAgICAgICAgICBtYXRjaDogKG4pID0+IGVkaXRvci5pc1RleHRTcGFuKG4pLFxuICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgfSkpWzBdID8/IFt2b2lkIDAsIHZvaWQgMF0sIG1hcmtzID0gc3Bhbi5tYXJrcyA/PyBbXSwgbWFya3NXaXRob3V0QW5ub3RhdGlvbnMgPSBtYXJrcy5maWx0ZXIoKG1hcmspID0+IGRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpLCBzcGFuSGFzQW5ub3RhdGlvbnMgPSBtYXJrcy5sZW5ndGggPiBtYXJrc1dpdGhvdXRBbm5vdGF0aW9ucy5sZW5ndGgsIHNwYW5Jc0VtcHR5ID0gc3Bhbi50ZXh0Lmxlbmd0aCA9PT0gMCwgYXRUaGVCZWdpbm5pbmdPZlNwYW4gPSBzZWxlY3Rpb24uYW5jaG9yLm9mZnNldCA9PT0gMCwgYXRUaGVFbmRPZlNwYW4gPSBzZWxlY3Rpb24uYW5jaG9yLm9mZnNldCA9PT0gc3Bhbi50ZXh0Lmxlbmd0aCwgcHJldmlvdXNTcGFuID0gZ2V0UHJldmlvdXNTcGFuKHtcbiAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgIGJsb2NrUGF0aCxcbiAgICAgICAgICAgIHNwYW5QYXRoXG4gICAgICAgICAgfSksIG5leHRTcGFuID0gZ2V0TmV4dFNwYW4oe1xuICAgICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgICAgYmxvY2tQYXRoLFxuICAgICAgICAgICAgc3BhblBhdGhcbiAgICAgICAgICB9KSwgbmV4dFNwYW5Bbm5vdGF0aW9ucyA9IG5leHRTcGFuPy5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkgPz8gW10sIHNwYW5Bbm5vdGF0aW9ucyA9IG1hcmtzLmZpbHRlcigobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpLCBwcmV2aW91c1NwYW5IYXNBbm5vdGF0aW9ucyA9IHByZXZpb3VzU3BhbiA/IHByZXZpb3VzU3Bhbi5tYXJrcz8uc29tZSgobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpIDogITEsIHByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9ucyA9IHByZXZpb3VzU3BhbiA/IHByZXZpb3VzU3Bhbi5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiAhZGVjb3JhdG9ycy5pbmNsdWRlcyhtYXJrKSkuZXZlcnkoKG1hcmspID0+IG1hcmtzLmluY2x1ZGVzKG1hcmspKSA6ICExLCBwcmV2aW91c1NwYW5IYXNTYW1lQW5ub3RhdGlvbiA9IHByZXZpb3VzU3BhbiA/IHByZXZpb3VzU3Bhbi5tYXJrcz8uc29tZSgobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykgJiYgbWFya3MuaW5jbHVkZXMobWFyaykpIDogITEsIHByZXZpb3VzU3Bhbkhhc1NhbWVNYXJrcyA9IHByZXZpb3VzU3BhbiA/IHByZXZpb3VzU3Bhbi5tYXJrcz8uZXZlcnkoKG1hcmspID0+IG1hcmtzLmluY2x1ZGVzKG1hcmspKSA6ICExLCBuZXh0U3BhblNoYXJlc1NvbWVBbm5vdGF0aW9ucyA9IHNwYW5Bbm5vdGF0aW9ucy5zb21lKChtYXJrKSA9PiBuZXh0U3BhbkFubm90YXRpb25zPy5pbmNsdWRlcyhtYXJrKSk7XG4gICAgICAgICAgaWYgKHNwYW5IYXNBbm5vdGF0aW9ucyAmJiAhc3BhbklzRW1wdHkpIHtcbiAgICAgICAgICAgIGlmIChhdFRoZUJlZ2lubmluZ09mU3Bhbikge1xuICAgICAgICAgICAgICBpZiAocHJldmlvdXNTcGFuSGFzU2FtZU1hcmtzKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgIF90eXBlOiBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgICAgIHRleHQ6IG9wLnRleHQsXG4gICAgICAgICAgICAgICAgICBtYXJrczogcHJldmlvdXNTcGFuPy5tYXJrcyA/PyBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2aW91c1NwYW5IYXNTYW1lQW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICAgICAgdGV4dDogb3AudGV4dCxcbiAgICAgICAgICAgICAgICAgIG1hcmtzOiBwcmV2aW91c1NwYW4/Lm1hcmtzID8/IFtdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzU3Bhbkhhc1NhbWVBbm5vdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYXBwbHkyKG9wKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXByZXZpb3VzU3Bhbikge1xuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBvcC50ZXh0LFxuICAgICAgICAgICAgICAgICAgbWFya3M6IFtdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXRUaGVFbmRPZlNwYW4pIHtcbiAgICAgICAgICAgICAgaWYgKG5leHRTcGFuICYmIG5leHRTcGFuU2hhcmVzU29tZUFubm90YXRpb25zICYmIG5leHRTcGFuQW5ub3RhdGlvbnMubGVuZ3RoIDwgc3BhbkFubm90YXRpb25zLmxlbmd0aCB8fCAhbmV4dFNwYW5TaGFyZXNTb21lQW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgX3R5cGU6IFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgX2tleTogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgICAgICAgICAgICAgICAgdGV4dDogb3AudGV4dCxcbiAgICAgICAgICAgICAgICAgIG1hcmtzOiBuZXh0U3Bhbj8ubWFya3MgPz8gW11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFuZXh0U3Bhbikge1xuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBvcC50ZXh0LFxuICAgICAgICAgICAgICAgICAgbWFya3M6IFtdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhdFRoZUJlZ2lubmluZ09mU3BhbiAmJiAhc3BhbklzRW1wdHkgJiYgcHJldmlvdXNTcGFuKSB7XG4gICAgICAgICAgICBUcmFuc2Zvcm1zLmluc2VydE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgICAgICAgdGV4dDogb3AudGV4dCxcbiAgICAgICAgICAgICAgbWFya3M6IHByZXZpb3VzU3Bhbkhhc0Fubm90YXRpb25zID8gW10gOiAocHJldmlvdXNTcGFuLm1hcmtzID8/IFtdKS5maWx0ZXIoKG1hcmspID0+IGRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcC50eXBlID09PSBcInJlbW92ZV90ZXh0XCIpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHNlbGVjdGlvblxuICAgICAgICB9ID0gZWRpdG9yO1xuICAgICAgICBpZiAoc2VsZWN0aW9uICYmIFJhbmdlLmlzRXhwYW5kZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgIGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgc2VsZWN0aW9uLCB7XG4gICAgICAgICAgICBkZXB0aDogMVxuICAgICAgICAgIH0pLCBbc3Bhbiwgc3BhblBhdGhdID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtb2RlOiBcImxvd2VzdFwiLFxuICAgICAgICAgICAgYXQ6IHtcbiAgICAgICAgICAgICAgcGF0aDogb3AucGF0aCxcbiAgICAgICAgICAgICAgb2Zmc2V0OiBvcC5vZmZzZXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXRjaDogKG4pID0+IGVkaXRvci5pc1RleHRTcGFuKG4pLFxuICAgICAgICAgICAgdm9pZHM6ICExXG4gICAgICAgICAgfSkpWzBdID8/IFt2b2lkIDAsIHZvaWQgMF07XG4gICAgICAgICAgaWYgKHNwYW4gJiYgYmxvY2sgJiYgaXNQb3J0YWJsZVRleHRCbG9jayhibG9jaykpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtEZWZzID0gYmxvY2subWFya0RlZnMgPz8gW10sIG1hcmtzID0gc3Bhbi5tYXJrcyA/PyBbXSwgc3Bhbkhhc0Fubm90YXRpb25zID0gbWFya3Muc29tZSgobWFyaykgPT4gbWFya0RlZnMuZmluZCgobWFya0RlZikgPT4gbWFya0RlZi5fa2V5ID09PSBtYXJrKSksIGRlbGV0aW5nRnJvbVRoZUVuZCA9IG9wLm9mZnNldCArIG9wLnRleHQubGVuZ3RoID09PSBzcGFuLnRleHQubGVuZ3RoLCBkZWxldGluZ0FsbFRleHQgPSBvcC5vZmZzZXQgPT09IDAgJiYgZGVsZXRpbmdGcm9tVGhlRW5kLCBwcmV2aW91c1NwYW4gPSBnZXRQcmV2aW91c1NwYW4oe1xuICAgICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICAgIGJsb2NrUGF0aCxcbiAgICAgICAgICAgICAgc3BhblBhdGhcbiAgICAgICAgICAgIH0pLCBuZXh0U3BhbiA9IGdldE5leHRTcGFuKHtcbiAgICAgICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgICAgICBibG9ja1BhdGgsXG4gICAgICAgICAgICAgIHNwYW5QYXRoXG4gICAgICAgICAgICB9KSwgcHJldmlvdXNTcGFuSGFzU2FtZUFubm90YXRpb24gPSBwcmV2aW91c1NwYW4gPyBwcmV2aW91c1NwYW4ubWFya3M/LnNvbWUoKG1hcmspID0+ICFkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspICYmIG1hcmtzLmluY2x1ZGVzKG1hcmspKSA6ICExLCBuZXh0U3Bhbkhhc1NhbWVBbm5vdGF0aW9uID0gbmV4dFNwYW4gPyBuZXh0U3Bhbi5tYXJrcz8uc29tZSgobWFyaykgPT4gIWRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykgJiYgbWFya3MuaW5jbHVkZXMobWFyaykpIDogITE7XG4gICAgICAgICAgICBpZiAoc3Bhbkhhc0Fubm90YXRpb25zICYmIGRlbGV0aW5nQWxsVGV4dCAmJiAhcHJldmlvdXNTcGFuSGFzU2FtZUFubm90YXRpb24gJiYgIW5leHRTcGFuSGFzU2FtZUFubm90YXRpb24pIHtcbiAgICAgICAgICAgICAgY29uc3QgbWFya3NXaXRob3V0QW5ub3RhdGlvbk1hcmtzID0gKHtcbiAgICAgICAgICAgICAgICAuLi5FZGl0b3IubWFya3MoZWRpdG9yKSB8fCB7fVxuICAgICAgICAgICAgICB9Lm1hcmtzIHx8IFtdKS5maWx0ZXIoKG1hcmspID0+IGRlY29yYXRvcnMuaW5jbHVkZXMobWFyaykpO1xuICAgICAgICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFwcGx5MihvcCksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICBtYXJrczogbWFya3NXaXRob3V0QW5ub3RhdGlvbk1hcmtzXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgYXQ6IG9wLnBhdGhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3AudHlwZSA9PT0gXCJtZXJnZV9ub2RlXCIgJiYgb3AucGF0aC5sZW5ndGggPT09IDEgJiYgXCJtYXJrRGVmc1wiIGluIG9wLnByb3BlcnRpZXMgJiYgb3AucHJvcGVydGllcy5fdHlwZSA9PT0gdHlwZXMuYmxvY2submFtZSAmJiBBcnJheS5pc0FycmF5KG9wLnByb3BlcnRpZXMubWFya0RlZnMpICYmIG9wLnByb3BlcnRpZXMubWFya0RlZnMubGVuZ3RoID4gMCAmJiBvcC5wYXRoWzBdIC0gMSA+PSAwKSB7XG4gICAgICAgIGNvbnN0IFt0YXJnZXRCbG9jaywgdGFyZ2V0UGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIFtvcC5wYXRoWzBdIC0gMV0pO1xuICAgICAgICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKHRhcmdldEJsb2NrKSkge1xuICAgICAgICAgIGNvbnN0IG9sZERlZnMgPSBBcnJheS5pc0FycmF5KHRhcmdldEJsb2NrLm1hcmtEZWZzKSAmJiB0YXJnZXRCbG9jay5tYXJrRGVmcyB8fCBbXSwgbmV3TWFya0RlZnMgPSB1bmlxKFsuLi5vbGREZWZzLCAuLi5vcC5wcm9wZXJ0aWVzLm1hcmtEZWZzXSk7XG4gICAgICAgICAgZGVidWckYShcIkNvcHlpbmcgbWFya0RlZnMgb3ZlciB0byBtZXJnZWQgYmxvY2tcIiwgb3ApLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgICAgbWFya0RlZnM6IG5ld01hcmtEZWZzXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IHRhcmdldFBhdGgsXG4gICAgICAgICAgICB2b2lkczogITFcbiAgICAgICAgICB9KSwgYXBwbHkyKG9wKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGx5MihvcCk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgYWRkRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgZWRpdG9yID0gYWN0aW9uLmVkaXRvciwgbWFyayA9IGFjdGlvbi5kZWNvcmF0b3I7XG4gIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgaWYgKFJhbmdlLmlzRXhwYW5kZWQoZWRpdG9yLnNlbGVjdGlvbikpIHtcbiAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7fSwge1xuICAgICAgICBtYXRjaDogVGV4dC5pc1RleHQsXG4gICAgICAgIHNwbGl0OiAhMCxcbiAgICAgICAgaGFuZ2luZzogITBcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc3BsaXRUZXh0Tm9kZXMgPSBSYW5nZS5pc1JhbmdlKGVkaXRvci5zZWxlY3Rpb24pID8gWy4uLkVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dFxuICAgICAgfSldIDogW107XG4gICAgICBzcGxpdFRleHROb2Rlcy5sZW5ndGggPiAxICYmIHNwbGl0VGV4dE5vZGVzLmV2ZXJ5KChub2RlKSA9PiBub2RlWzBdLm1hcmtzPy5pbmNsdWRlcyhtYXJrKSkgPyBlZGl0b3IucmVtb3ZlTWFyayhtYXJrKSA6IHNwbGl0VGV4dE5vZGVzLmZvckVhY2goKFtub2RlLCBwYXRoXSkgPT4ge1xuICAgICAgICBjb25zdCBtYXJrcyA9IFsuLi4oQXJyYXkuaXNBcnJheShub2RlLm1hcmtzKSA/IG5vZGUubWFya3MgOiBbXSkuZmlsdGVyKChlTWFyaykgPT4gZU1hcmsgIT09IG1hcmspLCBtYXJrXTtcbiAgICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrc1xuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IHBhdGgsXG4gICAgICAgICAgbWF0Y2g6IFRleHQuaXNUZXh0LFxuICAgICAgICAgIHNwbGl0OiAhMCxcbiAgICAgICAgICBoYW5naW5nOiAhMFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24sIHtcbiAgICAgICAgZGVwdGg6IDFcbiAgICAgIH0pLCBsb25lbHlFbXB0eVNwYW4gPSBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBlZGl0b3IuaXNUZXh0U3BhbihibG9jay5jaGlsZHJlblswXSkgJiYgYmxvY2suY2hpbGRyZW5bMF0udGV4dCA9PT0gXCJcIiA/IGJsb2NrLmNoaWxkcmVuWzBdIDogdm9pZCAwO1xuICAgICAgaWYgKGxvbmVseUVtcHR5U3Bhbikge1xuICAgICAgICBjb25zdCBleGlzdGluZ01hcmtzID0gbG9uZWx5RW1wdHlTcGFuLm1hcmtzID8/IFtdLCBleGlzdGluZ01hcmtzV2l0aG91dERlY29yYXRvciA9IGV4aXN0aW5nTWFya3MuZmlsdGVyKChleGlzdGluZ01hcmspID0+IGV4aXN0aW5nTWFyayAhPT0gbWFyayk7XG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3M6IGV4aXN0aW5nTWFya3MubGVuZ3RoID09PSBleGlzdGluZ01hcmtzV2l0aG91dERlY29yYXRvci5sZW5ndGggPyBbLi4uZXhpc3RpbmdNYXJrcywgbWFya10gOiBleGlzdGluZ01hcmtzV2l0aG91dERlY29yYXRvclxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IGJsb2NrUGF0aCxcbiAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRTcGFuKG5vZGUpXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdNYXJrcyA9IHtcbiAgICAgICAgICAuLi5FZGl0b3IubWFya3MoZWRpdG9yKSB8fCB7fVxuICAgICAgICB9Lm1hcmtzIHx8IFtdLCBtYXJrcyA9IHtcbiAgICAgICAgICAuLi5FZGl0b3IubWFya3MoZWRpdG9yKSB8fCB7fSxcbiAgICAgICAgICBtYXJrczogWy4uLmV4aXN0aW5nTWFya3MsIG1hcmtdXG4gICAgICAgIH07XG4gICAgICAgIGVkaXRvci5tYXJrcyA9IG1hcmtzO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLnNlbGVjdGlvbjtcbiAgICAgIGVkaXRvci5zZWxlY3Rpb24gPSB7XG4gICAgICAgIC4uLnNlbGVjdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH1cbn0sIHJlbW92ZURlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IGFjdGlvbi5lZGl0b3IsIG1hcmsgPSBhY3Rpb24uZGVjb3JhdG9yLCB7XG4gICAgc2VsZWN0aW9uXG4gIH0gPSBlZGl0b3I7XG4gIGlmIChzZWxlY3Rpb24pIHtcbiAgICBpZiAoUmFuZ2UuaXNFeHBhbmRlZChzZWxlY3Rpb24pKVxuICAgICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHt9LCB7XG4gICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dCxcbiAgICAgICAgc3BsaXQ6ICEwLFxuICAgICAgICBoYW5naW5nOiAhMFxuICAgICAgfSksIGVkaXRvci5zZWxlY3Rpb24gJiYgWy4uLkVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgICAgIG1hdGNoOiBUZXh0LmlzVGV4dFxuICAgICAgfSldLmZvckVhY2goKFtub2RlLCBwYXRoXSkgPT4ge1xuICAgICAgICBjb25zdCBibG9jayA9IGVkaXRvci5jaGlsZHJlbltwYXRoWzBdXTtcbiAgICAgICAgRWxlbWVudCQxLmlzRWxlbWVudChibG9jaykgJiYgYmxvY2suY2hpbGRyZW4uaW5jbHVkZXMobm9kZSkgJiYgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICBtYXJrczogKEFycmF5LmlzQXJyYXkobm9kZS5tYXJrcykgPyBub2RlLm1hcmtzIDogW10pLmZpbHRlcigoZU1hcmspID0+IGVNYXJrICE9PSBtYXJrKSxcbiAgICAgICAgICBfdHlwZTogXCJzcGFuXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNlbGVjdGlvbiwge1xuICAgICAgICBkZXB0aDogMVxuICAgICAgfSksIGxvbmVseUVtcHR5U3BhbiA9IGVkaXRvci5pc1RleHRCbG9jayhibG9jaykgJiYgYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGVkaXRvci5pc1RleHRTcGFuKGJsb2NrLmNoaWxkcmVuWzBdKSAmJiBibG9jay5jaGlsZHJlblswXS50ZXh0ID09PSBcIlwiID8gYmxvY2suY2hpbGRyZW5bMF0gOiB2b2lkIDA7XG4gICAgICBpZiAobG9uZWx5RW1wdHlTcGFuKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yID0gKGxvbmVseUVtcHR5U3Bhbi5tYXJrcyA/PyBbXSkuZmlsdGVyKChleGlzdGluZ01hcmspID0+IGV4aXN0aW5nTWFyayAhPT0gbWFyayk7XG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgbWFya3M6IGV4aXN0aW5nTWFya3NXaXRob3V0RGVjb3JhdG9yXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogYmxvY2tQYXRoLFxuICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBleGlzdGluZ01hcmtzID0ge1xuICAgICAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9XG4gICAgICAgIH0ubWFya3MgfHwgW10sIG1hcmtzID0ge1xuICAgICAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9LFxuICAgICAgICAgIG1hcmtzOiBleGlzdGluZ01hcmtzLmZpbHRlcigoZU1hcmspID0+IGVNYXJrICE9PSBtYXJrKVxuICAgICAgICB9O1xuICAgICAgICBlZGl0b3IubWFya3MgPSB7XG4gICAgICAgICAgbWFya3M6IG1hcmtzLm1hcmtzLFxuICAgICAgICAgIF90eXBlOiBcInNwYW5cIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uMiA9IGVkaXRvci5zZWxlY3Rpb247XG4gICAgICBlZGl0b3Iuc2VsZWN0aW9uID0ge1xuICAgICAgICAuLi5zZWxlY3Rpb24yXG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGlzRGVjb3JhdG9yQWN0aXZlKHtcbiAgZWRpdG9yLFxuICBkZWNvcmF0b3Jcbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgc2VsZWN0ZWRUZXh0Tm9kZXMgPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICBtYXRjaDogVGV4dC5pc1RleHQsXG4gICAgYXQ6IGVkaXRvci5zZWxlY3Rpb25cbiAgfSkpO1xuICByZXR1cm4gc2VsZWN0ZWRUZXh0Tm9kZXMubGVuZ3RoID09PSAwID8gITEgOiBSYW5nZS5pc0V4cGFuZGVkKGVkaXRvci5zZWxlY3Rpb24pID8gc2VsZWN0ZWRUZXh0Tm9kZXMuZXZlcnkoKG4pID0+IHtcbiAgICBjb25zdCBbbm9kZV0gPSBuO1xuICAgIHJldHVybiBub2RlLm1hcmtzPy5pbmNsdWRlcyhkZWNvcmF0b3IpO1xuICB9KSA6ICh7XG4gICAgLi4uRWRpdG9yLm1hcmtzKGVkaXRvcikgfHwge31cbiAgfS5tYXJrcyB8fCBbXSkuaW5jbHVkZXMoZGVjb3JhdG9yKTtcbn1cbmNvbnN0IHRvZ2dsZURlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlzRGVjb3JhdG9yQWN0aXZlKHtcbiAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3IsXG4gICAgZGVjb3JhdG9yOiBhY3Rpb24uZGVjb3JhdG9yXG4gIH0pID8gcmVtb3ZlRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICB0eXBlOiBcImRlY29yYXRvci5yZW1vdmVcIixcbiAgICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICAgIGRlY29yYXRvcjogYWN0aW9uLmRlY29yYXRvclxuICAgIH1cbiAgfSkgOiBhZGREZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgY29udGV4dCxcbiAgICBhY3Rpb246IHtcbiAgICAgIHR5cGU6IFwiZGVjb3JhdG9yLmFkZFwiLFxuICAgICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yLFxuICAgICAgZGVjb3JhdG9yOiBhY3Rpb24uZGVjb3JhdG9yXG4gICAgfVxuICB9KTtcbn07XG5kZWJ1Z1dpdGhOYW1lKFwicGx1Z2luOndpdGhQb3J0YWJsZVRleHRTZWxlY3Rpb25zXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFBvcnRhYmxlVGV4dFNlbGVjdGlvbnMoZWRpdG9yQWN0b3IsIHR5cGVzKSB7XG4gIGxldCBwcmV2U2VsZWN0aW9uID0gbnVsbDtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IGVtaXRQb3J0YWJsZVRleHRTZWxlY3Rpb24gPSAoKSA9PiB7XG4gICAgICBpZiAocHJldlNlbGVjdGlvbiAhPT0gZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgICBsZXQgcHRSYW5nZSA9IG51bGw7XG4gICAgICAgIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBTTEFURV9UT19QT1JUQUJMRV9URVhUX1JBTkdFLmdldChlZGl0b3Iuc2VsZWN0aW9uKTtcbiAgICAgICAgICBpZiAoZXhpc3RpbmcpXG4gICAgICAgICAgICBwdFJhbmdlID0gZXhpc3Rpbmc7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGVkaXRvci5jaGlsZHJlbjtcbiAgICAgICAgICAgIHB0UmFuZ2UgPSB0b1BvcnRhYmxlVGV4dFJhbmdlKHZhbHVlLCBlZGl0b3Iuc2VsZWN0aW9uLCB0eXBlcyksIFNMQVRFX1RPX1BPUlRBQkxFX1RFWFRfUkFOR0Uuc2V0KGVkaXRvci5zZWxlY3Rpb24sIHB0UmFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdFJhbmdlID8gZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJzZWxlY3Rpb25cIixcbiAgICAgICAgICBzZWxlY3Rpb246IHB0UmFuZ2VcbiAgICAgICAgfSkgOiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcInNlbGVjdGlvblwiLFxuICAgICAgICAgIHNlbGVjdGlvbjogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHByZXZTZWxlY3Rpb24gPSBlZGl0b3Iuc2VsZWN0aW9uO1xuICAgIH0sIHtcbiAgICAgIG9uQ2hhbmdlXG4gICAgfSA9IGVkaXRvcjtcbiAgICByZXR1cm4gZWRpdG9yLm9uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgb25DaGFuZ2UoKSwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5tYXRjaGVzKHtcbiAgICAgICAgc2V0dXA6IFwic2V0dGluZyB1cFwiXG4gICAgICB9KSB8fCBlbWl0UG9ydGFibGVUZXh0U2VsZWN0aW9uKCk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckOSA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aFNjaGVtYVR5cGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlV2l0aFNjaGVtYVR5cGVzKHtcbiAgZWRpdG9yQWN0b3IsXG4gIHNjaGVtYVR5cGVzXG59KSB7XG4gIHJldHVybiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBlZGl0b3IuaXNUZXh0QmxvY2sgPSAodmFsdWUpID0+IGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKHZhbHVlKSAmJiB2YWx1ZS5fdHlwZSA9PT0gc2NoZW1hVHlwZXMuYmxvY2submFtZSwgZWRpdG9yLmlzVGV4dFNwYW4gPSAodmFsdWUpID0+IGlzUG9ydGFibGVUZXh0U3BhbiQxKHZhbHVlKSAmJiB2YWx1ZS5fdHlwZSA9PT0gc2NoZW1hVHlwZXMuc3Bhbi5uYW1lLCBlZGl0b3IuaXNMaXN0QmxvY2sgPSAodmFsdWUpID0+IGlzUG9ydGFibGVUZXh0TGlzdEJsb2NrKHZhbHVlKSAmJiB2YWx1ZS5fdHlwZSA9PT0gc2NoZW1hVHlwZXMuYmxvY2submFtZSwgZWRpdG9yLmlzVm9pZCA9IChlbGVtZW50KSA9PiBzY2hlbWFUeXBlcy5ibG9jay5uYW1lICE9PSBlbGVtZW50Ll90eXBlICYmIChzY2hlbWFUeXBlcy5ibG9ja09iamVjdHMubWFwKChvYmopID0+IG9iai5uYW1lKS5pbmNsdWRlcyhlbGVtZW50Ll90eXBlKSB8fCBzY2hlbWFUeXBlcy5pbmxpbmVPYmplY3RzLm1hcCgob2JqKSA9PiBvYmoubmFtZSkuaW5jbHVkZXMoZWxlbWVudC5fdHlwZSkpLCBlZGl0b3IuaXNJbmxpbmUgPSAoZWxlbWVudCkgPT4gc2NoZW1hVHlwZXMuaW5saW5lT2JqZWN0cy5tYXAoKG9iaikgPT4gb2JqLm5hbWUpLmluY2x1ZGVzKGVsZW1lbnQuX3R5cGUpICYmIFwiX19pbmxpbmVcIiBpbiBlbGVtZW50ICYmIGVsZW1lbnQuX19pbmxpbmUgPT09ICEwO1xuICAgIGNvbnN0IHtcbiAgICAgIG5vcm1hbGl6ZU5vZGVcbiAgICB9ID0gZWRpdG9yO1xuICAgIHJldHVybiBlZGl0b3Iubm9ybWFsaXplTm9kZSA9IChlbnRyeSkgPT4ge1xuICAgICAgY29uc3QgW25vZGUsIHBhdGhdID0gZW50cnk7XG4gICAgICBpZiAobm9kZS5fdHlwZSA9PT0gdm9pZCAwICYmIHBhdGgubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGRlYnVnJDkoXCJTZXR0aW5nIHNwYW4gdHlwZSBvbiB0ZXh0IG5vZGUgd2l0aG91dCBhIHR5cGVcIik7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBub2RlLCBrZXkgPSBzcGFuLl9rZXkgfHwgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcigpO1xuICAgICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgfSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgLi4uc3BhbixcbiAgICAgICAgICBfdHlwZTogc2NoZW1hVHlwZXMuc3Bhbi5uYW1lLFxuICAgICAgICAgIF9rZXk6IGtleVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5fa2V5ID09PSB2b2lkIDAgJiYgKHBhdGgubGVuZ3RoID09PSAxIHx8IHBhdGgubGVuZ3RoID09PSAyKSkge1xuICAgICAgICBkZWJ1ZyQ5KFwiU2V0dGluZyBtaXNzaW5nIGtleSBvbiBjaGlsZCBub2RlIHdpdGhvdXQgYSBrZXlcIik7XG4gICAgICAgIGNvbnN0IGtleSA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKTtcbiAgICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJub3JtYWxpemluZ1wiXG4gICAgICAgIH0pLCBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIF9rZXk6IGtleVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXQ6IHBhdGhcbiAgICAgICAgfSksIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiZG9uZSBub3JtYWxpemluZ1wiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub3JtYWxpemVOb2RlKGVudHJ5KTtcbiAgICB9LCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCBkZWJ1ZyQ4ID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoVXRpbHNcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoVXRpbHMoe1xuICBlZGl0b3JBY3RvcixcbiAgc2NoZW1hVHlwZXNcbn0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIHJldHVybiBlZGl0b3IucHRlRXhwYW5kVG9Xb3JkID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzZWxlY3Rpb25cbiAgICAgIH0gPSBlZGl0b3I7XG4gICAgICBpZiAoc2VsZWN0aW9uICYmICFSYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgY29uc3QgW3RleHROb2RlXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgc2VsZWN0aW9uLmZvY3VzLCB7XG4gICAgICAgICAgZGVwdGg6IDJcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghdGV4dE5vZGUgfHwgIVRleHQuaXNUZXh0KHRleHROb2RlKSB8fCB0ZXh0Tm9kZS50ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRlYnVnJDgoXCJwdGVFeHBhbmRUb1dvcmQ6IENhbid0IGV4cGFuZCB0byB3b3JkIGhlcmVcIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBmb2N1c1xuICAgICAgICB9ID0gc2VsZWN0aW9uLCBmb2N1c09mZnNldCA9IGZvY3VzLm9mZnNldCwgY2hhcnNCZWZvcmUgPSB0ZXh0Tm9kZS50ZXh0LnNsaWNlKDAsIGZvY3VzT2Zmc2V0KSwgY2hhcnNBZnRlciA9IHRleHROb2RlLnRleHQuc2xpY2UoZm9jdXNPZmZzZXQsIC0xKSwgaXNFbXB0eSA9IChzdHIpID0+IHN0ci5tYXRjaCgvXFxzL2cpLCB3aGl0ZVNwYWNlQmVmb3JlSW5kZXggPSBjaGFyc0JlZm9yZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuZmluZEluZGV4KChzdHIpID0+IGlzRW1wdHkoc3RyKSksIG5ld1N0YXJ0T2Zmc2V0ID0gd2hpdGVTcGFjZUJlZm9yZUluZGV4ID4gLTEgPyBjaGFyc0JlZm9yZS5sZW5ndGggLSB3aGl0ZVNwYWNlQmVmb3JlSW5kZXggOiAwLCB3aGl0ZVNwYWNlQWZ0ZXJJbmRleCA9IGNoYXJzQWZ0ZXIuc3BsaXQoXCJcIikuZmluZEluZGV4KChvYmopID0+IGlzRW1wdHkob2JqKSksIG5ld0VuZE9mZnNldCA9IGNoYXJzQmVmb3JlLmxlbmd0aCArICh3aGl0ZVNwYWNlQWZ0ZXJJbmRleCA+IC0xID8gd2hpdGVTcGFjZUFmdGVySW5kZXggOiBjaGFyc0FmdGVyLmxlbmd0aCArIDEpO1xuICAgICAgICBpZiAoIShuZXdTdGFydE9mZnNldCA9PT0gbmV3RW5kT2Zmc2V0IHx8IE51bWJlci5pc05hTihuZXdTdGFydE9mZnNldCkgfHwgTnVtYmVyLmlzTmFOKG5ld0VuZE9mZnNldCkpKSB7XG4gICAgICAgICAgZGVidWckOChcInB0ZUV4cGFuZFRvV29yZDogRXhwYW5kaW5nIHRvIGZvY3VzZWQgd29yZFwiKSwgVHJhbnNmb3Jtcy5zZXRTZWxlY3Rpb24oZWRpdG9yLCB7XG4gICAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgICAgLi4uc2VsZWN0aW9uLmFuY2hvcixcbiAgICAgICAgICAgICAgb2Zmc2V0OiBuZXdTdGFydE9mZnNldFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgICAgIC4uLnNlbGVjdGlvbi5mb2N1cyxcbiAgICAgICAgICAgICAgb2Zmc2V0OiBuZXdFbmRPZmZzZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVidWckOChcInB0ZUV4cGFuZFRvV29yZDogQ2FuJ3QgZXhwYW5kIHRvIHdvcmQgaGVyZVwiKTtcbiAgICAgIH1cbiAgICB9LCBlZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrID0gKG9wdGlvbnMpID0+IHRvU2xhdGVWYWx1ZShbe1xuICAgICAgX3R5cGU6IHNjaGVtYVR5cGVzLmJsb2NrLm5hbWUsXG4gICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICBzdHlsZTogc2NoZW1hVHlwZXMuc3R5bGVzWzBdLnZhbHVlIHx8IFwibm9ybWFsXCIsXG4gICAgICAuLi5vcHRpb25zLmxpc3RJdGVtID8ge1xuICAgICAgICBsaXN0SXRlbTogb3B0aW9ucy5saXN0SXRlbVxuICAgICAgfSA6IHt9LFxuICAgICAgLi4ub3B0aW9ucy5sZXZlbCA/IHtcbiAgICAgICAgbGV2ZWw6IG9wdGlvbnMubGV2ZWxcbiAgICAgIH0gOiB7fSxcbiAgICAgIG1hcmtEZWZzOiBbXSxcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICBfdHlwZTogXCJzcGFuXCIsXG4gICAgICAgIF9rZXk6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgbWFya3M6IG9wdGlvbnMuZGVjb3JhdG9ycy5maWx0ZXIoKGRlY29yYXRvcikgPT4gc2NoZW1hVHlwZXMuZGVjb3JhdG9ycy5maW5kKCh7XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSkgPT4gdmFsdWUgPT09IGRlY29yYXRvcikpXG4gICAgICB9XVxuICAgIH1dLCB7XG4gICAgICBzY2hlbWFUeXBlc1xuICAgIH0pWzBdLCBlZGl0b3I7XG4gIH07XG59XG5jb25zdCB3aXRoUGx1Z2lucyA9IChlZGl0b3IsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZSA9IGVkaXRvciwge1xuICAgIGVkaXRvckFjdG9yXG4gIH0gPSBvcHRpb25zLCBzY2hlbWFUeXBlcyA9IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWEsIG9wZXJhdGlvblRvUGF0Y2hlcyA9IGNyZWF0ZU9wZXJhdGlvblRvUGF0Y2hlcyhzY2hlbWFUeXBlcyksIHdpdGhPYmplY3RLZXlzID0gY3JlYXRlV2l0aE9iamVjdEtleXMoZWRpdG9yQWN0b3IsIHNjaGVtYVR5cGVzKSwgd2l0aFNjaGVtYVR5cGVzID0gY3JlYXRlV2l0aFNjaGVtYVR5cGVzKHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBzY2hlbWFUeXBlc1xuICB9KSwgd2l0aFBhdGNoZXMgPSBjcmVhdGVXaXRoUGF0Y2hlcyh7XG4gICAgZWRpdG9yQWN0b3IsXG4gICAgcGF0Y2hGdW5jdGlvbnM6IG9wZXJhdGlvblRvUGF0Y2hlcyxcbiAgICBzY2hlbWFUeXBlcyxcbiAgICBzdWJzY3JpcHRpb25zOiBvcHRpb25zLnN1YnNjcmlwdGlvbnNcbiAgfSksIHdpdGhNYXhCbG9ja3MgPSBjcmVhdGVXaXRoTWF4QmxvY2tzKGVkaXRvckFjdG9yKSwgd2l0aFVuZG9SZWRvID0gY3JlYXRlV2l0aFVuZG9SZWRvKHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBibG9ja1NjaGVtYVR5cGU6IHNjaGVtYVR5cGVzLmJsb2NrLFxuICAgIHN1YnNjcmlwdGlvbnM6IG9wdGlvbnMuc3Vic2NyaXB0aW9uc1xuICB9KSwgd2l0aFBvcnRhYmxlVGV4dE1hcmtNb2RlbCA9IGNyZWF0ZVdpdGhQb3J0YWJsZVRleHRNYXJrTW9kZWwoZWRpdG9yQWN0b3IsIHNjaGVtYVR5cGVzKSwgd2l0aFBvcnRhYmxlVGV4dEJsb2NrU3R5bGUgPSBjcmVhdGVXaXRoUG9ydGFibGVUZXh0QmxvY2tTdHlsZShlZGl0b3JBY3Rvciwgc2NoZW1hVHlwZXMpLCB3aXRoUGxhY2Vob2xkZXJCbG9jayA9IGNyZWF0ZVdpdGhQbGFjZWhvbGRlckJsb2NrKGVkaXRvckFjdG9yKSwgd2l0aFV0aWxzID0gY3JlYXRlV2l0aFV0aWxzKHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBzY2hlbWFUeXBlc1xuICB9KSwgd2l0aFBvcnRhYmxlVGV4dFNlbGVjdGlvbnMgPSBjcmVhdGVXaXRoUG9ydGFibGVUZXh0U2VsZWN0aW9ucyhlZGl0b3JBY3Rvciwgc2NoZW1hVHlwZXMpO1xuICByZXR1cm4gY3JlYXRlV2l0aEV2ZW50TGlzdGVuZXJzKGVkaXRvckFjdG9yLCBvcHRpb25zLnN1YnNjcmlwdGlvbnMpKHdpdGhTY2hlbWFUeXBlcyh3aXRoT2JqZWN0S2V5cyh3aXRoUG9ydGFibGVUZXh0TWFya01vZGVsKHdpdGhQb3J0YWJsZVRleHRCbG9ja1N0eWxlKHdpdGhQbGFjZWhvbGRlckJsb2NrKHdpdGhVdGlscyh3aXRoTWF4QmxvY2tzKHdpdGhVbmRvUmVkbyh3aXRoUGF0Y2hlcyh3aXRoUG9ydGFibGVUZXh0U2VsZWN0aW9ucyhlKSkpKSkpKSkpKSk7XG59LCBkZWJ1ZyQ3ID0gZGVidWdXaXRoTmFtZShcImNvbXBvbmVudDpQb3J0YWJsZVRleHRFZGl0b3I6U2xhdGVDb250YWluZXJcIiksIHNsYXRlRWRpdG9ycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlU2xhdGVFZGl0b3IoY29uZmlnKSB7XG4gIGNvbnN0IGV4aXN0aW5nU2xhdGVFZGl0b3IgPSBzbGF0ZUVkaXRvcnMuZ2V0KGNvbmZpZy5lZGl0b3JBY3Rvcik7XG4gIGlmIChleGlzdGluZ1NsYXRlRWRpdG9yKVxuICAgIHJldHVybiBkZWJ1ZyQ3KFwiUmV1c2luZyBleGlzdGluZyBTbGF0ZSBlZGl0b3IgaW5zdGFuY2VcIiwgY29uZmlnLmVkaXRvckFjdG9yLmlkKSwgZXhpc3RpbmdTbGF0ZUVkaXRvcjtcbiAgZGVidWckNyhcIkNyZWF0aW5nIG5ldyBTbGF0ZSBlZGl0b3IgaW5zdGFuY2VcIiwgY29uZmlnLmVkaXRvckFjdG9yLmlkKTtcbiAgY29uc3QgdW5zdWJzY3JpcHRpb25zID0gW10sIHN1YnNjcmlwdGlvbnMgPSBbXSwgaW5zdGFuY2UgPSB3aXRoUGx1Z2lucyh3aXRoUmVhY3QoY3JlYXRlRWRpdG9yJDEoKSksIHtcbiAgICBlZGl0b3JBY3RvcjogY29uZmlnLmVkaXRvckFjdG9yLFxuICAgIHN1YnNjcmlwdGlvbnNcbiAgfSk7XG4gIEtFWV9UT19WQUxVRV9FTEVNRU5ULnNldChpbnN0YW5jZSwge30pLCBLRVlfVE9fU0xBVEVfRUxFTUVOVC5zZXQoaW5zdGFuY2UsIHt9KTtcbiAgZm9yIChjb25zdCBzdWJzY3JpcHRpb24gb2Ygc3Vic2NyaXB0aW9ucylcbiAgICB1bnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24oKSk7XG4gIGNvbnN0IGluaXRpYWxWYWx1ZSA9IFtpbnN0YW5jZS5wdGVDcmVhdGVUZXh0QmxvY2soe1xuICAgIGRlY29yYXRvcnM6IFtdXG4gIH0pXSwgc2xhdGVFZGl0b3IgPSB7XG4gICAgaW5zdGFuY2UsXG4gICAgaW5pdGlhbFZhbHVlXG4gIH07XG4gIHJldHVybiBzbGF0ZUVkaXRvcnMuc2V0KGNvbmZpZy5lZGl0b3JBY3Rvciwgc2xhdGVFZGl0b3IpLCBzbGF0ZUVkaXRvcjtcbn1cbmNvbnN0IHRvZ2dsZUxpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgaXNMaXN0SXRlbUFjdGl2ZSh7XG4gICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yLFxuICAgIGxpc3RJdGVtOiBhY3Rpb24ubGlzdEl0ZW1cbiAgfSkgPyByZW1vdmVMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICBjb250ZXh0LFxuICAgIGFjdGlvbjoge1xuICAgICAgLi4uYWN0aW9uLFxuICAgICAgdHlwZTogXCJsaXN0IGl0ZW0ucmVtb3ZlXCJcbiAgICB9XG4gIH0pIDogYWRkTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgY29udGV4dCxcbiAgICBhY3Rpb246IHtcbiAgICAgIC4uLmFjdGlvbixcbiAgICAgIHR5cGU6IFwibGlzdCBpdGVtLmFkZFwiXG4gICAgfVxuICB9KTtcbn0sIHJlbW92ZUxpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IGd1YXJkcyA9IGNyZWF0ZUd1YXJkcyhjb250ZXh0KSwgc2VsZWN0ZWRCbG9ja3MgPSBbLi4uRWRpdG9yLm5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBhdDogYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24sXG4gICAgbWF0Y2g6IChub2RlKSA9PiBndWFyZHMuaXNMaXN0QmxvY2sobm9kZSlcbiAgfSldO1xuICBmb3IgKGNvbnN0IFssIGF0XSBvZiBzZWxlY3RlZEJsb2NrcylcbiAgICBUcmFuc2Zvcm1zLnVuc2V0Tm9kZXMoYWN0aW9uLmVkaXRvciwgW1wibGlzdEl0ZW1cIiwgXCJsZXZlbFwiXSwge1xuICAgICAgYXRcbiAgICB9KTtcbn0sIGFkZExpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IGd1YXJkcyA9IGNyZWF0ZUd1YXJkcyhjb250ZXh0KSwgc2VsZWN0ZWRCbG9ja3MgPSBbLi4uRWRpdG9yLm5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBhdDogYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24sXG4gICAgbWF0Y2g6IChub2RlKSA9PiBndWFyZHMuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSldO1xuICBmb3IgKGNvbnN0IFssIGF0XSBvZiBzZWxlY3RlZEJsb2NrcylcbiAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICAgIGxldmVsOiAxLFxuICAgICAgbGlzdEl0ZW06IGFjdGlvbi5saXN0SXRlbVxuICAgIH0sIHtcbiAgICAgIGF0XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gaXNMaXN0SXRlbUFjdGl2ZSh7XG4gIGVkaXRvcixcbiAgbGlzdEl0ZW1cbn0pIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybiAhMTtcbiAgY29uc3Qgc2VsZWN0ZWRCbG9ja3MgPSBbLi4uRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pXTtcbiAgcmV0dXJuIHNlbGVjdGVkQmxvY2tzLmxlbmd0aCA+IDAgPyBzZWxlY3RlZEJsb2Nrcy5ldmVyeSgoW25vZGVdKSA9PiBlZGl0b3IuaXNMaXN0QmxvY2sobm9kZSkgJiYgbm9kZS5saXN0SXRlbSA9PT0gbGlzdEl0ZW0pIDogITE7XG59XG5jb25zdCB0b2dnbGVTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlzU3R5bGVBY3RpdmUoe1xuICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICBzdHlsZTogYWN0aW9uLnN0eWxlXG4gIH0pID8gcmVtb3ZlU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgY29udGV4dCxcbiAgICBhY3Rpb246IHtcbiAgICAgIC4uLmFjdGlvbixcbiAgICAgIHR5cGU6IFwic3R5bGUucmVtb3ZlXCJcbiAgICB9XG4gIH0pIDogYWRkU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbih7XG4gICAgY29udGV4dCxcbiAgICBhY3Rpb246IHtcbiAgICAgIC4uLmFjdGlvbixcbiAgICAgIHR5cGU6IFwic3R5bGUuYWRkXCJcbiAgICB9XG4gIH0pO1xufSwgcmVtb3ZlU3R5bGVBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBpZiAoIWFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3QgZGVmYXVsdFN0eWxlID0gY29udGV4dC5zY2hlbWEuc3R5bGVzWzBdLnZhbHVlLCBndWFyZHMgPSBjcmVhdGVHdWFyZHMoY29udGV4dCksIHNlbGVjdGVkQmxvY2tzID0gWy4uLkVkaXRvci5ub2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgYXQ6IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLFxuICAgIG1hdGNoOiAobm9kZSkgPT4gZ3VhcmRzLmlzVGV4dEJsb2NrKG5vZGUpXG4gIH0pXTtcbiAgZm9yIChjb25zdCBbLCBhdF0gb2Ygc2VsZWN0ZWRCbG9ja3MpXG4gICAgVHJhbnNmb3Jtcy5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBzdHlsZTogZGVmYXVsdFN0eWxlXG4gICAgfSwge1xuICAgICAgYXRcbiAgICB9KTtcbn0sIGFkZFN0eWxlQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IGd1YXJkcyA9IGNyZWF0ZUd1YXJkcyhjb250ZXh0KSwgc2VsZWN0ZWRCbG9ja3MgPSBbLi4uRWRpdG9yLm5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBhdDogYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24sXG4gICAgbWF0Y2g6IChub2RlKSA9PiBndWFyZHMuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSldO1xuICBmb3IgKGNvbnN0IFssIGF0XSBvZiBzZWxlY3RlZEJsb2NrcylcbiAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICAgIHN0eWxlOiBhY3Rpb24uc3R5bGVcbiAgICB9LCB7XG4gICAgICBhdFxuICAgIH0pO1xufTtcbmZ1bmN0aW9uIGlzU3R5bGVBY3RpdmUoe1xuICBlZGl0b3IsXG4gIHN0eWxlXG59KSB7XG4gIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IHNlbGVjdGVkQmxvY2tzID0gWy4uLkVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRCbG9jayhub2RlKVxuICB9KV07XG4gIHJldHVybiBzZWxlY3RlZEJsb2Nrcy5sZW5ndGggPiAwID8gc2VsZWN0ZWRCbG9ja3MuZXZlcnkoKFtub2RlXSkgPT4gbm9kZS5zdHlsZSA9PT0gc3R5bGUpIDogITE7XG59XG5jb25zdCBkZWJ1ZyQ2ID0gZGVidWdXaXRoTmFtZShcIkFQSTplZGl0YWJsZVwiKTtcbmZ1bmN0aW9uIGNyZWF0ZUVkaXRhYmxlQVBJKGVkaXRvciwgZWRpdG9yQWN0b3IpIHtcbiAgY29uc3QgdHlwZXMgPSBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQuc2NoZW1hO1xuICByZXR1cm4ge1xuICAgIGZvY3VzOiAoKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJmb2N1c1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBibHVyOiAoKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJibHVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRvZ2dsZU1hcms6IChtYXJrKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gICAgICAgICAgZGVjb3JhdG9yOiBtYXJrXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRvclxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b2dnbGVMaXN0OiAobGlzdEl0ZW0pID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICB0eXBlOiBcImxpc3QgaXRlbS50b2dnbGVcIixcbiAgICAgICAgICBsaXN0SXRlbVxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdG9nZ2xlQmxvY2tTdHlsZTogKHN0eWxlKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJzdHlsZS50b2dnbGVcIixcbiAgICAgICAgICBzdHlsZVxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3JcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaXNNYXJrQWN0aXZlOiAobWFyaykgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGlzRGVjb3JhdG9yQWN0aXZlKHtcbiAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgZGVjb3JhdG9yOiBtYXJrXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oZXJyKSwgITE7XG4gICAgICB9XG4gICAgfSxcbiAgICBtYXJrczogKCkgPT4gKHtcbiAgICAgIC4uLkVkaXRvci5tYXJrcyhlZGl0b3IpIHx8IHt9XG4gICAgfSkubWFya3MgfHwgW10sXG4gICAgdW5kbzogKCkgPT4gZWRpdG9yLnVuZG8oKSxcbiAgICByZWRvOiAoKSA9PiBlZGl0b3IucmVkbygpLFxuICAgIHNlbGVjdDogKHNlbGVjdGlvbikgPT4ge1xuICAgICAgY29uc3Qgc2xhdGVTZWxlY3Rpb24gPSB0b1NsYXRlUmFuZ2Uoc2VsZWN0aW9uLCBlZGl0b3IpO1xuICAgICAgc2xhdGVTZWxlY3Rpb24gPyBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHNsYXRlU2VsZWN0aW9uKSA6IFRyYW5zZm9ybXMuZGVzZWxlY3QoZWRpdG9yKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgfSxcbiAgICBmb2N1c0Jsb2NrOiAoKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yLnNlbGVjdGlvbikge1xuICAgICAgICBjb25zdCBibG9jayA9IE5vZGUuZGVzY2VuZGFudChlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSk7XG4gICAgICAgIGlmIChibG9jaylcbiAgICAgICAgICByZXR1cm4gZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpWzBdO1xuICAgICAgfVxuICAgIH0sXG4gICAgZm9jdXNDaGlsZDogKCkgPT4ge1xuICAgICAgaWYgKGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBOb2RlLmRlc2NlbmRhbnQoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSkpO1xuICAgICAgICBpZiAoYmxvY2sgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKGJsb2NrKSlcbiAgICAgICAgICByZXR1cm4gZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpWzBdLmNoaWxkcmVuW2VkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aFsxXV07XG4gICAgICB9XG4gICAgfSxcbiAgICBpbnNlcnRDaGlsZDogKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodHlwZS5uYW1lICE9PSB0eXBlcy5zcGFuLm5hbWUpXG4gICAgICAgIHJldHVybiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICAgICAgYmVoYXZpb3JFdmVudDoge1xuICAgICAgICAgICAgdHlwZTogXCJpbnNlcnQuaW5saW5lIG9iamVjdFwiLFxuICAgICAgICAgICAgaW5saW5lT2JqZWN0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGVkaXRvclxuICAgICAgICB9KSwgdG9Qb3J0YWJsZVRleHRSYW5nZShmcm9tU2xhdGVWYWx1ZShlZGl0b3IuY2hpbGRyZW4sIHR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKSwgZWRpdG9yLnNlbGVjdGlvbiwgdHlwZXMpPy5mb2N1cy5wYXRoID8/IFtdO1xuICAgICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZWRpdG9yIGhhcyBubyBzZWxlY3Rpb25cIik7XG4gICAgICBjb25zdCBbZm9jdXNCbG9ja10gPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSxcbiAgICAgICAgbWF0Y2g6IChuKSA9PiBuLl90eXBlID09PSB0eXBlcy5ibG9jay5uYW1lXG4gICAgICB9KSlbMF0gfHwgW3ZvaWQgMF07XG4gICAgICBpZiAoIWZvY3VzQmxvY2spXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGZvY3VzZWQgdGV4dCBibG9ja1wiKTtcbiAgICAgIGlmICh0eXBlLm5hbWUgIT09IHR5cGVzLnNwYW4ubmFtZSAmJiAhdHlwZXMuaW5saW5lT2JqZWN0cy5zb21lKCh0KSA9PiB0Lm5hbWUgPT09IHR5cGUubmFtZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgdHlwZSBjYW5ub3QgYmUgaW5zZXJ0ZWQgYXMgYSBjaGlsZCB0byBhIHRleHQgYmxvY2tcIik7XG4gICAgICBjb25zdCBjaGlsZCA9IHRvU2xhdGVWYWx1ZShbe1xuICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgIF90eXBlOiB0eXBlcy5ibG9jay5uYW1lLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICBfa2V5OiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgICAgX3R5cGU6IHR5cGUubmFtZSxcbiAgICAgICAgICAuLi52YWx1ZSB8fCB7fVxuICAgICAgICB9XVxuICAgICAgfV0sIHtcbiAgICAgICAgc2NoZW1hVHlwZXM6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5zY2hlbWFcbiAgICAgIH0pWzBdLmNoaWxkcmVuWzBdLCBmb2N1c0NoaWxkUGF0aCA9IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAyKSwgaXNTcGFuTm9kZSA9IGNoaWxkLl90eXBlID09PSB0eXBlcy5zcGFuLm5hbWUsIGZvY3VzTm9kZSA9IE5vZGUuZ2V0KGVkaXRvciwgZm9jdXNDaGlsZFBhdGgpO1xuICAgICAgcmV0dXJuIGlzU3Bhbk5vZGUgJiYgZm9jdXNOb2RlLl90eXBlICE9PSB0eXBlcy5zcGFuLm5hbWUgJiYgKGRlYnVnJDYoXCJJbnNlcnRpbmcgc3BhbiBjaGlsZCBuZXh0IHRvIGlubGluZSBvYmplY3QgY2hpbGQsIG1vdmluZyBzZWxlY3Rpb24gKyAxXCIpLCBlZGl0b3IubW92ZSh7XG4gICAgICAgIGRpc3RhbmNlOiAxLFxuICAgICAgICB1bml0OiBcImNoYXJhY3RlclwiXG4gICAgICB9KSksIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBjaGlsZCwge1xuICAgICAgICBzZWxlY3Q6ICEwLFxuICAgICAgICBhdDogZWRpdG9yLnNlbGVjdGlvblxuICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpLCB0b1BvcnRhYmxlVGV4dFJhbmdlKGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpLCBlZGl0b3Iuc2VsZWN0aW9uLCB0eXBlcyk/LmZvY3VzLnBhdGggfHwgW107XG4gICAgfSxcbiAgICBpbnNlcnRCbG9jazogKHR5cGUsIHZhbHVlKSA9PiAoZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwiaW5zZXJ0LmJsb2NrIG9iamVjdFwiLFxuICAgICAgICBibG9ja09iamVjdDoge1xuICAgICAgICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBwbGFjZW1lbnQ6IFwiYXV0b1wiXG4gICAgICB9LFxuICAgICAgZWRpdG9yXG4gICAgfSksIHRvUG9ydGFibGVUZXh0UmFuZ2UoZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIGVkaXRvci5zZWxlY3Rpb24sIHR5cGVzKT8uZm9jdXMucGF0aCA/PyBbXSksXG4gICAgaGFzQmxvY2tTdHlsZTogKHN0eWxlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gaXNTdHlsZUFjdGl2ZSh7XG4gICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgIHN0eWxlXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGhhc0xpc3RTdHlsZTogKGxpc3RJdGVtKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gaXNMaXN0SXRlbUFjdGl2ZSh7XG4gICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgIGxpc3RJdGVtXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzVm9pZDogKGVsZW1lbnQpID0+ICFbdHlwZXMuYmxvY2submFtZSwgdHlwZXMuc3Bhbi5uYW1lXS5pbmNsdWRlcyhlbGVtZW50Ll90eXBlKSxcbiAgICBmaW5kQnlQYXRoOiAocGF0aCkgPT4ge1xuICAgICAgY29uc3Qgc2xhdGVQYXRoID0gdG9TbGF0ZVJhbmdlKHtcbiAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9XG4gICAgICB9LCBlZGl0b3IpO1xuICAgICAgaWYgKHNsYXRlUGF0aCkge1xuICAgICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIHNsYXRlUGF0aC5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpKTtcbiAgICAgICAgaWYgKGJsb2NrICYmIGJsb2NrUGF0aCAmJiB0eXBlb2YgYmxvY2suX2tleSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAxICYmIHNsYXRlUGF0aC5mb2N1cy5wYXRoLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybiBbZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdHlwZXMuYmxvY2submFtZSlbMF0sIFt7XG4gICAgICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgICAgIH1dXTtcbiAgICAgICAgICBjb25zdCBwdEJsb2NrID0gZnJvbVNsYXRlVmFsdWUoW2Jsb2NrXSwgdHlwZXMuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KGVkaXRvcikpWzBdO1xuICAgICAgICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2socHRCbG9jaykpIHtcbiAgICAgICAgICAgIGNvbnN0IHB0Q2hpbGQgPSBwdEJsb2NrLmNoaWxkcmVuW3NsYXRlUGF0aC5mb2N1cy5wYXRoWzFdXTtcbiAgICAgICAgICAgIGlmIChwdENoaWxkKVxuICAgICAgICAgICAgICByZXR1cm4gW3B0Q2hpbGQsIFt7XG4gICAgICAgICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICAgICAgICBfa2V5OiBwdENoaWxkLl9rZXlcbiAgICAgICAgICAgICAgfV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gICAgfSxcbiAgICBmaW5kRE9NTm9kZTogKGVsZW1lbnQpID0+IHtcbiAgICAgIGxldCBub2RlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2l0ZW1dID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgYXQ6IFtdLFxuICAgICAgICAgIG1hdGNoOiAobikgPT4gbi5fa2V5ID09PSBlbGVtZW50Ll9rZXlcbiAgICAgICAgfSkgfHwgW10pWzBdIHx8IFt2b2lkIDBdO1xuICAgICAgICBub2RlID0gUmVhY3RFZGl0b3IudG9ET01Ob2RlKGVkaXRvciwgaXRlbSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgYWN0aXZlQW5ub3RhdGlvbnM6ICgpID0+IHtcbiAgICAgIGlmICghZWRpdG9yLnNlbGVjdGlvbiB8fCBlZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGgubGVuZ3RoIDwgMilcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWN0aXZlQW5ub3RhdGlvbnMgPSBbXSwgc3BhbnMgPSBFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24sXG4gICAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBUZXh0LmlzVGV4dChub2RlKSAmJiBub2RlLm1hcmtzICE9PSB2b2lkIDAgJiYgQXJyYXkuaXNBcnJheShub2RlLm1hcmtzKSAmJiBub2RlLm1hcmtzLmxlbmd0aCA+IDBcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoY29uc3QgW3NwYW4sIHBhdGhdIG9mIHNwYW5zKSB7XG4gICAgICAgICAgY29uc3QgW2Jsb2NrXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgcGF0aCwge1xuICAgICAgICAgICAgZGVwdGg6IDFcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGJsb2NrLm1hcmtEZWZzPy5mb3JFYWNoKChkZWYpID0+IHtcbiAgICAgICAgICAgIFRleHQuaXNUZXh0KHNwYW4pICYmIHNwYW4ubWFya3MgJiYgQXJyYXkuaXNBcnJheShzcGFuLm1hcmtzKSAmJiBzcGFuLm1hcmtzLmluY2x1ZGVzKGRlZi5fa2V5KSAmJiBhY3RpdmVBbm5vdGF0aW9ucy5wdXNoKGRlZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGl2ZUFubm90YXRpb25zO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzQW5ub3RhdGlvbkFjdGl2ZTogKGFubm90YXRpb25UeXBlKSA9PiBpc0Fubm90YXRpb25BY3RpdmUoe1xuICAgICAgZWRpdG9yLFxuICAgICAgYW5ub3RhdGlvbjoge1xuICAgICAgICBuYW1lOiBhbm5vdGF0aW9uVHlwZVxuICAgICAgfVxuICAgIH0pLFxuICAgIGFkZEFubm90YXRpb246ICh0eXBlLCB2YWx1ZSkgPT4ge1xuICAgICAgbGV0IHBhdGhzO1xuICAgICAgcmV0dXJuIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgIHBhdGhzID0gYWRkQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uKHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBrZXlHZW5lcmF0b3I6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICAgICAgICBzY2hlbWE6IHR5cGVzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgIHR5cGU6IFwiYW5ub3RhdGlvbi5hZGRcIixcbiAgICAgICAgICAgIGFubm90YXRpb246IHtcbiAgICAgICAgICAgICAgbmFtZTogdHlwZS5uYW1lLFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUgPz8ge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlZGl0b3JcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpLCBwYXRocztcbiAgICB9LFxuICAgIGRlbGV0ZTogKHNlbGVjdGlvbiwgb3B0aW9ucykgPT4ge1xuICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRvU2xhdGVSYW5nZShzZWxlY3Rpb24sIGVkaXRvcik7XG4gICAgICAgIGlmICghKHJhbmdlICYmIHJhbmdlLmFuY2hvci5wYXRoLmxlbmd0aCA+IDAgJiYgcmFuZ2UuZm9jdXMucGF0aC5sZW5ndGggPiAwKSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJhbmdlXCIpO1xuICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICBpZiAoIW9wdGlvbnM/Lm1vZGUgfHwgb3B0aW9ucz8ubW9kZSA9PT0gXCJzZWxlY3RlZFwiKSB7XG4gICAgICAgICAgICBkZWJ1ZyQ2KFwiRGVsZXRpbmcgY29udGVudCBpbiBzZWxlY3Rpb25cIiksIFRyYW5zZm9ybXMuZGVsZXRlKGVkaXRvciwge1xuICAgICAgICAgICAgICBhdDogcmFuZ2UsXG4gICAgICAgICAgICAgIGhhbmdpbmc6ICEwLFxuICAgICAgICAgICAgICB2b2lkczogITBcbiAgICAgICAgICAgIH0pLCBlZGl0b3Iub25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0aW9ucz8ubW9kZSA9PT0gXCJibG9ja3NcIiAmJiAoZGVidWckNihcIkRlbGV0aW5nIGJsb2NrcyB0b3VjaGVkIGJ5IHNlbGVjdGlvblwiKSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIGF0OiByYW5nZSxcbiAgICAgICAgICAgIHZvaWRzOiAhMCxcbiAgICAgICAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpIHx8ICFlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSkgJiYgRWxlbWVudCQxLmlzRWxlbWVudChub2RlKVxuICAgICAgICAgIH0pKSwgb3B0aW9ucz8ubW9kZSA9PT0gXCJjaGlsZHJlblwiICYmIChkZWJ1ZyQ2KFwiRGVsZXRpbmcgY2hpbGRyZW4gdG91Y2hlZCBieSBzZWxlY3Rpb25cIiksIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBhdDogcmFuZ2UsXG4gICAgICAgICAgICB2b2lkczogITAsXG4gICAgICAgICAgICBtYXRjaDogKG5vZGUpID0+IG5vZGUuX3R5cGUgPT09IHR5cGVzLnNwYW4ubmFtZSB8fCAvLyBUZXh0IGNoaWxkcmVuXG4gICAgICAgICAgICAhZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpICYmIEVsZW1lbnQkMS5pc0VsZW1lbnQobm9kZSlcbiAgICAgICAgICB9KSksIGVkaXRvci5jaGlsZHJlbi5sZW5ndGggPT09IDAgJiYgKGVkaXRvci5jaGlsZHJlbiA9IFtlZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICAgICAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgICAgICAgfSldKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZUFubm90YXRpb246ICh0eXBlKSA9PiB7XG4gICAgICBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgICAgdHlwZTogXCJhbm5vdGF0aW9uLnJlbW92ZVwiLFxuICAgICAgICAgIGFubm90YXRpb246IHtcbiAgICAgICAgICAgIG5hbWU6IHR5cGUubmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdG9yXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldFNlbGVjdGlvbjogKCkgPT4ge1xuICAgICAgbGV0IHB0UmFuZ2UgPSBudWxsO1xuICAgICAgaWYgKGVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBTTEFURV9UT19QT1JUQUJMRV9URVhUX1JBTkdFLmdldChlZGl0b3Iuc2VsZWN0aW9uKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nKVxuICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgcHRSYW5nZSA9IHRvUG9ydGFibGVUZXh0UmFuZ2UoZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmNoaWxkcmVuLCB0eXBlcy5ibG9jay5uYW1lLCBLRVlfVE9fVkFMVUVfRUxFTUVOVC5nZXQoZWRpdG9yKSksIGVkaXRvci5zZWxlY3Rpb24sIHR5cGVzKSwgU0xBVEVfVE9fUE9SVEFCTEVfVEVYVF9SQU5HRS5zZXQoZWRpdG9yLnNlbGVjdGlvbiwgcHRSYW5nZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHRSYW5nZTtcbiAgICB9LFxuICAgIGdldFZhbHVlOiAoKSA9PiBmcm9tU2xhdGVWYWx1ZShlZGl0b3IuY2hpbGRyZW4sIHR5cGVzLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKSxcbiAgICBpc0NvbGxhcHNlZFNlbGVjdGlvbjogKCkgPT4gISFlZGl0b3Iuc2VsZWN0aW9uICYmIFJhbmdlLmlzQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pLFxuICAgIGlzRXhwYW5kZWRTZWxlY3Rpb246ICgpID0+ICEhZWRpdG9yLnNlbGVjdGlvbiAmJiBSYW5nZS5pc0V4cGFuZGVkKGVkaXRvci5zZWxlY3Rpb24pLFxuICAgIGluc2VydEJyZWFrOiAoKSA9PiB7XG4gICAgICBlZGl0b3IuaW5zZXJ0QnJlYWsoKSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgfSxcbiAgICBnZXRGcmFnbWVudDogKCkgPT4gZnJvbVNsYXRlVmFsdWUoZWRpdG9yLmdldEZyYWdtZW50KCksIHR5cGVzLmJsb2NrLm5hbWUpLFxuICAgIGlzU2VsZWN0aW9uc092ZXJsYXBwaW5nOiAoc2VsZWN0aW9uQSwgc2VsZWN0aW9uQikgPT4ge1xuICAgICAgY29uc3QgcmFuZ2VBID0gdG9TbGF0ZVJhbmdlKHNlbGVjdGlvbkEsIGVkaXRvciksIHJhbmdlQiA9IHRvU2xhdGVSYW5nZShzZWxlY3Rpb25CLCBlZGl0b3IpO1xuICAgICAgcmV0dXJuIFJhbmdlLmlzUmFuZ2UocmFuZ2VBKSAmJiBSYW5nZS5pc1JhbmdlKHJhbmdlQikgJiYgUmFuZ2UuaW5jbHVkZXMocmFuZ2VBLCByYW5nZUIpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGlzQW5ub3RhdGlvbkFjdGl2ZSh7XG4gIGVkaXRvcixcbiAgYW5ub3RhdGlvblxufSkge1xuICBpZiAoIWVkaXRvci5zZWxlY3Rpb24gfHwgZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLmxlbmd0aCA8IDIpXG4gICAgcmV0dXJuICExO1xuICB0cnkge1xuICAgIGNvbnN0IHNwYW5zID0gWy4uLkVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgICAgbWF0Y2g6IChub2RlKSA9PiBUZXh0LmlzVGV4dChub2RlKVxuICAgIH0pXTtcbiAgICBpZiAoc3BhbnMubGVuZ3RoID09PSAwIHx8IHNwYW5zLnNvbWUoKFtzcGFuXSkgPT4gIWlzUG9ydGFibGVUZXh0U3BhbiQxKHNwYW4pIHx8ICFzcGFuLm1hcmtzIHx8IHNwYW4ubWFya3M/Lmxlbmd0aCA9PT0gMCkpIHJldHVybiAhMTtcbiAgICBjb25zdCBzZWxlY3Rpb25NYXJrRGVmcyA9IHNwYW5zLnJlZHVjZSgoYWNjTWFya0RlZnMsIFssIHBhdGhdKSA9PiB7XG4gICAgICBjb25zdCBbYmxvY2tdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBwYXRoLCB7XG4gICAgICAgIGRlcHRoOiAxXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spICYmIGJsb2NrLm1hcmtEZWZzID8gWy4uLmFjY01hcmtEZWZzLCAuLi5ibG9jay5tYXJrRGVmc10gOiBhY2NNYXJrRGVmcztcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIHNwYW5zLmV2ZXJ5KChbc3Bhbl0pID0+IGlzUG9ydGFibGVUZXh0U3BhbiQxKHNwYW4pID8gc3Bhbi5tYXJrcz8ubWFwKChtYXJrS2V5KSA9PiBzZWxlY3Rpb25NYXJrRGVmcy5maW5kKChkZWYpID0+IGRlZj8uX2tleSA9PT0gbWFya0tleSk/Ll90eXBlKT8uaW5jbHVkZXMoYW5ub3RhdGlvbi5uYW1lKSA6ICExKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuICExO1xuICB9XG59XG5jb25zdCBhZGRBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgZWRpdG9yID0gYWN0aW9uLmVkaXRvciwge1xuICAgIHNlbGVjdGlvbjogb3JpZ2luYWxTZWxlY3Rpb25cbiAgfSA9IGVkaXRvcjtcbiAgbGV0IHBhdGhzO1xuICBpZiAob3JpZ2luYWxTZWxlY3Rpb24gJiYgKFJhbmdlLmlzQ29sbGFwc2VkKG9yaWdpbmFsU2VsZWN0aW9uKSAmJiAoZWRpdG9yLnB0ZUV4cGFuZFRvV29yZCgpLCBlZGl0b3Iub25DaGFuZ2UoKSksIGVkaXRvci5zZWxlY3Rpb24pKSB7XG4gICAgbGV0IHNwYW5QYXRoLCBtYXJrRGVmUGF0aDtcbiAgICBjb25zdCBtYXJrRGVmUGF0aHMgPSBbXTtcbiAgICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgICByZXR1cm47XG4gICAgY29uc3Qgc2VsZWN0ZWRCbG9ja3MgPSBFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogZWRpdG9yLnNlbGVjdGlvbixcbiAgICAgIG1hdGNoOiAobm9kZSkgPT4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGUpLFxuICAgICAgcmV2ZXJzZTogUmFuZ2UuaXNCYWNrd2FyZChlZGl0b3Iuc2VsZWN0aW9uKVxuICAgIH0pO1xuICAgIGZvciAoY29uc3QgW2Jsb2NrLCBibG9ja1BhdGhdIG9mIHNlbGVjdGVkQmxvY2tzKSB7XG4gICAgICBpZiAoYmxvY2suY2hpbGRyZW4ubGVuZ3RoID09PSAwIHx8IGJsb2NrLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBibG9jay5jaGlsZHJlblswXS50ZXh0ID09PSBcIlwiKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNvbnN0IGFubm90YXRpb25LZXkgPSBjb250ZXh0LmtleUdlbmVyYXRvcigpLCBtYXJrRGVmcyA9IGJsb2NrLm1hcmtEZWZzID8/IFtdO1xuICAgICAgbWFya0RlZnMuZmluZCgobWFya0RlZikgPT4gbWFya0RlZi5fdHlwZSA9PT0gYWN0aW9uLmFubm90YXRpb24ubmFtZSAmJiBtYXJrRGVmLl9rZXkgPT09IGFubm90YXRpb25LZXkpID09PSB2b2lkIDAgJiYgKFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIG1hcmtEZWZzOiBbLi4ubWFya0RlZnMsIHtcbiAgICAgICAgICBfdHlwZTogYWN0aW9uLmFubm90YXRpb24ubmFtZSxcbiAgICAgICAgICBfa2V5OiBhbm5vdGF0aW9uS2V5LFxuICAgICAgICAgIC4uLmFjdGlvbi5hbm5vdGF0aW9uLnZhbHVlXG4gICAgICAgIH1dXG4gICAgICB9LCB7XG4gICAgICAgIGF0OiBibG9ja1BhdGhcbiAgICAgIH0pLCBtYXJrRGVmUGF0aCA9IFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH0sIFwibWFya0RlZnNcIiwge1xuICAgICAgICBfa2V5OiBhbm5vdGF0aW9uS2V5XG4gICAgICB9XSwgUmFuZ2UuaXNCYWNrd2FyZChlZGl0b3Iuc2VsZWN0aW9uKSA/IG1hcmtEZWZQYXRocy51bnNoaWZ0KG1hcmtEZWZQYXRoKSA6IG1hcmtEZWZQYXRocy5wdXNoKG1hcmtEZWZQYXRoKSksIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7fSwge1xuICAgICAgICBtYXRjaDogVGV4dC5pc1RleHQsXG4gICAgICAgIHNwbGl0OiAhMFxuICAgICAgfSk7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBibG9ja1BhdGgpO1xuICAgICAgZm9yIChjb25zdCBbc3BhbiwgcGF0aF0gb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0U3BhbihzcGFuKSB8fCAhUmFuZ2UuaW5jbHVkZXMoZWRpdG9yLnNlbGVjdGlvbiwgcGF0aCkpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IG1hcmtzID0gc3Bhbi5tYXJrcyA/PyBbXSwgZXhpc3RpbmdTYW1lVHlwZUFubm90YXRpb25zID0gbWFya3MuZmlsdGVyKChtYXJrKSA9PiBtYXJrRGVmcy5zb21lKChtYXJrRGVmKSA9PiBtYXJrRGVmLl9rZXkgPT09IG1hcmsgJiYgbWFya0RlZi5fdHlwZSA9PT0gYWN0aW9uLmFubm90YXRpb24ubmFtZSkpO1xuICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtzOiBbLi4ubWFya3MuZmlsdGVyKChtYXJrKSA9PiAhZXhpc3RpbmdTYW1lVHlwZUFubm90YXRpb25zLmluY2x1ZGVzKG1hcmspKSwgYW5ub3RhdGlvbktleV1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGF0OiBwYXRoXG4gICAgICAgIH0pLCBzcGFuUGF0aCA9IFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9LCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICBfa2V5OiBzcGFuLl9rZXlcbiAgICAgICAgfV07XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtEZWZQYXRoICYmIHNwYW5QYXRoICYmIChwYXRocyA9IHtcbiAgICAgIG1hcmtEZWZQYXRoLFxuICAgICAgbWFya0RlZlBhdGhzLFxuICAgICAgc3BhblBhdGhcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGF0aHM7XG59LCByZW1vdmVBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBhY3Rpb25cbn0pID0+IHtcbiAgY29uc3QgZWRpdG9yID0gYWN0aW9uLmVkaXRvcjtcbiAgaWYgKGRlYnVnJDYoXCJSZW1vdmluZyBhbm5vdGF0aW9uXCIsIGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUpLCAhIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgaWYgKFJhbmdlLmlzQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pKSB7XG4gICAgICBjb25zdCBbYmxvY2ssIGJsb2NrUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24sIHtcbiAgICAgICAgZGVwdGg6IDFcbiAgICAgIH0pO1xuICAgICAgaWYgKCFlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBwb3RlbnRpYWxBbm5vdGF0aW9ucyA9IChibG9jay5tYXJrRGVmcyA/PyBbXSkuZmlsdGVyKChtYXJrRGVmKSA9PiBtYXJrRGVmLl90eXBlID09PSBhY3Rpb24uYW5ub3RhdGlvbi5uYW1lKSwgW3NlbGVjdGVkQ2hpbGQsIHNlbGVjdGVkQ2hpbGRQYXRoXSA9IEVkaXRvci5ub2RlKGVkaXRvciwgZWRpdG9yLnNlbGVjdGlvbiwge1xuICAgICAgICBkZXB0aDogMlxuICAgICAgfSk7XG4gICAgICBpZiAoIWVkaXRvci5pc1RleHRTcGFuKHNlbGVjdGVkQ2hpbGQpKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBhbm5vdGF0aW9uVG9SZW1vdmUgPSBzZWxlY3RlZENoaWxkLm1hcmtzPy5maW5kKChtYXJrKSA9PiBwb3RlbnRpYWxBbm5vdGF0aW9ucy5zb21lKChtYXJrRGVmKSA9PiBtYXJrRGVmLl9rZXkgPT09IG1hcmspKTtcbiAgICAgIGlmICghYW5ub3RhdGlvblRvUmVtb3ZlKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBwcmV2aW91c1NwYW5zV2l0aFNhbWVBbm5vdGF0aW9uID0gW107XG4gICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoLCB7XG4gICAgICAgIHJldmVyc2U6ICEwXG4gICAgICB9KSlcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSAmJiBQYXRoLmlzQmVmb3JlKGNoaWxkUGF0aCwgc2VsZWN0ZWRDaGlsZFBhdGgpKVxuICAgICAgICAgIGlmIChjaGlsZC5tYXJrcz8uaW5jbHVkZXMoYW5ub3RhdGlvblRvUmVtb3ZlKSlcbiAgICAgICAgICAgIHByZXZpb3VzU3BhbnNXaXRoU2FtZUFubm90YXRpb24ucHVzaChbY2hpbGQsIGNoaWxkUGF0aF0pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY29uc3QgbmV4dFNwYW5zV2l0aFNhbWVBbm5vdGF0aW9uID0gW107XG4gICAgICBmb3IgKGNvbnN0IFtjaGlsZCwgY2hpbGRQYXRoXSBvZiBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoKSlcbiAgICAgICAgaWYgKGVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSAmJiBQYXRoLmlzQWZ0ZXIoY2hpbGRQYXRoLCBzZWxlY3RlZENoaWxkUGF0aCkpXG4gICAgICAgICAgaWYgKGNoaWxkLm1hcmtzPy5pbmNsdWRlcyhhbm5vdGF0aW9uVG9SZW1vdmUpKVxuICAgICAgICAgICAgbmV4dFNwYW5zV2l0aFNhbWVBbm5vdGF0aW9uLnB1c2goW2NoaWxkLCBjaGlsZFBhdGhdKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIFsuLi5wcmV2aW91c1NwYW5zV2l0aFNhbWVBbm5vdGF0aW9uLCBbc2VsZWN0ZWRDaGlsZCwgc2VsZWN0ZWRDaGlsZFBhdGhdLCAuLi5uZXh0U3BhbnNXaXRoU2FtZUFubm90YXRpb25dKVxuICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIG1hcmtzOiBjaGlsZC5tYXJrcz8uZmlsdGVyKChtYXJrKSA9PiBtYXJrICE9PSBhbm5vdGF0aW9uVG9SZW1vdmUpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhdDogY2hpbGRQYXRoXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge30sIHtcbiAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0U3Bhbihub2RlKSxcbiAgICAgICAgc3BsaXQ6ICEwLFxuICAgICAgICBoYW5naW5nOiAhMFxuICAgICAgfSk7XG4gICAgICBjb25zdCBibG9ja3MgPSBFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uLFxuICAgICAgICBtYXRjaDogKG5vZGUpID0+IGVkaXRvci5pc1RleHRCbG9jayhub2RlKVxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IFtibG9jaywgYmxvY2tQYXRoXSBvZiBibG9ja3MpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgYmxvY2tQYXRoKTtcbiAgICAgICAgZm9yIChjb25zdCBbY2hpbGQsIGNoaWxkUGF0aF0gb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoIWVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSB8fCAhUmFuZ2UuaW5jbHVkZXMoZWRpdG9yLnNlbGVjdGlvbiwgY2hpbGRQYXRoKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNvbnN0IG1hcmtEZWZzID0gYmxvY2subWFya0RlZnMgPz8gW10sIG1hcmtzID0gY2hpbGQubWFya3MgPz8gW10sIG1hcmtzV2l0aG91dEFubm90YXRpb24gPSBtYXJrcy5maWx0ZXIoKG1hcmspID0+IG1hcmtEZWZzLmZpbmQoKG1hcmtEZWYyKSA9PiBtYXJrRGVmMi5fa2V5ID09PSBtYXJrKT8uX3R5cGUgIT09IGFjdGlvbi5hbm5vdGF0aW9uLm5hbWUpO1xuICAgICAgICAgIG1hcmtzV2l0aG91dEFubm90YXRpb24ubGVuZ3RoICE9PSBtYXJrcy5sZW5ndGggJiYgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hcmtzOiBtYXJrc1dpdGhvdXRBbm5vdGF0aW9uXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYXQ6IGNoaWxkUGF0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxufSwgdG9nZ2xlQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmIChpc0Fubm90YXRpb25BY3RpdmUoe1xuICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBuYW1lOiBhY3Rpb24uYW5ub3RhdGlvbi5uYW1lXG4gICAgfVxuICB9KSlcbiAgICByZW1vdmVBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgICAgY29udGV4dCxcbiAgICAgIGFjdGlvbjoge1xuICAgICAgICB0eXBlOiBcImFubm90YXRpb24ucmVtb3ZlXCIsXG4gICAgICAgIGFubm90YXRpb246IGFjdGlvbi5hbm5vdGF0aW9uLFxuICAgICAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3JcbiAgICAgIH1cbiAgICB9KTtcbiAgZWxzZVxuICAgIHJldHVybiBhZGRBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgICAgY29udGV4dCxcbiAgICAgIGFjdGlvbjoge1xuICAgICAgICB0eXBlOiBcImFubm90YXRpb24uYWRkXCIsXG4gICAgICAgIGFubm90YXRpb246IGFjdGlvbi5hbm5vdGF0aW9uLFxuICAgICAgICBlZGl0b3I6IGFjdGlvbi5lZGl0b3JcbiAgICAgIH1cbiAgICB9KTtcbn07XG5mdW5jdGlvbiBpbnNlcnRCbG9jayh7XG4gIGJsb2NrLFxuICBwbGFjZW1lbnQsXG4gIGVkaXRvcixcbiAgc2NoZW1hXG59KSB7XG4gIGlmIChlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgY29uc3QgW2ZvY3VzQmxvY2ssIGZvY3VzQmxvY2tQYXRoXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgYXQ6IGVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKSxcbiAgICAgIG1hdGNoOiAobikgPT4gIUVkaXRvci5pc0VkaXRvcihuKVxuICAgIH0pKVswXSA/PyBbdm9pZCAwLCB2b2lkIDBdO1xuICAgIGlmIChwbGFjZW1lbnQgPT09IFwiYWZ0ZXJcIikge1xuICAgICAgY29uc3QgbmV4dFBhdGggPSBbZm9jdXNCbG9ja1BhdGhbMF0gKyAxXTtcbiAgICAgIFRyYW5zZm9ybXMuaW5zZXJ0Tm9kZXMoZWRpdG9yLCBibG9jaywge1xuICAgICAgICBhdDogbmV4dFBhdGhcbiAgICAgIH0pLCBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHtcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogW25leHRQYXRoWzBdLCAwXSxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICBwYXRoOiBbbmV4dFBhdGhbMF0sIDBdLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgcGxhY2VtZW50ID09PSBcImJlZm9yZVwiID8gVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIGJsb2NrLCB7XG4gICAgICBhdDogZm9jdXNCbG9ja1BhdGhcbiAgICB9KSA6IEVkaXRvci5pbnNlcnROb2RlKGVkaXRvciwgYmxvY2spO1xuICAgIGZvY3VzQmxvY2sgJiYgaXNFcXVhbFRvRW1wdHlFZGl0b3IoW2ZvY3VzQmxvY2tdLCBzY2hlbWEpICYmIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogZm9jdXNCbG9ja1BhdGhcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsYXN0QmxvY2sgPSBBcnJheS5mcm9tKEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgIG1hdGNoOiAobikgPT4gIUVkaXRvci5pc0VkaXRvcihuKSxcbiAgICAgIGF0OiBbXSxcbiAgICAgIHJldmVyc2U6ICEwXG4gICAgfSkpWzBdO1xuICAgIEVkaXRvci5pbnNlcnROb2RlKGVkaXRvciwgYmxvY2spLCBsYXN0QmxvY2sgJiYgaXNFcXVhbFRvRW1wdHlFZGl0b3IoW2xhc3RCbG9ja1swXV0sIHNjaGVtYSkgJiYgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBsYXN0QmxvY2tbMV1cbiAgICB9KTtcbiAgfVxufVxuY29uc3QgaW5zZXJ0QmxvY2tPYmplY3RBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBibG9jayA9IHRvU2xhdGVWYWx1ZShbe1xuICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgX3R5cGU6IGFjdGlvbi5ibG9ja09iamVjdC5uYW1lLFxuICAgIC4uLmFjdGlvbi5ibG9ja09iamVjdC52YWx1ZSA/IGFjdGlvbi5ibG9ja09iamVjdC52YWx1ZSA6IHt9XG4gIH1dLCB7XG4gICAgc2NoZW1hVHlwZXM6IGNvbnRleHQuc2NoZW1hXG4gIH0pWzBdO1xuICBpbnNlcnRCbG9jayh7XG4gICAgYmxvY2ssXG4gICAgcGxhY2VtZW50OiBhY3Rpb24ucGxhY2VtZW50LFxuICAgIGVkaXRvcjogYWN0aW9uLmVkaXRvcixcbiAgICBzY2hlbWE6IGNvbnRleHQuc2NoZW1hXG4gIH0pO1xufSwgaW5zZXJ0QnJlYWtBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGNvbnRleHQsXG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBrZXlHZW5lcmF0b3IgPSBjb250ZXh0LmtleUdlbmVyYXRvciwgc2NoZW1hID0gY29udGV4dC5zY2hlbWEsIGVkaXRvciA9IGFjdGlvbi5lZGl0b3I7XG4gIGlmICghZWRpdG9yLnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IFtmb2N1c1NwYW5dID0gQXJyYXkuZnJvbShFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgbW9kZTogXCJsb3dlc3RcIixcbiAgICBhdDogZWRpdG9yLnNlbGVjdGlvbi5mb2N1cyxcbiAgICBtYXRjaDogKG4pID0+IGVkaXRvci5pc1RleHRTcGFuKG4pLFxuICAgIHZvaWRzOiAhMVxuICB9KSlbMF0gPz8gW3ZvaWQgMF0sIGZvY3VzRGVjb3JhdG9ycyA9IGZvY3VzU3Bhbj8ubWFya3M/LmZpbHRlcigobWFyaykgPT4gc2NoZW1hLmRlY29yYXRvcnMuc29tZSgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUgPT09IG1hcmspKSA/PyBbXSwgZm9jdXNBbm5vdGF0aW9ucyA9IGZvY3VzU3Bhbj8ubWFya3M/LmZpbHRlcigobWFyaykgPT4gIXNjaGVtYS5kZWNvcmF0b3JzLnNvbWUoKGRlY29yYXRvcikgPT4gZGVjb3JhdG9yLnZhbHVlID09PSBtYXJrKSkgPz8gW10sIGFuY2hvckJsb2NrUGF0aCA9IGVkaXRvci5zZWxlY3Rpb24uYW5jaG9yLnBhdGguc2xpY2UoMCwgMSksIGZvY3VzQmxvY2tQYXRoID0gZWRpdG9yLnNlbGVjdGlvbi5mb2N1cy5wYXRoLnNsaWNlKDAsIDEpLCBmb2N1c0Jsb2NrID0gTm9kZS5kZXNjZW5kYW50KGVkaXRvciwgZm9jdXNCbG9ja1BhdGgpO1xuICBpZiAoZWRpdG9yLmlzVGV4dEJsb2NrKGZvY3VzQmxvY2spKSB7XG4gICAgY29uc3QgW3N0YXJ0LCBlbmRdID0gUmFuZ2UuZWRnZXMoZWRpdG9yLnNlbGVjdGlvbiksIGxhc3RGb2N1c0Jsb2NrQ2hpbGQgPSBmb2N1c0Jsb2NrLmNoaWxkcmVuW2ZvY3VzQmxvY2suY2hpbGRyZW4ubGVuZ3RoIC0gMV0sIGF0VGhlRW5kT2ZCbG9jayA9IGlzRXF1YWwoc3RhcnQsIHtcbiAgICAgIHBhdGg6IFsuLi5mb2N1c0Jsb2NrUGF0aCwgZm9jdXNCbG9jay5jaGlsZHJlbi5sZW5ndGggLSAxXSxcbiAgICAgIG9mZnNldDogZWRpdG9yLmlzVGV4dFNwYW4obGFzdEZvY3VzQmxvY2tDaGlsZCkgPyBsYXN0Rm9jdXNCbG9ja0NoaWxkLnRleHQubGVuZ3RoIDogMFxuICAgIH0pLCBhdFRoZVN0YXJ0T2ZCbG9jayA9IGlzRXF1YWwoZW5kLCB7XG4gICAgICBwYXRoOiBbLi4uZm9jdXNCbG9ja1BhdGgsIDBdLFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfSk7XG4gICAgaWYgKGF0VGhlRW5kT2ZCbG9jayAmJiBSYW5nZS5pc0NvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgICAgRWRpdG9yLmluc2VydE5vZGUoZWRpdG9yLCBlZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICAgICAgZGVjb3JhdG9yczogW10sXG4gICAgICAgIGxpc3RJdGVtOiBmb2N1c0Jsb2NrLmxpc3RJdGVtLFxuICAgICAgICBsZXZlbDogZm9jdXNCbG9jay5sZXZlbFxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYXRUaGVTdGFydE9mQmxvY2sgJiYgUmFuZ2UuaXNDb2xsYXBzZWQoZWRpdG9yLnNlbGVjdGlvbikpIHtcbiAgICAgIEVkaXRvci5pbnNlcnROb2RlKGVkaXRvciwgZWRpdG9yLnB0ZUNyZWF0ZVRleHRCbG9jayh7XG4gICAgICAgIGRlY29yYXRvcnM6IGZvY3VzQW5ub3RhdGlvbnMubGVuZ3RoID09PSAwID8gZm9jdXNEZWNvcmF0b3JzIDogW10sXG4gICAgICAgIGxpc3RJdGVtOiBmb2N1c0Jsb2NrLmxpc3RJdGVtLFxuICAgICAgICBsZXZlbDogZm9jdXNCbG9jay5sZXZlbFxuICAgICAgfSkpO1xuICAgICAgY29uc3QgW25leHRCbG9ja1BhdGhdID0gUGF0aC5uZXh0KGZvY3VzQmxvY2tQYXRoKTtcbiAgICAgIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwge1xuICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICBwYXRoOiBbbmV4dEJsb2NrUGF0aCwgMF0sXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgcGF0aDogW25leHRCbG9ja1BhdGgsIDBdLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0aW9uQWNyb3NzQmxvY2tzID0gYW5jaG9yQmxvY2tQYXRoWzBdICE9PSBmb2N1c0Jsb2NrUGF0aFswXTtcbiAgICBpZiAoIWF0VGhlU3RhcnRPZkJsb2NrICYmICFhdFRoZUVuZE9mQmxvY2sgJiYgIXNlbGVjdGlvbkFjcm9zc0Jsb2Nrcykge1xuICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgVHJhbnNmb3Jtcy5zcGxpdE5vZGVzKGVkaXRvciwge1xuICAgICAgICAgIGF0OiBlZGl0b3Iuc2VsZWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBbbmV4dE5vZGUsIG5leHROb2RlUGF0aF0gPSBFZGl0b3Iubm9kZShlZGl0b3IsIFBhdGgubmV4dChmb2N1c0Jsb2NrUGF0aCksIHtcbiAgICAgICAgICBkZXB0aDogMVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKFRyYW5zZm9ybXMuc2V0U2VsZWN0aW9uKGVkaXRvciwge1xuICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgcGF0aDogWy4uLm5leHROb2RlUGF0aCwgMF0sXG4gICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZvY3VzOiB7XG4gICAgICAgICAgICBwYXRoOiBbLi4ubmV4dE5vZGVQYXRoLCAwXSxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSksIGVkaXRvci5pc1RleHRCbG9jayhuZXh0Tm9kZSkgJiYgbmV4dE5vZGUubWFya0RlZnMgJiYgbmV4dE5vZGUubWFya0RlZnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IG5ld01hcmtEZWZLZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgcHJldk5vZGVTcGFucyA9IEFycmF5LmZyb20oTm9kZS5jaGlsZHJlbihlZGl0b3IsIGZvY3VzQmxvY2tQYXRoKSkubWFwKChlbnRyeSkgPT4gZW50cnlbMF0pLmZpbHRlcigobm9kZSkgPT4gZWRpdG9yLmlzVGV4dFNwYW4obm9kZSkpLCBjaGlsZHJlbiA9IE5vZGUuY2hpbGRyZW4oZWRpdG9yLCBuZXh0Tm9kZVBhdGgpO1xuICAgICAgICAgIGZvciAoY29uc3QgW2NoaWxkLCBjaGlsZFBhdGhdIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoIWVkaXRvci5pc1RleHRTcGFuKGNoaWxkKSlcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBtYXJrcyA9IGNoaWxkLm1hcmtzID8/IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBtYXJrIG9mIG1hcmtzKVxuICAgICAgICAgICAgICBzY2hlbWEuZGVjb3JhdG9ycy5zb21lKChkZWNvcmF0b3IpID0+IGRlY29yYXRvci52YWx1ZSA9PT0gbWFyaykgfHwgcHJldk5vZGVTcGFucy5zb21lKChwcmV2Tm9kZVNwYW4pID0+IHByZXZOb2RlU3Bhbi5tYXJrcz8uaW5jbHVkZXMobWFyaykpICYmICFuZXdNYXJrRGVmS2V5cy5oYXMobWFyaykgJiYgbmV3TWFya0RlZktleXMuc2V0KG1hcmssIGtleUdlbmVyYXRvcigpKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld01hcmtzID0gbWFya3MubWFwKChtYXJrKSA9PiBuZXdNYXJrRGVmS2V5cy5nZXQobWFyaykgPz8gbWFyayk7XG4gICAgICAgICAgICBpc0VxdWFsKG1hcmtzLCBuZXdNYXJrcykgfHwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgbWFya3M6IG5ld01hcmtzXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGF0OiBjaGlsZFBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBuZXdNYXJrRGVmcyA9IG5leHROb2RlLm1hcmtEZWZzLm1hcCgobWFya0RlZikgPT4gKHtcbiAgICAgICAgICAgIC4uLm1hcmtEZWYsXG4gICAgICAgICAgICBfa2V5OiBuZXdNYXJrRGVmS2V5cy5nZXQobWFya0RlZi5fa2V5KSA/PyBtYXJrRGVmLl9rZXlcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgaXNFcXVhbChuZXh0Tm9kZS5tYXJrRGVmcywgbmV3TWFya0RlZnMpIHx8IFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICBtYXJrRGVmczogbmV3TWFya0RlZnNcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBhdDogbmV4dE5vZGVQYXRoLFxuICAgICAgICAgICAgbWF0Y2g6IChub2RlKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSksIGVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBUcmFuc2Zvcm1zLnNwbGl0Tm9kZXMoZWRpdG9yLCB7XG4gICAgYWx3YXlzOiAhMFxuICB9KTtcbn0sIGluc2VydFNvZnRCcmVha0FjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGluc2VydEJyZWFrQWN0aW9uSW1wbGVtZW50YXRpb24oe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uOiB7XG4gICAgICAuLi5hY3Rpb24sXG4gICAgICB0eXBlOiBcImluc2VydC5icmVha1wiXG4gICAgfVxuICB9KTtcbn0sIGluc2VydElubGluZU9iamVjdEFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgY29udGV4dCxcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGlmICghY29udGV4dC5zY2hlbWEuaW5saW5lT2JqZWN0cy5zb21lKChpbmxpbmVPYmplY3QpID0+IGlubGluZU9iamVjdC5uYW1lID09PSBhY3Rpb24uaW5saW5lT2JqZWN0Lm5hbWUpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBpbnNlcnQgdW5rbm93biBpbmxpbmUgb2JqZWN0XCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBpbnNlcnQgaW5saW5lIG9iamVjdCB3aXRob3V0IHNlbGVjdGlvblwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgW2ZvY3VzVGV4dEJsb2NrXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBhdDogYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aCxcbiAgICBtYXRjaDogKG5vZGUpID0+IGFjdGlvbi5lZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSkpLmF0KDApID8/IFt2b2lkIDAsIHZvaWQgMF07XG4gIGlmICghZm9jdXNUZXh0QmxvY2spIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHBlcmZvcm0gYWN0aW9uIHdpdGhvdXQgZm9jdXMgdGV4dCBibG9ja1wiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgY2hpbGQgPSB0b1NsYXRlVmFsdWUoW3tcbiAgICBfdHlwZTogY29udGV4dC5zY2hlbWEuYmxvY2submFtZSxcbiAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIGNoaWxkcmVuOiBbe1xuICAgICAgX3R5cGU6IGFjdGlvbi5pbmxpbmVPYmplY3QubmFtZSxcbiAgICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAuLi5hY3Rpb24uaW5saW5lT2JqZWN0LnZhbHVlID8/IHt9XG4gICAgfV1cbiAgfV0sIHtcbiAgICBzY2hlbWFUeXBlczogY29udGV4dC5zY2hlbWFcbiAgfSkuYXQoMCk/LmNoaWxkcmVuLmF0KDApO1xuICBpZiAoIWNoaWxkKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBpbnNlcnQgaW5saW5lIG9iamVjdFwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhhY3Rpb24uZWRpdG9yLCBjaGlsZCk7XG59LCBpbnNlcnRTcGFuQWN0aW9uSW1wbGVtZW50YXRpb24gPSAoe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pID0+IHtcbiAgaWYgKCFhY3Rpb24uZWRpdG9yLnNlbGVjdGlvbikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gcGVyZm9ybSBhY3Rpb24gd2l0aG91dCBzZWxlY3Rpb25cIiwgYWN0aW9uKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgW2ZvY3VzQmxvY2ssIGZvY3VzQmxvY2tQYXRoXSA9IEFycmF5LmZyb20oRWRpdG9yLm5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICBhdDogYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aCxcbiAgICBtYXRjaDogKG5vZGUpID0+IGFjdGlvbi5lZGl0b3IuaXNUZXh0QmxvY2sobm9kZSlcbiAgfSkpWzBdID8/IFt2b2lkIDAsIHZvaWQgMF07XG4gIGlmICghZm9jdXNCbG9jayB8fCAhZm9jdXNCbG9ja1BhdGgpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHBlcmZvcm0gYWN0aW9uIHdpdGhvdXQgZm9jdXMgYmxvY2tcIiwgYWN0aW9uKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbWFya0RlZnMgPSBmb2N1c0Jsb2NrLm1hcmtEZWZzID8/IFtdLCBhbm5vdGF0aW9ucyA9IGFjdGlvbi5hbm5vdGF0aW9ucyA/IGFjdGlvbi5hbm5vdGF0aW9ucy5tYXAoKGFubm90YXRpb24pID0+ICh7XG4gICAgX3R5cGU6IGFubm90YXRpb24ubmFtZSxcbiAgICBfa2V5OiBjb250ZXh0LmtleUdlbmVyYXRvcigpLFxuICAgIC4uLmFubm90YXRpb24udmFsdWVcbiAgfSkpIDogdm9pZCAwO1xuICBhbm5vdGF0aW9ucyAmJiBhbm5vdGF0aW9ucy5sZW5ndGggPiAwICYmIFRyYW5zZm9ybXMuc2V0Tm9kZXMoYWN0aW9uLmVkaXRvciwge1xuICAgIG1hcmtEZWZzOiBbLi4ubWFya0RlZnMsIC4uLmFubm90YXRpb25zXVxuICB9KSwgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgX3R5cGU6IFwic3BhblwiLFxuICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgdGV4dDogYWN0aW9uLnRleHQsXG4gICAgbWFya3M6IFsuLi5hbm5vdGF0aW9ucz8ubWFwKChhbm5vdGF0aW9uKSA9PiBhbm5vdGF0aW9uLl9rZXkpID8/IFtdLCAuLi5hY3Rpb24uZGVjb3JhdG9ycyA/PyBbXV1cbiAgfSk7XG59LCB0ZXh0QmxvY2tTZXRBY3Rpb25JbXBsZW1lbnRhdGlvbiA9ICh7XG4gIGFjdGlvblxufSkgPT4ge1xuICBjb25zdCBhdCA9IHRvU2xhdGVSYW5nZSh7XG4gICAgYW5jaG9yOiB7XG4gICAgICBwYXRoOiBhY3Rpb24uYXQsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9LFxuICAgIGZvY3VzOiB7XG4gICAgICBwYXRoOiBhY3Rpb24uYXQsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9XG4gIH0sIGFjdGlvbi5lZGl0b3IpO1xuICBUcmFuc2Zvcm1zLnNldE5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICAuLi5hY3Rpb24uc3R5bGUgPyB7XG4gICAgICBzdHlsZTogYWN0aW9uLnN0eWxlXG4gICAgfSA6IHt9LFxuICAgIC4uLmFjdGlvbi5saXN0SXRlbSA/IHtcbiAgICAgIGxpc3RJdGVtOiBhY3Rpb24ubGlzdEl0ZW1cbiAgICB9IDoge30sXG4gICAgLi4uYWN0aW9uLmxldmVsID8ge1xuICAgICAgbGV2ZWw6IGFjdGlvbi5sZXZlbFxuICAgIH0gOiB7fVxuICB9LCB7XG4gICAgYXRcbiAgfSk7XG59LCB0ZXh0QmxvY2tVbnNldEFjdGlvbkltcGxlbWVudGF0aW9uID0gKHtcbiAgYWN0aW9uXG59KSA9PiB7XG4gIGNvbnN0IGF0ID0gdG9TbGF0ZVJhbmdlKHtcbiAgICBhbmNob3I6IHtcbiAgICAgIHBhdGg6IGFjdGlvbi5hdCxcbiAgICAgIG9mZnNldDogMFxuICAgIH0sXG4gICAgZm9jdXM6IHtcbiAgICAgIHBhdGg6IGFjdGlvbi5hdCxcbiAgICAgIG9mZnNldDogMFxuICAgIH1cbiAgfSwgYWN0aW9uLmVkaXRvcik7XG4gIFRyYW5zZm9ybXMudW5zZXROb2RlcyhhY3Rpb24uZWRpdG9yLCBhY3Rpb24ucHJvcHMsIHtcbiAgICBhdFxuICB9KTtcbn0sIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zID0ge1xuICBcImFubm90YXRpb24uYWRkXCI6IGFkZEFubm90YXRpb25BY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJhbm5vdGF0aW9uLnJlbW92ZVwiOiByZW1vdmVBbm5vdGF0aW9uQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiYW5ub3RhdGlvbi50b2dnbGVcIjogdG9nZ2xlQW5ub3RhdGlvbkFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBibHVyOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgUmVhY3RFZGl0b3IuYmx1cihhY3Rpb24uZWRpdG9yKTtcbiAgfSxcbiAgXCJkZWNvcmF0b3IuYWRkXCI6IGFkZERlY29yYXRvckFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImRlY29yYXRvci5yZW1vdmVcIjogcmVtb3ZlRGVjb3JhdG9yQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiZGVjb3JhdG9yLnRvZ2dsZVwiOiB0b2dnbGVEZWNvcmF0b3JBY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgZm9jdXM6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhhY3Rpb24uZWRpdG9yKTtcbiAgfSxcbiAgXCJkZWxldGUuYmFja3dhcmRcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGRlbGV0ZUJhY2t3YXJkKGFjdGlvbi5lZGl0b3IsIGFjdGlvbi51bml0KTtcbiAgfSxcbiAgXCJkZWxldGUuZm9yd2FyZFwiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgZGVsZXRlRm9yd2FyZChhY3Rpb24uZWRpdG9yLCBhY3Rpb24udW5pdCk7XG4gIH0sXG4gIFwiZGVsZXRlLmJsb2NrXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zdCByYW5nZSA9IHRvU2xhdGVSYW5nZSh7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aDogYWN0aW9uLmJsb2NrUGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9LFxuICAgICAgZm9jdXM6IHtcbiAgICAgICAgcGF0aDogYWN0aW9uLmJsb2NrUGF0aCxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgICB9XG4gICAgfSwgYWN0aW9uLmVkaXRvcik7XG4gICAgaWYgKCFyYW5nZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIFNsYXRlIHJhbmdlIGZyb20gc2VsZWN0aW9uIHBvaW50c1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBhdDogcmFuZ2VcbiAgICB9KTtcbiAgfSxcbiAgXCJkZWxldGUudGV4dFwiOiAoe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGZyb21TbGF0ZVZhbHVlKGFjdGlvbi5lZGl0b3IuY2hpbGRyZW4sIGNvbnRleHQuc2NoZW1hLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChhY3Rpb24uZWRpdG9yKSksIGFuY2hvciA9IGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgICAgdmFsdWUsXG4gICAgICBibG9ja09mZnNldDogYWN0aW9uLmFuY2hvclxuICAgIH0pLCBmb2N1cyA9IGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgICAgdmFsdWUsXG4gICAgICBibG9ja09mZnNldDogYWN0aW9uLmZvY3VzXG4gICAgfSk7XG4gICAgaWYgKCFhbmNob3IgfHwgIWZvY3VzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGZpbmQgYW5jaG9yIG9yIGZvY3VzIHNlbGVjdGlvbiBwb2ludFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSB0b1NsYXRlUmFuZ2Uoe1xuICAgICAgYW5jaG9yLFxuICAgICAgZm9jdXNcbiAgICB9LCBhY3Rpb24uZWRpdG9yKTtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGZpbmQgU2xhdGUgcmFuZ2UgZnJvbSBzZWxlY3Rpb24gcG9pbnRzXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBUcmFuc2Zvcm1zLmRlbGV0ZShhY3Rpb24uZWRpdG9yLCB7XG4gICAgICBhdDogcmFuZ2VcbiAgICB9KTtcbiAgfSxcbiAgXCJpbnNlcnQuYmxvY2sgb2JqZWN0XCI6IGluc2VydEJsb2NrT2JqZWN0QWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiaW5zZXJ0LmJyZWFrXCI6IGluc2VydEJyZWFrQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiaW5zZXJ0LmlubGluZSBvYmplY3RcIjogaW5zZXJ0SW5saW5lT2JqZWN0QWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiaW5zZXJ0LnNvZnQgYnJlYWtcIjogaW5zZXJ0U29mdEJyZWFrQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwiaW5zZXJ0LnNwYW5cIjogaW5zZXJ0U3BhbkFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImluc2VydC50ZXh0XCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBpbnNlcnRUZXh0KGFjdGlvbi5lZGl0b3IsIGFjdGlvbi50ZXh0KTtcbiAgfSxcbiAgXCJpbnNlcnQudGV4dCBibG9ja1wiOiAoe1xuICAgIGNvbnRleHQsXG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBjb25zdCBibG9jayA9IHRvU2xhdGVWYWx1ZShbe1xuICAgICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKSxcbiAgICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lLFxuICAgICAgc3R5bGU6IGNvbnRleHQuc2NoZW1hLnN0eWxlc1swXS52YWx1ZSA/PyBcIm5vcm1hbFwiLFxuICAgICAgbWFya0RlZnM6IFtdLFxuICAgICAgY2hpbGRyZW46IGFjdGlvbi50ZXh0QmxvY2s/LmNoaWxkcmVuPy5tYXAoKGNoaWxkKSA9PiAoe1xuICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgX2tleTogY29udGV4dC5rZXlHZW5lcmF0b3IoKVxuICAgICAgfSkpID8/IFt7XG4gICAgICAgIF90eXBlOiBjb250ZXh0LnNjaGVtYS5zcGFuLm5hbWUsXG4gICAgICAgIF9rZXk6IGNvbnRleHQua2V5R2VuZXJhdG9yKCksXG4gICAgICAgIHRleHQ6IFwiXCJcbiAgICAgIH1dXG4gICAgfV0sIHtcbiAgICAgIHNjaGVtYVR5cGVzOiBjb250ZXh0LnNjaGVtYVxuICAgIH0pWzBdO1xuICAgIGluc2VydEJsb2NrKHtcbiAgICAgIGJsb2NrLFxuICAgICAgZWRpdG9yOiBhY3Rpb24uZWRpdG9yLFxuICAgICAgc2NoZW1hOiBjb250ZXh0LnNjaGVtYSxcbiAgICAgIHBsYWNlbWVudDogYWN0aW9uLnBsYWNlbWVudFxuICAgIH0pO1xuICB9LFxuICBlZmZlY3Q6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBhY3Rpb24uZWZmZWN0KCk7XG4gIH0sXG4gIFwibGlzdCBpdGVtLmFkZFwiOiBhZGRMaXN0SXRlbUFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcImxpc3QgaXRlbS5yZW1vdmVcIjogcmVtb3ZlTGlzdEl0ZW1BY3Rpb25JbXBsZW1lbnRhdGlvbixcbiAgXCJsaXN0IGl0ZW0udG9nZ2xlXCI6IHRvZ2dsZUxpc3RJdGVtQWN0aW9uSW1wbGVtZW50YXRpb24sXG4gIFwibW92ZS5ibG9ja1wiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgYXQgPSBbdG9TbGF0ZVBhdGgoYWN0aW9uLmF0LCBhY3Rpb24uZWRpdG9yKVswXV0sIHRvID0gW3RvU2xhdGVQYXRoKGFjdGlvbi50bywgYWN0aW9uLmVkaXRvcilbMF1dO1xuICAgIFRyYW5zZm9ybXMubW92ZU5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICAgIGF0LFxuICAgICAgdG8sXG4gICAgICBtb2RlOiBcImhpZ2hlc3RcIlxuICAgIH0pO1xuICB9LFxuICBcIm1vdmUuYmxvY2sgZG93blwiOiAoe1xuICAgIGFjdGlvblxuICB9KSA9PiB7XG4gICAgY29uc3QgYXQgPSBbdG9TbGF0ZVBhdGgoYWN0aW9uLmF0LCBhY3Rpb24uZWRpdG9yKVswXV0sIHRvID0gW1BhdGgubmV4dChhdClbMF1dO1xuICAgIFRyYW5zZm9ybXMubW92ZU5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICAgIGF0LFxuICAgICAgdG8sXG4gICAgICBtb2RlOiBcImhpZ2hlc3RcIlxuICAgIH0pO1xuICB9LFxuICBcIm1vdmUuYmxvY2sgdXBcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGNvbnN0IGF0ID0gW3RvU2xhdGVQYXRoKGFjdGlvbi5hdCwgYWN0aW9uLmVkaXRvcilbMF1dO1xuICAgIGlmICghUGF0aC5oYXNQcmV2aW91cyhhdCkpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgdG8gPSBbUGF0aC5wcmV2aW91cyhhdClbMF1dO1xuICAgIFRyYW5zZm9ybXMubW92ZU5vZGVzKGFjdGlvbi5lZGl0b3IsIHtcbiAgICAgIGF0LFxuICAgICAgdG8sXG4gICAgICBtb2RlOiBcImhpZ2hlc3RcIlxuICAgIH0pO1xuICB9LFxuICBub29wOiAoKSA9PiB7XG4gIH0sXG4gIHNlbGVjdDogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGNvbnN0IG5ld1NlbGVjdGlvbiA9IHRvU2xhdGVSYW5nZShhY3Rpb24uc2VsZWN0aW9uLCBhY3Rpb24uZWRpdG9yKTtcbiAgICBuZXdTZWxlY3Rpb24gPyBUcmFuc2Zvcm1zLnNlbGVjdChhY3Rpb24uZWRpdG9yLCBuZXdTZWxlY3Rpb24pIDogVHJhbnNmb3Jtcy5kZXNlbGVjdChhY3Rpb24uZWRpdG9yKTtcbiAgfSxcbiAgXCJzZWxlY3QucHJldmlvdXMgYmxvY2tcIjogKHtcbiAgICBhY3Rpb25cbiAgfSkgPT4ge1xuICAgIGlmICghYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gc2VsZWN0IHByZXZpb3VzIGJsb2NrIHdpdGhvdXQgYSBzZWxlY3Rpb25cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGJsb2NrUGF0aCA9IGFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSk7XG4gICAgaWYgKCFQYXRoLmhhc1ByZXZpb3VzKGJsb2NrUGF0aCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSdzIG5vIHByZXZpb3VzIGJsb2NrIHRvIHNlbGVjdFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJldmlvdXNCbG9ja1BhdGggPSBQYXRoLnByZXZpb3VzKGJsb2NrUGF0aCk7XG4gICAgVHJhbnNmb3Jtcy5zZWxlY3QoYWN0aW9uLmVkaXRvciwgcHJldmlvdXNCbG9ja1BhdGgpO1xuICB9LFxuICBcInNlbGVjdC5uZXh0IGJsb2NrXCI6ICh7XG4gICAgYWN0aW9uXG4gIH0pID0+IHtcbiAgICBpZiAoIWFjdGlvbi5lZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHNlbGVjdCBuZXh0IGJsb2NrIHdpdGhvdXQgYSBzZWxlY3Rpb25cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5leHRCbG9ja1BhdGggPSBbYWN0aW9uLmVkaXRvci5zZWxlY3Rpb24uZm9jdXMucGF0aC5zbGljZSgwLCAxKVswXSArIDFdO1xuICAgIFRyYW5zZm9ybXMuc2VsZWN0KGFjdGlvbi5lZGl0b3IsIG5leHRCbG9ja1BhdGgpO1xuICB9LFxuICBcInN0eWxlLnRvZ2dsZVwiOiB0b2dnbGVTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcInN0eWxlLmFkZFwiOiBhZGRTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcInN0eWxlLnJlbW92ZVwiOiByZW1vdmVTdHlsZUFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcInRleHQgYmxvY2suc2V0XCI6IHRleHRCbG9ja1NldEFjdGlvbkltcGxlbWVudGF0aW9uLFxuICBcInRleHQgYmxvY2sudW5zZXRcIjogdGV4dEJsb2NrVW5zZXRBY3Rpb25JbXBsZW1lbnRhdGlvblxufTtcbmZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJhbm5vdGF0aW9uLnRvZ2dsZVwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImFubm90YXRpb24udG9nZ2xlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVjb3JhdG9yLmFkZFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRlY29yYXRvci5hZGRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJkZWNvcmF0b3IucmVtb3ZlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVjb3JhdG9yLnJlbW92ZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlbGV0ZS5ibG9ja1wiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImRlbGV0ZS5ibG9ja1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlbGV0ZS50ZXh0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVsZXRlLnRleHRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnQuc3BhblwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC5zcGFuXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LnRleHQgYmxvY2tcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQudGV4dCBibG9ja1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImxpc3QgaXRlbS5hZGRcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJsaXN0IGl0ZW0uYWRkXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwibGlzdCBpdGVtLnJlbW92ZVwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImxpc3QgaXRlbS5yZW1vdmVcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJtb3ZlLmJsb2NrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wibW92ZS5ibG9ja1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcIm1vdmUuYmxvY2sgZG93blwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcIm1vdmUuYmxvY2sgZG93blwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcIm1vdmUuYmxvY2sgdXBcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJtb3ZlLmJsb2NrIHVwXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwibm9vcFwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImVmZmVjdFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9ucy5lZmZlY3Qoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzZWxlY3RcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnMuc2VsZWN0KHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic2VsZWN0LnByZXZpb3VzIGJsb2NrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wic2VsZWN0LnByZXZpb3VzIGJsb2NrXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic2VsZWN0Lm5leHQgYmxvY2tcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJzZWxlY3QubmV4dCBibG9ja1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInN0eWxlLmFkZFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcInN0eWxlLmFkZFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInN0eWxlLnJlbW92ZVwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcInN0eWxlLnJlbW92ZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInRleHQgYmxvY2suc2V0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1widGV4dCBibG9jay5zZXRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJ0ZXh0IGJsb2NrLnVuc2V0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1widGV4dCBibG9jay51bnNldFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHBlcmZvcm1EZWZhdWx0QWN0aW9uKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gcGVyZm9ybURlZmF1bHRBY3Rpb24oe1xuICBjb250ZXh0LFxuICBhY3Rpb25cbn0pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJhbm5vdGF0aW9uLmFkZFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImFubm90YXRpb24uYWRkXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiYW5ub3RhdGlvbi5yZW1vdmVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJhbm5vdGF0aW9uLnJlbW92ZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImJsdXJcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnMuYmx1cih7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImRlY29yYXRvci50b2dnbGVcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJkZWNvcmF0b3IudG9nZ2xlXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVsZXRlLmJhY2t3YXJkXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiZGVsZXRlLmJhY2t3YXJkXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGVsZXRlLmZvcndhcmRcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJkZWxldGUuZm9yd2FyZFwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZvY3VzXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zLmZvY3VzKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LmJsb2NrIG9iamVjdFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC5ibG9jayBvYmplY3RcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJpbnNlcnQuaW5saW5lIG9iamVjdFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcImluc2VydC5pbmxpbmUgb2JqZWN0XCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LmJyZWFrXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LmJyZWFrXCJdKHtcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgYWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiaW5zZXJ0LnNvZnQgYnJlYWtcIjoge1xuICAgICAgYmVoYXZpb3JBY3Rpb25JbXBsZW1lbnRhdGlvbnNbXCJpbnNlcnQuc29mdCBicmVha1wiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImluc2VydC50ZXh0XCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wiaW5zZXJ0LnRleHRcIl0oe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJsaXN0IGl0ZW0udG9nZ2xlXCI6IHtcbiAgICAgIGJlaGF2aW9yQWN0aW9uSW1wbGVtZW50YXRpb25zW1wibGlzdCBpdGVtLnRvZ2dsZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcInNlbGVjdFwiOiB7XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9ucy5zZWxlY3Qoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBiZWhhdmlvckFjdGlvbkltcGxlbWVudGF0aW9uc1tcInN0eWxlLnRvZ2dsZVwiXSh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGFjdGlvblxuICAgICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZURlY29yYXRvcnMoe1xuICBzY2hlbWEsXG4gIHNsYXRlRWRpdG9ySW5zdGFuY2Vcbn0pIHtcbiAgY29uc3QgZGVjb3JhdG9ycyA9IHNjaGVtYS5kZWNvcmF0b3JzLm1hcCgoZGVjb3JhdG9yKSA9PiBkZWNvcmF0b3IudmFsdWUpO1xuICByZXR1cm4gKHtcbiAgICAuLi5FZGl0b3IubWFya3Moc2xhdGVFZGl0b3JJbnN0YW5jZSkgPz8ge31cbiAgfS5tYXJrcyA/PyBbXSkuZmlsdGVyKChtYXJrKSA9PiBkZWNvcmF0b3JzLmluY2x1ZGVzKG1hcmspKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVkaXRvclNuYXBzaG90KHtcbiAgZWRpdG9yLFxuICBrZXlHZW5lcmF0b3IsXG4gIHNjaGVtYVxufSkge1xuICBjb25zdCB2YWx1ZSA9IGZyb21TbGF0ZVZhbHVlKGVkaXRvci5jaGlsZHJlbiwgc2NoZW1hLmJsb2NrLm5hbWUsIEtFWV9UT19WQUxVRV9FTEVNRU5ULmdldChlZGl0b3IpKSwgc2VsZWN0aW9uID0gdG9Qb3J0YWJsZVRleHRSYW5nZSh2YWx1ZSwgZWRpdG9yLnNlbGVjdGlvbiwgc2NoZW1hKTtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0OiB7XG4gICAgICBhY3RpdmVEZWNvcmF0b3JzOiBnZXRBY3RpdmVEZWNvcmF0b3JzKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBlZGl0b3JcbiAgICAgIH0pLFxuICAgICAga2V5R2VuZXJhdG9yLFxuICAgICAgc2NoZW1hLFxuICAgICAgc2VsZWN0aW9uLFxuICAgICAgdmFsdWVcbiAgICB9XG4gIH07XG59XG5jb25zdCBlZGl0b3JNYWNoaW5lID0gc2V0dXAoe1xuICB0eXBlczoge1xuICAgIGNvbnRleHQ6IHt9LFxuICAgIGV2ZW50czoge30sXG4gICAgZW1pdHRlZDoge30sXG4gICAgaW5wdXQ6IHt9XG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBcImFkZCBiZWhhdmlvciB0byBjb250ZXh0XCI6IGFzc2lnbih7XG4gICAgICBiZWhhdmlvcnM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwiYWRkIGJlaGF2aW9yXCIpLCAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4uY29udGV4dC5iZWhhdmlvcnMsIGV2ZW50LmJlaGF2aW9yXSkpXG4gICAgfSksXG4gICAgXCJyZW1vdmUgYmVoYXZpb3IgZnJvbSBjb250ZXh0XCI6IGFzc2lnbih7XG4gICAgICBiZWhhdmlvcnM6ICh7XG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwicmVtb3ZlIGJlaGF2aW9yXCIpLCBjb250ZXh0LmJlaGF2aW9ycy5kZWxldGUoZXZlbnQuYmVoYXZpb3IpLCAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4uY29udGV4dC5iZWhhdmlvcnNdKSlcbiAgICB9KSxcbiAgICBcImFzc2lnbiBiZWhhdmlvcnNcIjogYXNzaWduKHtcbiAgICAgIGJlaGF2aW9yczogKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJ1cGRhdGUgYmVoYXZpb3JzXCIpLCBuZXcgU2V0KGV2ZW50LmJlaGF2aW9ycykpXG4gICAgfSksXG4gICAgXCJhc3NpZ24gc2NoZW1hXCI6IGFzc2lnbih7XG4gICAgICBzY2hlbWE6ICh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwidXBkYXRlIHNjaGVtYVwiKSwgZXZlbnQuc2NoZW1hKVxuICAgIH0pLFxuICAgIFwiZW1pdCBwYXRjaCBldmVudFwiOiBlbWl0KCh7XG4gICAgICBldmVudFxuICAgIH0pID0+IChhc3NlcnRFdmVudChldmVudCwgXCJwYXRjaFwiKSwgZXZlbnQpKSxcbiAgICBcImVtaXQgbXV0YXRpb24gZXZlbnRcIjogZW1pdCgoe1xuICAgICAgZXZlbnRcbiAgICB9KSA9PiAoYXNzZXJ0RXZlbnQoZXZlbnQsIFwibXV0YXRpb25cIiksIGV2ZW50KSksXG4gICAgXCJlbWl0IHJlYWQgb25seVwiOiBlbWl0KHtcbiAgICAgIHR5cGU6IFwicmVhZCBvbmx5XCJcbiAgICB9KSxcbiAgICBcImVtaXQgZWRpdGFibGVcIjogZW1pdCh7XG4gICAgICB0eXBlOiBcImVkaXRhYmxlXCJcbiAgICB9KSxcbiAgICBcImRlZmVyIGV2ZW50XCI6IGFzc2lnbih7XG4gICAgICBwZW5kaW5nRXZlbnRzOiAoe1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gKGFzc2VydEV2ZW50KGV2ZW50LCBbXCJwYXRjaFwiLCBcIm11dGF0aW9uXCJdKSwgWy4uLmNvbnRleHQucGVuZGluZ0V2ZW50cywgZXZlbnRdKVxuICAgIH0pLFxuICAgIFwiZW1pdCBwZW5kaW5nIGV2ZW50c1wiOiBlbnF1ZXVlQWN0aW9ucygoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGVucXVldWVcbiAgICB9KSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGNvbnRleHQucGVuZGluZ0V2ZW50cylcbiAgICAgICAgZW5xdWV1ZShlbWl0KGV2ZW50KSk7XG4gICAgfSksXG4gICAgXCJlbWl0IHJlYWR5XCI6IGVtaXQoe1xuICAgICAgdHlwZTogXCJyZWFkeVwiXG4gICAgfSksXG4gICAgXCJjbGVhciBwZW5kaW5nIGV2ZW50c1wiOiBhc3NpZ24oe1xuICAgICAgcGVuZGluZ0V2ZW50czogW11cbiAgICB9KSxcbiAgICBcImhhbmRsZSBiZWhhdmlvciBldmVudFwiOiBlbnF1ZXVlQWN0aW9ucygoe1xuICAgICAgY29udGV4dCxcbiAgICAgIGV2ZW50LFxuICAgICAgZW5xdWV1ZVxuICAgIH0pID0+IHtcbiAgICAgIGFzc2VydEV2ZW50KGV2ZW50LCBbXCJiZWhhdmlvciBldmVudFwiLCBcImN1c3RvbSBiZWhhdmlvciBldmVudFwiXSk7XG4gICAgICBjb25zdCBkZWZhdWx0QWN0aW9uID0gZXZlbnQudHlwZSA9PT0gXCJjdXN0b20gYmVoYXZpb3IgZXZlbnRcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwiY29weVwiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJrZXkuZG93blwiIHx8IGV2ZW50LmJlaGF2aW9yRXZlbnQudHlwZSA9PT0gXCJrZXkudXBcIiB8fCBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUgPT09IFwicGFzdGVcIiA/IHZvaWQgMCA6IHtcbiAgICAgICAgLi4uZXZlbnQuYmVoYXZpb3JFdmVudCxcbiAgICAgICAgZWRpdG9yOiBldmVudC5lZGl0b3JcbiAgICAgIH0sIGRlZmF1bHRBY3Rpb25DYWxsYmFjayA9IGV2ZW50LnR5cGUgPT09IFwiYmVoYXZpb3IgZXZlbnRcIiA/IGV2ZW50LmRlZmF1bHRBY3Rpb25DYWxsYmFjayA6IHZvaWQgMCwgZXZlbnRCZWhhdmlvcnMgPSBbLi4uY29udGV4dC5iZWhhdmlvcnMudmFsdWVzKCldLmZpbHRlcigoYmVoYXZpb3IpID0+IGJlaGF2aW9yLm9uID09PSBldmVudC5iZWhhdmlvckV2ZW50LnR5cGUpO1xuICAgICAgaWYgKGV2ZW50QmVoYXZpb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoZGVmYXVsdEFjdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgd2l0aEFwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWN0aW9uQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihgUGVyZm9ybWluZyBhY3Rpb24gXCIke2V2ZW50LmJlaGF2aW9yRXZlbnQudHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWZhdWx0QWN0aW9uKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgd2l0aEFwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwZXJmb3JtQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGFjdGlvbjogZGVmYXVsdEFjdGlvblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBQZXJmb3JtaW5nIGFjdGlvbiBcIiR7ZGVmYXVsdEFjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBlZGl0b3JTbmFwc2hvdCA9IGNyZWF0ZUVkaXRvclNuYXBzaG90KHtcbiAgICAgICAgZWRpdG9yOiBldmVudC5lZGl0b3IsXG4gICAgICAgIGtleUdlbmVyYXRvcjogY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICAgIHNjaGVtYTogY29udGV4dC5zY2hlbWFcbiAgICAgIH0pO1xuICAgICAgbGV0IGJlaGF2aW9yT3ZlcndyaXR0ZW4gPSAhMTtcbiAgICAgIGZvciAoY29uc3QgZXZlbnRCZWhhdmlvciBvZiBldmVudEJlaGF2aW9ycykge1xuICAgICAgICBjb25zdCBzaG91bGRSdW4gPSBldmVudEJlaGF2aW9yLmd1YXJkID09PSB2b2lkIDAgfHwgZXZlbnRCZWhhdmlvci5ndWFyZCh7XG4gICAgICAgICAgY29udGV4dDogZWRpdG9yU25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICBldmVudDogZXZlbnQuYmVoYXZpb3JFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzaG91bGRSdW4pXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IGFjdGlvbkludGVuZFNldHMgPSBldmVudEJlaGF2aW9yLmFjdGlvbnMubWFwKChhY3Rpb25TZXQpID0+IGFjdGlvblNldCh7XG4gICAgICAgICAgY29udGV4dDogZWRpdG9yU25hcHNob3QuY29udGV4dCxcbiAgICAgICAgICBldmVudDogZXZlbnQuYmVoYXZpb3JFdmVudFxuICAgICAgICB9LCBzaG91bGRSdW4pKTtcbiAgICAgICAgZm9yIChjb25zdCBhY3Rpb25JbnRlbmRzIG9mIGFjdGlvbkludGVuZFNldHMpXG4gICAgICAgICAgYmVoYXZpb3JPdmVyd3JpdHRlbiA9IGJlaGF2aW9yT3ZlcndyaXR0ZW4gfHwgYWN0aW9uSW50ZW5kcy5sZW5ndGggPiAwICYmIGFjdGlvbkludGVuZHMuc29tZSgoYWN0aW9uSW50ZW5kKSA9PiBhY3Rpb25JbnRlbmQudHlwZSAhPT0gXCJlZmZlY3RcIiksIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAoY29uc3QgYWN0aW9uSW50ZW5kIG9mIGFjdGlvbkludGVuZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uSW50ZW5kLnR5cGUgPT09IFwicmFpc2VcIikge1xuICAgICAgICAgICAgICAgICAgaXNDdXN0b21CZWhhdmlvckV2ZW50KGFjdGlvbkludGVuZC5ldmVudCkgPyBlbnF1ZXVlLnJhaXNlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20gYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JFdmVudDogYWN0aW9uSW50ZW5kLmV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgICAgICAgICAgICAgfSkgOiBlbnF1ZXVlLnJhaXNlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJiZWhhdmlvciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvckV2ZW50OiBhY3Rpb25JbnRlbmQuZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcjogZXZlbnQuZWRpdG9yXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAuLi5hY3Rpb25JbnRlbmQsXG4gICAgICAgICAgICAgICAgICBlZGl0b3I6IGV2ZW50LmVkaXRvclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHBlcmZvcm1BY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihgUGVyZm9ybWluZyBhY3Rpb24gXCIke2FjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgICBpZiAoYmVoYXZpb3JPdmVyd3JpdHRlbikge1xuICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50Py5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWJlaGF2aW9yT3ZlcndyaXR0ZW4pIHtcbiAgICAgICAgaWYgKGRlZmF1bHRBY3Rpb25DYWxsYmFjaykge1xuICAgICAgICAgIHdpdGhBcHBseWluZ0JlaGF2aW9yQWN0aW9ucyhldmVudC5lZGl0b3IsICgpID0+IHtcbiAgICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdEFjdGlvbkNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoYFBlcmZvcm1pbmcgXCIke2V2ZW50LmJlaGF2aW9yRXZlbnQudHlwZX1cIiBmYWlsZWQgZHVlIHRvOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWZhdWx0QWN0aW9uKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgd2l0aEFwcGx5aW5nQmVoYXZpb3JBY3Rpb25zKGV2ZW50LmVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgIEVkaXRvci53aXRob3V0Tm9ybWFsaXppbmcoZXZlbnQuZWRpdG9yLCAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwZXJmb3JtQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGFjdGlvbjogZGVmYXVsdEFjdGlvblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IEVycm9yKGBQZXJmb3JtaW5nIGFjdGlvbiBcIiR7ZGVmYXVsdEFjdGlvbi50eXBlfVwiIGFzIGEgcmVzdWx0IG9mIFwiJHtldmVudC5iZWhhdmlvckV2ZW50LnR5cGV9XCIgZmFpbGVkIGR1ZSB0bzogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksIGV2ZW50LmVkaXRvci5vbkNoYW5nZSgpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbn0pLmNyZWF0ZU1hY2hpbmUoe1xuICBpZDogXCJlZGl0b3JcIixcbiAgY29udGV4dDogKHtcbiAgICBpbnB1dFxuICB9KSA9PiAoe1xuICAgIGJlaGF2aW9yczogbmV3IFNldChpbnB1dC5iZWhhdmlvcnMgPz8gY29yZUJlaGF2aW9ycyksXG4gICAga2V5R2VuZXJhdG9yOiBpbnB1dC5rZXlHZW5lcmF0b3IsXG4gICAgcGVuZGluZ0V2ZW50czogW10sXG4gICAgc2NoZW1hOiBpbnB1dC5zY2hlbWEsXG4gICAgc2VsZWN0aW9uOiBudWxsLFxuICAgIGluaXRpYWxSZWFkT25seTogaW5wdXQucmVhZE9ubHkgPz8gITEsXG4gICAgbWF4QmxvY2tzOiBpbnB1dC5tYXhCbG9ja3MsXG4gICAgdmFsdWU6IGlucHV0LnZhbHVlXG4gIH0pLFxuICBvbjoge1xuICAgIFwiYWRkIGJlaGF2aW9yXCI6IHtcbiAgICAgIGFjdGlvbnM6IFwiYWRkIGJlaGF2aW9yIHRvIGNvbnRleHRcIlxuICAgIH0sXG4gICAgXCJyZW1vdmUgYmVoYXZpb3JcIjoge1xuICAgICAgYWN0aW9uczogXCJyZW1vdmUgYmVoYXZpb3IgZnJvbSBjb250ZXh0XCJcbiAgICB9LFxuICAgIHVuc2V0OiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIFwidmFsdWUgY2hhbmdlZFwiOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIFwiaW52YWxpZCB2YWx1ZVwiOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIGVycm9yOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIHNlbGVjdGlvbjoge1xuICAgICAgYWN0aW9uczogW2Fzc2lnbih7XG4gICAgICAgIHNlbGVjdGlvbjogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC5zZWxlY3Rpb25cbiAgICAgIH0pLCBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudCldXG4gICAgfSxcbiAgICBibHVycmVkOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgIGV2ZW50XG4gICAgICB9KSA9PiBldmVudClcbiAgICB9LFxuICAgIGZvY3VzZWQ6IHtcbiAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgZXZlbnRcbiAgICAgIH0pID0+IGV2ZW50KVxuICAgIH0sXG4gICAgbG9hZGluZzoge1xuICAgICAgYWN0aW9uczogZW1pdCh7XG4gICAgICAgIHR5cGU6IFwibG9hZGluZ1wiXG4gICAgICB9KVxuICAgIH0sXG4gICAgcGF0Y2hlczoge1xuICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICBldmVudFxuICAgICAgfSkgPT4gZXZlbnQpXG4gICAgfSxcbiAgICBcImRvbmUgbG9hZGluZ1wiOiB7XG4gICAgICBhY3Rpb25zOiBlbWl0KHtcbiAgICAgICAgdHlwZTogXCJkb25lIGxvYWRpbmdcIlxuICAgICAgfSlcbiAgICB9LFxuICAgIFwidXBkYXRlIGJlaGF2aW9yc1wiOiB7XG4gICAgICBhY3Rpb25zOiBcImFzc2lnbiBiZWhhdmlvcnNcIlxuICAgIH0sXG4gICAgXCJ1cGRhdGUgc2NoZW1hXCI6IHtcbiAgICAgIGFjdGlvbnM6IFwiYXNzaWduIHNjaGVtYVwiXG4gICAgfSxcbiAgICBcInVwZGF0ZSB2YWx1ZVwiOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICB2YWx1ZTogKHtcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KSA9PiBldmVudC52YWx1ZVxuICAgICAgfSlcbiAgICB9LFxuICAgIFwidXBkYXRlIG1heEJsb2Nrc1wiOiB7XG4gICAgICBhY3Rpb25zOiBhc3NpZ24oe1xuICAgICAgICBtYXhCbG9ja3M6ICh7XG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSkgPT4gZXZlbnQubWF4QmxvY2tzXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgdHlwZTogXCJwYXJhbGxlbFwiLFxuICBzdGF0ZXM6IHtcbiAgICBcImVkaXQgbW9kZVwiOiB7XG4gICAgICBpbml0aWFsOiBcInJlYWQgb25seVwiLFxuICAgICAgc3RhdGVzOiB7XG4gICAgICAgIFwicmVhZCBvbmx5XCI6IHtcbiAgICAgICAgICBpbml0aWFsOiBcImRldGVybWluZSBpbml0aWFsIGVkaXQgbW9kZVwiLFxuICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgXCJkZXRlcm1pbmUgaW5pdGlhbCBlZGl0IG1vZGVcIjoge1xuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIFwiZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIjogW3tcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5yZWFkIG9ubHkucmVhZCBvbmx5XCIsXG4gICAgICAgICAgICAgICAgICBndWFyZDogKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgICAgfSkgPT4gY29udGV4dC5pbml0aWFsUmVhZE9ubHlcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5lZGl0IG1vZGUuZWRpdGFibGVcIlxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlYWQgb25seVwiOiB7XG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgXCJ1cGRhdGUgcmVhZE9ubHlcIjoge1xuICAgICAgICAgICAgICAgICAgZ3VhcmQ6ICh7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgICAgICB9KSA9PiAhZXZlbnQucmVhZE9ubHksXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5lZGl0IG1vZGUuZWRpdGFibGVcIixcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFtcImVtaXQgZWRpdGFibGVcIl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRhYmxlOiB7XG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwidXBkYXRlIHJlYWRPbmx5XCI6IHtcbiAgICAgICAgICAgICAgZ3VhcmQ6ICh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQucmVhZE9ubHksXG4gICAgICAgICAgICAgIHRhcmdldDogXCIjZWRpdG9yLmVkaXQgbW9kZS5yZWFkIG9ubHkucmVhZCBvbmx5XCIsXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtcImVtaXQgcmVhZCBvbmx5XCJdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJiZWhhdmlvciBldmVudFwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiaGFuZGxlIGJlaGF2aW9yIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImN1c3RvbSBiZWhhdmlvciBldmVudFwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiaGFuZGxlIGJlaGF2aW9yIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImFubm90YXRpb24uKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVyOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImN1c3RvbS4qXCI6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20uKlwiLFxuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVjb3JhdG9yLipcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiaW5zZXJ0LipcIjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBlbWl0KCh7XG4gICAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgICAgfSkgPT4gZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsaXN0IGl0ZW0uKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogZW1pdCgoe1xuICAgICAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgICAgIH0pID0+IGV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic3R5bGUuKlwiOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IGVtaXQoKHtcbiAgICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgICB9KSA9PiBldmVudClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNldHVwOiB7XG4gICAgICBpbml0aWFsOiBcInNldHRpbmcgdXBcIixcbiAgICAgIHN0YXRlczoge1xuICAgICAgICBcInNldHRpbmcgdXBcIjoge1xuICAgICAgICAgIGV4aXQ6IFtcImVtaXQgcmVhZHlcIl0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiZGVmZXIgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG11dGF0aW9uOiB7XG4gICAgICAgICAgICAgIGFjdGlvbnM6IFwiZGVmZXIgZXZlbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZG9uZSBzeW5jaW5nIGluaXRpYWwgdmFsdWVcIjoge1xuICAgICAgICAgICAgICB0YXJnZXQ6IFwicHJpc3RpbmVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJpc3RpbmU6IHtcbiAgICAgICAgICBpbml0aWFsOiBcImlkbGVcIixcbiAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgIGlkbGU6IHtcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemluZzoge1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIm5vcm1hbGl6aW5nXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCIsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiI2VkaXRvci5zZXR1cC5kaXJ0eVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtdXRhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgYWN0aW9uczogXCJkZWZlciBldmVudFwiLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIiNlZGl0b3Iuc2V0dXAuZGlydHlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vcm1hbGl6aW5nOiB7XG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgXCJkb25lIG5vcm1hbGl6aW5nXCI6IHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJpZGxlXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG11dGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICBhY3Rpb25zOiBcImRlZmVyIGV2ZW50XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpcnR5OiB7XG4gICAgICAgICAgZW50cnk6IFtcImVtaXQgcGVuZGluZyBldmVudHNcIiwgXCJjbGVhciBwZW5kaW5nIGV2ZW50c1wiXSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgcGF0Y2g6IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogXCJlbWl0IHBhdGNoIGV2ZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtdXRhdGlvbjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBcImVtaXQgbXV0YXRpb24gZXZlbnRcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5mdW5jdGlvbiBnZXRWYWx1ZSh7XG4gIGVkaXRvckFjdG9yU25hcHNob3QsXG4gIHNsYXRlRWRpdG9ySW5zdGFuY2Vcbn0pIHtcbiAgcmV0dXJuIGZyb21TbGF0ZVZhbHVlKHNsYXRlRWRpdG9ySW5zdGFuY2UuY2hpbGRyZW4sIGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zY2hlbWEuYmxvY2submFtZSwgS0VZX1RPX1ZBTFVFX0VMRU1FTlQuZ2V0KHNsYXRlRWRpdG9ySW5zdGFuY2UpKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5mdW5jdGlvbiB1c2VFZGl0b3JTZWxlY3RvcihlZGl0b3IsIHNlbGVjdG9yLCB0MCkge1xuICBjb25zdCAkID0gYygzKSwgY29tcGFyZSA9IHQwID09PSB2b2lkIDAgPyBkZWZhdWx0Q29tcGFyZSA6IHQwO1xuICBsZXQgdDE7XG4gIHJldHVybiAkWzBdICE9PSBlZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlIHx8ICRbMV0gIT09IHNlbGVjdG9yID8gKHQxID0gKGVkaXRvckFjdG9yU25hcHNob3QpID0+IHtcbiAgICBjb25zdCBzbmFwc2hvdCA9IGdldEVkaXRvclNuYXBzaG90KHtcbiAgICAgIGVkaXRvckFjdG9yU25hcHNob3QsXG4gICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBlZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlXG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGVjdG9yKHNuYXBzaG90KTtcbiAgfSwgJFswXSA9IGVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3IuaW5zdGFuY2UsICRbMV0gPSBzZWxlY3RvciwgJFsyXSA9IHQxKSA6IHQxID0gJFsyXSwgdXNlU2VsZWN0b3IoZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3RvciwgdDEsIGNvbXBhcmUpO1xufVxuZnVuY3Rpb24gZ2V0RWRpdG9yU25hcHNob3Qoe1xuICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICBzbGF0ZUVkaXRvckluc3RhbmNlXG59KSB7XG4gIHJldHVybiB7XG4gICAgY29udGV4dDoge1xuICAgICAgYWN0aXZlRGVjb3JhdG9yczogZ2V0QWN0aXZlRGVjb3JhdG9ycyh7XG4gICAgICAgIHNjaGVtYTogZWRpdG9yQWN0b3JTbmFwc2hvdC5jb250ZXh0LnNjaGVtYSxcbiAgICAgICAgc2xhdGVFZGl0b3JJbnN0YW5jZVxuICAgICAgfSksXG4gICAgICBrZXlHZW5lcmF0b3I6IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5rZXlHZW5lcmF0b3IsXG4gICAgICBzY2hlbWE6IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zY2hlbWEsXG4gICAgICBzZWxlY3Rpb246IGVkaXRvckFjdG9yU25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24sXG4gICAgICB2YWx1ZTogZ2V0VmFsdWUoe1xuICAgICAgICBlZGl0b3JBY3RvclNuYXBzaG90LFxuICAgICAgICBzbGF0ZUVkaXRvckluc3RhbmNlXG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn1cbmNvbnN0IGRlZmF1bHRLZXlHZW5lcmF0b3IgPSAoKSA9PiByYW5kb21LZXkoMTIpLCBnZXRCeXRlSGV4VGFibGUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHtcbiAgbGV0IHRhYmxlO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICh0YWJsZSlcbiAgICAgIHJldHVybiB0YWJsZTtcbiAgICB0YWJsZSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpXG4gICAgICB0YWJsZVtpXSA9IChpICsgMjU2KS50b1N0cmluZygxNikuc2xpY2UoMSk7XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9O1xufSkoKTtcbmZ1bmN0aW9uIHdoYXR3Z1JORyhsZW5ndGggPSAxNikge1xuICBjb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpLCBybmRzODtcbn1cbmZ1bmN0aW9uIHJhbmRvbUtleShsZW5ndGgpIHtcbiAgY29uc3QgdGFibGUgPSBnZXRCeXRlSGV4VGFibGUoKTtcbiAgcmV0dXJuIHdoYXR3Z1JORyhsZW5ndGgpLnJlZHVjZSgoc3RyLCBuKSA9PiBzdHIgKyB0YWJsZVtuXSwgXCJcIikuc2xpY2UoMCwgbGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVkaXRvcihjb25maWcpIHtcbiAgY29uc3QgZWRpdG9yQWN0b3IgPSBjcmVhdGVBY3RvcihlZGl0b3JNYWNoaW5lLCB7XG4gICAgaW5wdXQ6IGVkaXRvckNvbmZpZ1RvTWFjaGluZUlucHV0KGNvbmZpZylcbiAgfSk7XG4gIHJldHVybiBlZGl0b3JBY3Rvci5zdGFydCgpLCBjcmVhdGVFZGl0b3JGcm9tQWN0b3IoZWRpdG9yQWN0b3IpO1xufVxuZnVuY3Rpb24gdXNlQ3JlYXRlRWRpdG9yKGNvbmZpZykge1xuICBjb25zdCAkID0gYyg2KTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBjb25maWcgPyAodDAgPSBlZGl0b3JDb25maWdUb01hY2hpbmVJbnB1dChjb25maWcpLCAkWzBdID0gY29uZmlnLCAkWzFdID0gdDApIDogdDAgPSAkWzFdO1xuICBsZXQgdDE7XG4gICRbMl0gIT09IHQwID8gKHQxID0ge1xuICAgIGlucHV0OiB0MFxuICB9LCAkWzJdID0gdDAsICRbM10gPSB0MSkgOiB0MSA9ICRbM107XG4gIGNvbnN0IGVkaXRvckFjdG9yID0gdXNlQWN0b3JSZWYoZWRpdG9yTWFjaGluZSwgdDEpO1xuICBsZXQgdDIsIHQzO1xuICByZXR1cm4gJFs0XSAhPT0gZWRpdG9yQWN0b3IgPyAodDMgPSBjcmVhdGVFZGl0b3JGcm9tQWN0b3IoZWRpdG9yQWN0b3IpLCAkWzRdID0gZWRpdG9yQWN0b3IsICRbNV0gPSB0MykgOiB0MyA9ICRbNV0sIHQyID0gdDMsIHQyO1xufVxuZnVuY3Rpb24gZWRpdG9yQ29uZmlnVG9NYWNoaW5lSW5wdXQoY29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgYmVoYXZpb3JzOiBjb25maWcuYmVoYXZpb3JzLFxuICAgIGtleUdlbmVyYXRvcjogY29uZmlnLmtleUdlbmVyYXRvciA/PyBkZWZhdWx0S2V5R2VuZXJhdG9yLFxuICAgIG1heEJsb2NrczogY29uZmlnLm1heEJsb2NrcyxcbiAgICByZWFkT25seTogY29uZmlnLnJlYWRPbmx5LFxuICAgIHNjaGVtYTogY29uZmlnLnNjaGVtYURlZmluaXRpb24gPyBjb21waWxlU2NoZW1hRGVmaW5pdGlvbihjb25maWcuc2NoZW1hRGVmaW5pdGlvbikgOiBjcmVhdGVFZGl0b3JTY2hlbWEoY29uZmlnLnNjaGVtYS5oYXNPd25Qcm9wZXJ0eShcImpzb25UeXBlXCIpID8gY29uZmlnLnNjaGVtYSA6IGNvbXBpbGVUeXBlKGNvbmZpZy5zY2hlbWEpKSxcbiAgICB2YWx1ZTogY29uZmlnLmluaXRpYWxWYWx1ZVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlRWRpdG9yRnJvbUFjdG9yKGVkaXRvckFjdG9yKSB7XG4gIGNvbnN0IHNsYXRlRWRpdG9yID0gY3JlYXRlU2xhdGVFZGl0b3Ioe1xuICAgIGVkaXRvckFjdG9yXG4gIH0pLCBlZGl0YWJsZSA9IGNyZWF0ZUVkaXRhYmxlQVBJKHNsYXRlRWRpdG9yLmluc3RhbmNlLCBlZGl0b3JBY3Rvcik7XG4gIHJldHVybiB7XG4gICAgZ2V0U25hcHNob3Q6ICgpID0+IGdldEVkaXRvclNuYXBzaG90KHtcbiAgICAgIGVkaXRvckFjdG9yU25hcHNob3Q6IGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCksXG4gICAgICBzbGF0ZUVkaXRvckluc3RhbmNlOiBzbGF0ZUVkaXRvci5pbnN0YW5jZVxuICAgIH0pLFxuICAgIHJlZ2lzdGVyQmVoYXZpb3I6IChjb25maWcpID0+IChlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYWRkIGJlaGF2aW9yXCIsXG4gICAgICBiZWhhdmlvcjogY29uZmlnLmJlaGF2aW9yXG4gICAgfSksICgpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICB0eXBlOiBcInJlbW92ZSBiZWhhdmlvclwiLFxuICAgICAgICBiZWhhdmlvcjogY29uZmlnLmJlaGF2aW9yXG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBzZW5kOiAoZXZlbnQpID0+IHtcbiAgICAgIGVkaXRvckFjdG9yLnNlbmQoZXZlbnQpO1xuICAgIH0sXG4gICAgb246IChldmVudCwgbGlzdGVuZXIpID0+IGVkaXRvckFjdG9yLm9uKFxuICAgICAgZXZlbnQsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICBsaXN0ZW5lclxuICAgICksXG4gICAgX2ludGVybmFsOiB7XG4gICAgICBlZGl0YWJsZSxcbiAgICAgIGVkaXRvckFjdG9yLFxuICAgICAgc2xhdGVFZGl0b3JcbiAgICB9XG4gIH07XG59XG5jb25zdCBFZGl0b3JBY3RvckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KSwgUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCksIHVzZVBvcnRhYmxlVGV4dEVkaXRvclNlbGVjdGlvbiA9ICgpID0+IHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gdXNlQ29udGV4dChQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25Db250ZXh0KTtcbiAgaWYgKHNlbGVjdGlvbiA9PT0gdm9pZCAwKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgdXNlUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uYCBob29rIG11c3QgYmUgdXNlZCBpbnNpZGUgdGhlIDxQb3J0YWJsZVRleHRFZGl0b3I+IGNvbXBvbmVudCdzIGNvbnRleHQuXCIpO1xuICByZXR1cm4gc2VsZWN0aW9uO1xufSwgZGVidWckNSA9IGRlYnVnV2l0aE5hbWUoXCJjb21wb25lbnQ6UG9ydGFibGVUZXh0RWRpdG9yOlNlbGVjdGlvblByb3ZpZGVyXCIpO1xuZnVuY3Rpb24gUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNiksIFtzZWxlY3Rpb24sIHNldFNlbGVjdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgbGV0IHQwLCB0MTtcbiAgJFswXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgPyAodDAgPSAoKSA9PiB7XG4gICAgZGVidWckNShcIlN1YnNjcmliaW5nIHRvIHNlbGVjdGlvbiBjaGFuZ2VzXCIpO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHByb3BzLmVkaXRvckFjdG9yLm9uKFwic2VsZWN0aW9uXCIsIChldmVudCkgPT4ge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgc2V0U2VsZWN0aW9uKGV2ZW50LnNlbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGVidWckNShcIlVuc3Vic2NyaWJpbmcgdG8gc2VsZWN0aW9uIGNoYW5nZXNcIiksIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIHQxID0gW3Byb3BzLmVkaXRvckFjdG9yXSwgJFswXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzFdID0gdDAsICRbMl0gPSB0MSkgOiAodDAgPSAkWzFdLCB0MSA9ICRbMl0pLCB1c2VFZmZlY3QodDAsIHQxKTtcbiAgbGV0IHQyO1xuICByZXR1cm4gJFszXSAhPT0gcHJvcHMuY2hpbGRyZW4gfHwgJFs0XSAhPT0gc2VsZWN0aW9uID8gKHQyID0gLyogQF9fUFVSRV9fICovIGpzeChQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBzZWxlY3Rpb24sIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSwgJFszXSA9IHByb3BzLmNoaWxkcmVuLCAkWzRdID0gc2VsZWN0aW9uLCAkWzVdID0gdDIpIDogdDIgPSAkWzVdLCB0Mjtcbn1cbmNvbnN0IGRlYnVnJDQgPSBkZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50OlBvcnRhYmxlVGV4dEVkaXRvclwiKTtcbmNsYXNzIFBvcnRhYmxlVGV4dEVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9IFwiUG9ydGFibGVUZXh0RWRpdG9yXCI7XG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIG9mIGFsbCB0aGUgZWRpdG9yIGNoYW5nZXMuXG4gICAqL1xuICBjaGFuZ2UkID0gbmV3IFN1YmplY3QoKTtcbiAgLyoqXG4gICAqIEEgbG9va3VwIHRhYmxlIGZvciBhbGwgdGhlIHJlbGV2YW50IHNjaGVtYSB0eXBlcyBmb3IgdGhpcyBwb3J0YWJsZSB0ZXh0IHR5cGUuXG4gICAqL1xuICAvKipcbiAgICogVGhlIGVkaXRvciBpbnN0YW5jZVxuICAgKi9cbiAgLypcbiAgICogVGhlIGVkaXRvciBBUEkgKGN1cnJlbnRseSBpbXBsZW1lbnRlZCB3aXRoIFNsYXRlKS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpLCBwcm9wcy5lZGl0b3IgPyB0aGlzLmVkaXRvciA9IHByb3BzLmVkaXRvciA6IHRoaXMuZWRpdG9yID0gY3JlYXRlRWRpdG9yKHtcbiAgICAgIGtleUdlbmVyYXRvcjogcHJvcHMua2V5R2VuZXJhdG9yID8/IGRlZmF1bHRLZXlHZW5lcmF0b3IsXG4gICAgICBzY2hlbWE6IHByb3BzLnNjaGVtYVR5cGUsXG4gICAgICBpbml0aWFsVmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgbWF4QmxvY2tzOiBwcm9wcy5tYXhCbG9ja3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IE51bWJlci5wYXJzZUludChwcm9wcy5tYXhCbG9ja3MudG9TdHJpbmcoKSwgMTApLFxuICAgICAgcmVhZE9ubHk6IHByb3BzLnJlYWRPbmx5XG4gICAgfSksIHRoaXMuc2NoZW1hVHlwZXMgPSB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LnNjaGVtYSwgdGhpcy5lZGl0YWJsZSA9IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZTtcbiAgfVxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgIXRoaXMucHJvcHMuZWRpdG9yICYmICFwcmV2UHJvcHMuZWRpdG9yICYmIHRoaXMucHJvcHMuc2NoZW1hVHlwZSAhPT0gcHJldlByb3BzLnNjaGVtYVR5cGUgJiYgKHRoaXMuc2NoZW1hVHlwZXMgPSBjcmVhdGVFZGl0b3JTY2hlbWEodGhpcy5wcm9wcy5zY2hlbWFUeXBlLmhhc093blByb3BlcnR5KFwianNvblR5cGVcIikgPyB0aGlzLnByb3BzLnNjaGVtYVR5cGUgOiBjb21waWxlVHlwZSh0aGlzLnByb3BzLnNjaGVtYVR5cGUpKSwgdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJ1cGRhdGUgc2NoZW1hXCIsXG4gICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hVHlwZXNcbiAgICB9KSksICF0aGlzLnByb3BzLmVkaXRvciAmJiAhcHJldlByb3BzLmVkaXRvciAmJiAodGhpcy5wcm9wcy5yZWFkT25seSAhPT0gcHJldlByb3BzLnJlYWRPbmx5ICYmIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHJlYWRPbmx5XCIsXG4gICAgICByZWFkT25seTogdGhpcy5wcm9wcy5yZWFkT25seSA/PyAhMVxuICAgIH0pLCB0aGlzLnByb3BzLm1heEJsb2NrcyAhPT0gcHJldlByb3BzLm1heEJsb2NrcyAmJiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcInVwZGF0ZSBtYXhCbG9ja3NcIixcbiAgICAgIG1heEJsb2NrczogdGhpcy5wcm9wcy5tYXhCbG9ja3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IE51bWJlci5wYXJzZUludCh0aGlzLnByb3BzLm1heEJsb2Nrcy50b1N0cmluZygpLCAxMClcbiAgICB9KSwgdGhpcy5wcm9wcy52YWx1ZSAhPT0gcHJldlByb3BzLnZhbHVlICYmIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwidXBkYXRlIHZhbHVlXCIsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxuICAgIH0pLCB0aGlzLnByb3BzLmVkaXRvclJlZiAhPT0gcHJldlByb3BzLmVkaXRvclJlZiAmJiB0aGlzLnByb3BzLmVkaXRvclJlZiAmJiAodGhpcy5wcm9wcy5lZGl0b3JSZWYuY3VycmVudCA9IHRoaXMpKTtcbiAgfVxuICBzZXRFZGl0YWJsZSA9IChlZGl0YWJsZSkgPT4ge1xuICAgIHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZSA9IHtcbiAgICAgIC4uLnRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0YWJsZSxcbiAgICAgIC4uLmVkaXRhYmxlXG4gICAgfTtcbiAgfTtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGxlZ2FjeVBhdGNoZXMgPSB0aGlzLnByb3BzLmVkaXRvciA/IHZvaWQgMCA6IHRoaXMucHJvcHMuaW5jb21pbmdQYXRjaGVzJCA/PyB0aGlzLnByb3BzLnBhdGNoZXMkO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4cyhGcmFnbWVudCwgeyBjaGlsZHJlbjogW1xuICAgICAgbGVnYWN5UGF0Y2hlcyA/IC8qIEBfX1BVUkVfXyAqLyBqc3goUm91dGVQYXRjaGVzT2JzZXJ2YWJsZVRvRWRpdG9yQWN0b3IsIHsgZWRpdG9yQWN0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3RvciwgcGF0Y2hlcyQ6IGxlZ2FjeVBhdGNoZXMgfSkgOiBudWxsLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChSb3V0ZUV2ZW50c1RvQ2hhbmdlcywgeyBlZGl0b3JBY3RvcjogdGhpcy5lZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLCBvbkNoYW5nZTogKGNoYW5nZSkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmVkaXRvciB8fCB0aGlzLnByb3BzLm9uQ2hhbmdlKGNoYW5nZSksIHRoaXMuY2hhbmdlJC5uZXh0KGNoYW5nZSk7XG4gICAgICB9IH0pLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChTeW5jaHJvbml6ZXIsIHsgZWRpdG9yQWN0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5lZGl0b3JBY3Rvciwgc2xhdGVFZGl0b3I6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbnN0YW5jZSB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goRWRpdG9yQWN0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFNsYXRlLCB7IGVkaXRvcjogdGhpcy5lZGl0b3IuX2ludGVybmFsLnNsYXRlRWRpdG9yLmluc3RhbmNlLCBpbml0aWFsVmFsdWU6IHRoaXMuZWRpdG9yLl9pbnRlcm5hbC5zbGF0ZUVkaXRvci5pbml0aWFsVmFsdWUsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFBvcnRhYmxlVGV4dEVkaXRvckNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHRoaXMsIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFBvcnRhYmxlVGV4dEVkaXRvclNlbGVjdGlvblByb3ZpZGVyLCB7IGVkaXRvckFjdG9yOiB0aGlzLmVkaXRvci5faW50ZXJuYWwuZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pIH0pIH0pIH0pXG4gICAgXSB9KTtcbiAgfVxuICAvLyBTdGF0aWMgQVBJIG1ldGhvZHNcbiAgc3RhdGljIGFjdGl2ZUFubm90YXRpb25zID0gKGVkaXRvcikgPT4gZWRpdG9yICYmIGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5hY3RpdmVBbm5vdGF0aW9ucygpIDogW107XG4gIHN0YXRpYyBpc0Fubm90YXRpb25BY3RpdmUgPSAoZWRpdG9yLCBhbm5vdGF0aW9uVHlwZSkgPT4gZWRpdG9yICYmIGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5pc0Fubm90YXRpb25BY3RpdmUoYW5ub3RhdGlvblR5cGUpIDogITE7XG4gIHN0YXRpYyBhZGRBbm5vdGF0aW9uID0gKGVkaXRvciwgdHlwZSwgdmFsdWUpID0+IGVkaXRvci5lZGl0YWJsZT8uYWRkQW5ub3RhdGlvbih0eXBlLCB2YWx1ZSk7XG4gIHN0YXRpYyBibHVyID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IGJsdXJyZWRcIiksIGVkaXRvci5lZGl0YWJsZT8uYmx1cigpO1xuICB9O1xuICBzdGF0aWMgZGVsZXRlID0gKGVkaXRvciwgc2VsZWN0aW9uLCBvcHRpb25zKSA9PiBlZGl0b3IuZWRpdGFibGU/LmRlbGV0ZShzZWxlY3Rpb24sIG9wdGlvbnMpO1xuICBzdGF0aWMgZmluZERPTU5vZGUgPSAoZWRpdG9yLCBlbGVtZW50KSA9PiBlZGl0b3IuZWRpdGFibGU/LmZpbmRET01Ob2RlKGVsZW1lbnQpO1xuICBzdGF0aWMgZmluZEJ5UGF0aCA9IChlZGl0b3IsIHBhdGgpID0+IGVkaXRvci5lZGl0YWJsZT8uZmluZEJ5UGF0aChwYXRoKSB8fCBbXTtcbiAgc3RhdGljIGZvY3VzID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IHJlcXVlc3RpbmcgZm9jdXNcIiksIGVkaXRvci5lZGl0YWJsZT8uZm9jdXMoKTtcbiAgfTtcbiAgc3RhdGljIGZvY3VzQmxvY2sgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmZvY3VzQmxvY2soKTtcbiAgc3RhdGljIGZvY3VzQ2hpbGQgPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmZvY3VzQ2hpbGQoKTtcbiAgc3RhdGljIGdldFNlbGVjdGlvbiA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZSA/IGVkaXRvci5lZGl0YWJsZS5nZXRTZWxlY3Rpb24oKSA6IG51bGw7XG4gIHN0YXRpYyBnZXRWYWx1ZSA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uZ2V0VmFsdWUoKTtcbiAgc3RhdGljIGhhc0Jsb2NrU3R5bGUgPSAoZWRpdG9yLCBibG9ja1N0eWxlKSA9PiBlZGl0b3IuZWRpdGFibGU/Lmhhc0Jsb2NrU3R5bGUoYmxvY2tTdHlsZSk7XG4gIHN0YXRpYyBoYXNMaXN0U3R5bGUgPSAoZWRpdG9yLCBsaXN0U3R5bGUpID0+IGVkaXRvci5lZGl0YWJsZT8uaGFzTGlzdFN0eWxlKGxpc3RTdHlsZSk7XG4gIHN0YXRpYyBpc0NvbGxhcHNlZFNlbGVjdGlvbiA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uaXNDb2xsYXBzZWRTZWxlY3Rpb24oKTtcbiAgc3RhdGljIGlzRXhwYW5kZWRTZWxlY3Rpb24gPSAoZWRpdG9yKSA9PiBlZGl0b3IuZWRpdGFibGU/LmlzRXhwYW5kZWRTZWxlY3Rpb24oKTtcbiAgc3RhdGljIGlzTWFya0FjdGl2ZSA9IChlZGl0b3IsIG1hcmspID0+IGVkaXRvci5lZGl0YWJsZT8uaXNNYXJrQWN0aXZlKG1hcmspO1xuICBzdGF0aWMgaW5zZXJ0Q2hpbGQgPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gKGRlYnVnJDQoXCJIb3N0IGluc2VydGluZyBjaGlsZFwiKSwgZWRpdG9yLmVkaXRhYmxlPy5pbnNlcnRDaGlsZCh0eXBlLCB2YWx1ZSkpO1xuICBzdGF0aWMgaW5zZXJ0QmxvY2sgPSAoZWRpdG9yLCB0eXBlLCB2YWx1ZSkgPT4gZWRpdG9yLmVkaXRhYmxlPy5pbnNlcnRCbG9jayh0eXBlLCB2YWx1ZSk7XG4gIHN0YXRpYyBpbnNlcnRCcmVhayA9IChlZGl0b3IpID0+IGVkaXRvci5lZGl0YWJsZT8uaW5zZXJ0QnJlYWsoKTtcbiAgc3RhdGljIGlzVm9pZCA9IChlZGl0b3IsIGVsZW1lbnQpID0+IGVkaXRvci5lZGl0YWJsZT8uaXNWb2lkKGVsZW1lbnQpO1xuICBzdGF0aWMgaXNPYmplY3RQYXRoID0gKF9lZGl0b3IsIHBhdGgpID0+IHtcbiAgICBpZiAoIXBhdGggfHwgIUFycmF5LmlzQXJyYXkocGF0aCkpIHJldHVybiAhMTtcbiAgICBjb25zdCBpc0NoaWxkT2JqZWN0RWRpdFBhdGggPSBwYXRoLmxlbmd0aCA+IDMgJiYgcGF0aFsxXSA9PT0gXCJjaGlsZHJlblwiO1xuICAgIHJldHVybiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aFsxXSAhPT0gXCJjaGlsZHJlblwiIHx8IGlzQ2hpbGRPYmplY3RFZGl0UGF0aDtcbiAgfTtcbiAgc3RhdGljIG1hcmtzID0gKGVkaXRvcikgPT4gZWRpdG9yLmVkaXRhYmxlPy5tYXJrcygpO1xuICBzdGF0aWMgc2VsZWN0ID0gKGVkaXRvciwgc2VsZWN0aW9uKSA9PiB7XG4gICAgZGVidWckNChcIkhvc3Qgc2V0dGluZyBzZWxlY3Rpb25cIiwgc2VsZWN0aW9uKSwgZWRpdG9yLmVkaXRhYmxlPy5zZWxlY3Qoc2VsZWN0aW9uKTtcbiAgfTtcbiAgc3RhdGljIHJlbW92ZUFubm90YXRpb24gPSAoZWRpdG9yLCB0eXBlKSA9PiBlZGl0b3IuZWRpdGFibGU/LnJlbW92ZUFubm90YXRpb24odHlwZSk7XG4gIHN0YXRpYyB0b2dnbGVCbG9ja1N0eWxlID0gKGVkaXRvciwgYmxvY2tTdHlsZSkgPT4gKGRlYnVnJDQoXCJIb3N0IGlzIHRvZ2dsaW5nIGJsb2NrIHN0eWxlXCIpLCBlZGl0b3IuZWRpdGFibGU/LnRvZ2dsZUJsb2NrU3R5bGUoYmxvY2tTdHlsZSkpO1xuICBzdGF0aWMgdG9nZ2xlTGlzdCA9IChlZGl0b3IsIGxpc3RTdHlsZSkgPT4gZWRpdG9yLmVkaXRhYmxlPy50b2dnbGVMaXN0KGxpc3RTdHlsZSk7XG4gIHN0YXRpYyB0b2dnbGVNYXJrID0gKGVkaXRvciwgbWFyaykgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IHRvZ2dsaW5nIG1hcmtcIiwgbWFyayksIGVkaXRvci5lZGl0YWJsZT8udG9nZ2xlTWFyayhtYXJrKTtcbiAgfTtcbiAgc3RhdGljIGdldEZyYWdtZW50ID0gKGVkaXRvcikgPT4gKGRlYnVnJDQoXCJIb3N0IGdldHRpbmcgZnJhZ21lbnRcIiksIGVkaXRvci5lZGl0YWJsZT8uZ2V0RnJhZ21lbnQoKSk7XG4gIHN0YXRpYyB1bmRvID0gKGVkaXRvcikgPT4ge1xuICAgIGRlYnVnJDQoXCJIb3N0IHVuZG9pbmdcIiksIGVkaXRvci5lZGl0YWJsZT8udW5kbygpO1xuICB9O1xuICBzdGF0aWMgcmVkbyA9IChlZGl0b3IpID0+IHtcbiAgICBkZWJ1ZyQ0KFwiSG9zdCByZWRvaW5nXCIpLCBlZGl0b3IuZWRpdGFibGU/LnJlZG8oKTtcbiAgfTtcbiAgc3RhdGljIGlzU2VsZWN0aW9uc092ZXJsYXBwaW5nID0gKGVkaXRvciwgc2VsZWN0aW9uQSwgc2VsZWN0aW9uQikgPT4gZWRpdG9yLmVkaXRhYmxlPy5pc1NlbGVjdGlvbnNPdmVybGFwcGluZyhzZWxlY3Rpb25BLCBzZWxlY3Rpb25CKTtcbn1cbmZ1bmN0aW9uIFJvdXRlUGF0Y2hlc09ic2VydmFibGVUb0VkaXRvckFjdG9yKHByb3BzKSB7XG4gIGNvbnN0ICQgPSBjKDQpO1xuICBsZXQgdDAsIHQxO1xuICByZXR1cm4gJFswXSAhPT0gcHJvcHMuZWRpdG9yQWN0b3IgfHwgJFsxXSAhPT0gcHJvcHMucGF0Y2hlcyQgPyAodDAgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gcHJvcHMucGF0Y2hlcyQuc3Vic2NyaWJlKChwYXlsb2FkKSA9PiB7XG4gICAgICBwcm9wcy5lZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJwYXRjaGVzXCIsXG4gICAgICAgIC4uLnBheWxvYWRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0MSA9IFtwcm9wcy5lZGl0b3JBY3RvciwgcHJvcHMucGF0Y2hlcyRdLCAkWzBdID0gcHJvcHMuZWRpdG9yQWN0b3IsICRbMV0gPSBwcm9wcy5wYXRjaGVzJCwgJFsyXSA9IHQwLCAkWzNdID0gdDEpIDogKHQwID0gJFsyXSwgdDEgPSAkWzNdKSwgdXNlRWZmZWN0KHQwLCB0MSksIG51bGw7XG59XG5mdW5jdGlvbiBSb3V0ZUV2ZW50c1RvQ2hhbmdlcyhwcm9wcykge1xuICBjb25zdCAkID0gYyg2KTtcbiAgbGV0IHQwO1xuICAkWzBdICE9PSBwcm9wcyA/ICh0MCA9IChjaGFuZ2UpID0+IHByb3BzLm9uQ2hhbmdlKGNoYW5nZSksICRbMF0gPSBwcm9wcywgJFsxXSA9IHQwKSA6IHQwID0gJFsxXTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlRWZmZWN0RXZlbnQodDApO1xuICBsZXQgdDEsIHQyO1xuICByZXR1cm4gJFsyXSAhPT0gaGFuZGxlQ2hhbmdlIHx8ICRbM10gIT09IHByb3BzLmVkaXRvckFjdG9yID8gKHQxID0gKCkgPT4ge1xuICAgIGRlYnVnJDQoXCJTdWJzY3JpYmluZyB0byBlZGl0b3IgY2hhbmdlc1wiKTtcbiAgICBjb25zdCBzdWIgPSBwcm9wcy5lZGl0b3JBY3Rvci5vbihcIipcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBiYjU6IHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlIFwiYmx1cnJlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYmx1clwiLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LmV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJwYXRjaFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImxvYWRpbmdcIjoge1xuICAgICAgICAgIGhhbmRsZUNoYW5nZSh7XG4gICAgICAgICAgICB0eXBlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICAgIGlzTG9hZGluZzogITBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImRvbmUgbG9hZGluZ1wiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiAhMVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZm9jdXNlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZm9jdXNcIixcbiAgICAgICAgICAgIGV2ZW50OiBldmVudC5ldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidmFsdWUgY2hhbmdlZFwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwidmFsdWVcIixcbiAgICAgICAgICAgIHZhbHVlOiBldmVudC52YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaW52YWxpZCB2YWx1ZVwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW52YWxpZFZhbHVlXCIsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBldmVudC5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHtcbiAgICAgICAgICAgIC4uLmV2ZW50LFxuICAgICAgICAgICAgbGV2ZWw6IFwid2FybmluZ1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWsgYmI1O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJtdXRhdGlvblwiOiB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICBicmVhayBiYjU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJlYWR5XCI6IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic2VsZWN0aW9uXCI6IHtcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICAgIGJyZWFrIGJiNTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICBoYW5kbGVDaGFuZ2UoZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWJ1ZyQ0KFwiVW5zdWJzY3JpYmluZyB0byBjaGFuZ2VzXCIpLCBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCB0MiA9IFtwcm9wcy5lZGl0b3JBY3RvciwgaGFuZGxlQ2hhbmdlXSwgJFsyXSA9IGhhbmRsZUNoYW5nZSwgJFszXSA9IHByb3BzLmVkaXRvckFjdG9yLCAkWzRdID0gdDEsICRbNV0gPSB0MikgOiAodDEgPSAkWzRdLCB0MiA9ICRbNV0pLCB1c2VFZmZlY3QodDEsIHQyKSwgbnVsbDtcbn1cbmNvbnN0IGRlYnVnJDMgPSBkZWJ1Z1dpdGhOYW1lKFwiY29tcG9uZW50czpMZWFmXCIpLCBFTVBUWV9NQVJLUyA9IFtdLCBMZWFmID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlZGl0b3JBY3RvcixcbiAgICBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuLFxuICAgIGxlYWYsXG4gICAgc2NoZW1hVHlwZXMsXG4gICAgcmVuZGVyQ2hpbGQsXG4gICAgcmVuZGVyRGVjb3JhdG9yLFxuICAgIHJlbmRlckFubm90YXRpb25cbiAgfSA9IHByb3BzLCBzcGFuUmVmID0gdXNlUmVmKG51bGwpLCBwb3J0YWJsZVRleHRFZGl0b3IgPSB1c2VQb3J0YWJsZVRleHRFZGl0b3IoKSwgYmxvY2tTZWxlY3RlZCA9IHVzZVNlbGVjdGVkKCksIFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IHVzZVN0YXRlKCExKSwgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSB1c2VTdGF0ZSghMSksIGJsb2NrID0gY2hpbGRyZW4ucHJvcHMucGFyZW50LCBwYXRoID0gdXNlTWVtbygoKSA9PiBibG9jayA/IFt7XG4gICAgX2tleTogYmxvY2s/Ll9rZXlcbiAgfSwgXCJjaGlsZHJlblwiLCB7XG4gICAgX2tleTogbGVhZi5fa2V5XG4gIH1dIDogW10sIFtibG9jaywgbGVhZi5fa2V5XSksIGRlY29yYXRvclZhbHVlcyA9IHVzZU1lbW8oKCkgPT4gc2NoZW1hVHlwZXMuZGVjb3JhdG9ycy5tYXAoKGRlYykgPT4gZGVjLnZhbHVlKSwgW3NjaGVtYVR5cGVzLmRlY29yYXRvcnNdKSwgbWFya3MgPSB1c2VNZW1vKCgpID0+IHVuaXEoKGxlYWYubWFya3MgfHwgRU1QVFlfTUFSS1MpLmZpbHRlcigobWFyaykgPT4gZGVjb3JhdG9yVmFsdWVzLmluY2x1ZGVzKG1hcmspKSksIFtkZWNvcmF0b3JWYWx1ZXMsIGxlYWYubWFya3NdKSwgYW5ub3RhdGlvbk1hcmtzID0gQXJyYXkuaXNBcnJheShsZWFmLm1hcmtzKSA/IGxlYWYubWFya3MgOiBFTVBUWV9NQVJLUywgYW5ub3RhdGlvbnMgPSB1c2VNZW1vKCgpID0+IGFubm90YXRpb25NYXJrcy5tYXAoKG1hcmtfMCkgPT4gIWRlY29yYXRvclZhbHVlcy5pbmNsdWRlcyhtYXJrXzApICYmIGJsb2NrPy5tYXJrRGVmcz8uZmluZCgoZGVmKSA9PiBkZWYuX2tleSA9PT0gbWFya18wKSkuZmlsdGVyKEJvb2xlYW4pLCBbYW5ub3RhdGlvbk1hcmtzLCBibG9jaywgZGVjb3JhdG9yVmFsdWVzXSksIHNob3VsZFRyYWNrU2VsZWN0aW9uQW5kRm9jdXMgPSBhbm5vdGF0aW9ucy5sZW5ndGggPiAwICYmIGJsb2NrU2VsZWN0ZWQ7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzKSB7XG4gICAgICBzZXRGb2N1c2VkKCExKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2VsID0gUG9ydGFibGVUZXh0RWRpdG9yLmdldFNlbGVjdGlvbihwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgIHNlbCAmJiBpc0VxdWFsKHNlbC5mb2N1cy5wYXRoLCBwYXRoKSAmJiBQb3J0YWJsZVRleHRFZGl0b3IuaXNDb2xsYXBzZWRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKSAmJiBzdGFydFRyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNlZCghMCk7XG4gICAgfSk7XG4gIH0sIFtzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzLCBwYXRoLCBwb3J0YWJsZVRleHRFZGl0b3JdKTtcbiAgY29uc3Qgc2V0U2VsZWN0ZWRGcm9tUmFuZ2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzKVxuICAgICAgcmV0dXJuO1xuICAgIGRlYnVnJDMoXCJTZXR0aW5nIHNlbGVjdGlvbiBhbmQgZm9jdXMgZnJvbSByYW5nZVwiKTtcbiAgICBjb25zdCB3aW5TZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCF3aW5TZWxlY3Rpb24pIHtcbiAgICAgIHNldFNlbGVjdGVkKCExKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHdpblNlbGVjdGlvbiAmJiB3aW5TZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDApIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gd2luU2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgICBzcGFuUmVmLmN1cnJlbnQgJiYgcmFuZ2UuaW50ZXJzZWN0c05vZGUoc3BhblJlZi5jdXJyZW50KSA/IHNldFNlbGVjdGVkKCEwKSA6IHNldFNlbGVjdGVkKCExKTtcbiAgICB9IGVsc2VcbiAgICAgIHNldFNlbGVjdGVkKCExKTtcbiAgfSwgW3Nob3VsZFRyYWNrU2VsZWN0aW9uQW5kRm9jdXNdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2VsZWN0aW9uQW5kRm9jdXMpXG4gICAgICByZXR1cm47XG4gICAgY29uc3Qgb25CbHVyID0gZWRpdG9yQWN0b3Iub24oXCJibHVyXCIsICgpID0+IHtcbiAgICAgIHNldEZvY3VzZWQoITEpLCBzZXRTZWxlY3RlZCghMSk7XG4gICAgfSksIG9uRm9jdXMgPSBlZGl0b3JBY3Rvci5vbihcImZvY3VzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlbF8wID0gUG9ydGFibGVUZXh0RWRpdG9yLmdldFNlbGVjdGlvbihwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgICAgc2VsXzAgJiYgaXNFcXVhbChzZWxfMC5mb2N1cy5wYXRoLCBwYXRoKSAmJiBQb3J0YWJsZVRleHRFZGl0b3IuaXNDb2xsYXBzZWRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKSAmJiBzZXRGb2N1c2VkKCEwKSwgc2V0U2VsZWN0ZWRGcm9tUmFuZ2UoKTtcbiAgICB9KSwgb25TZWxlY3Rpb24gPSBlZGl0b3JBY3Rvci5vbihcInNlbGVjdGlvblwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnNlbGVjdGlvbiAmJiBpc0VxdWFsKGV2ZW50LnNlbGVjdGlvbi5mb2N1cy5wYXRoLCBwYXRoKSAmJiBQb3J0YWJsZVRleHRFZGl0b3IuaXNDb2xsYXBzZWRTZWxlY3Rpb24ocG9ydGFibGVUZXh0RWRpdG9yKSA/IHNldEZvY3VzZWQoITApIDogc2V0Rm9jdXNlZCghMSksIHNldFNlbGVjdGVkRnJvbVJhbmdlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG9uQmx1ci51bnN1YnNjcmliZSgpLCBvbkZvY3VzLnVuc3Vic2NyaWJlKCksIG9uU2VsZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2VkaXRvckFjdG9yLCBwYXRoLCBwb3J0YWJsZVRleHRFZGl0b3IsIHNldFNlbGVjdGVkRnJvbVJhbmdlLCBzaG91bGRUcmFja1NlbGVjdGlvbkFuZEZvY3VzXSksIHVzZUVmZmVjdCgoKSA9PiBzZXRTZWxlY3RlZEZyb21SYW5nZSgpLCBbc2V0U2VsZWN0ZWRGcm9tUmFuZ2VdKTtcbiAgY29uc3QgY29udGVudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCByZXR1cm5lZENoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgaWYgKFRleHQuaXNUZXh0KGxlYWYpICYmIGxlYWYuX3R5cGUgPT09IHNjaGVtYVR5cGVzLnNwYW4ubmFtZSAmJiAobWFya3MuZm9yRWFjaCgobWFya18xKSA9PiB7XG4gICAgICBjb25zdCBzY2hlbWFUeXBlID0gc2NoZW1hVHlwZXMuZGVjb3JhdG9ycy5maW5kKChkZWNfMCkgPT4gZGVjXzAudmFsdWUgPT09IG1hcmtfMSk7XG4gICAgICBpZiAoc2NoZW1hVHlwZSAmJiByZW5kZXJEZWNvcmF0b3IpIHtcbiAgICAgICAgY29uc3QgX3Byb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgICAgICAgICBjaGlsZHJlbjogcmV0dXJuZWRDaGlsZHJlbixcbiAgICAgICAgICBlZGl0b3JFbGVtZW50UmVmOiBzcGFuUmVmLFxuICAgICAgICAgIGZvY3VzZWQsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICBzY2hlbWFUeXBlLFxuICAgICAgICAgIHZhbHVlOiBtYXJrXzFcbiAgICAgICAgfSwgXCJ0eXBlXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFwiUHJvcGVydHkgJ3R5cGUnIGlzIGRlcHJlY2F0ZWQsIHVzZSAnc2NoZW1hVHlwZScgaW5zdGVhZC5cIiksIHNjaGVtYVR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuZWRDaGlsZHJlbiA9IHJlbmRlckRlY29yYXRvcihfcHJvcHMpO1xuICAgICAgfVxuICAgIH0pLCBibG9jayAmJiBhbm5vdGF0aW9ucy5sZW5ndGggPiAwICYmIGFubm90YXRpb25zLmZvckVhY2goKGFubm90YXRpb24pID0+IHtcbiAgICAgIGNvbnN0IHNjaGVtYVR5cGVfMCA9IHNjaGVtYVR5cGVzLmFubm90YXRpb25zLmZpbmQoKHQpID0+IHQubmFtZSA9PT0gYW5ub3RhdGlvbi5fdHlwZSk7XG4gICAgICBpZiAoc2NoZW1hVHlwZV8wKVxuICAgICAgICBpZiAocmVuZGVyQW5ub3RhdGlvbikge1xuICAgICAgICAgIGNvbnN0IF9wcm9wc18wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcbiAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgY2hpbGRyZW46IHJldHVybmVkQ2hpbGRyZW4sXG4gICAgICAgICAgICBlZGl0b3JFbGVtZW50UmVmOiBzcGFuUmVmLFxuICAgICAgICAgICAgZm9jdXNlZCxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICAgIHNjaGVtYVR5cGU6IHNjaGVtYVR5cGVfMCxcbiAgICAgICAgICAgIHZhbHVlOiBhbm5vdGF0aW9uXG4gICAgICAgICAgfSwgXCJ0eXBlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFwiUHJvcGVydHkgJ3R5cGUnIGlzIGRlcHJlY2F0ZWQsIHVzZSAnc2NoZW1hVHlwZScgaW5zdGVhZC5cIiksIHNjaGVtYVR5cGVfMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm5lZENoaWxkcmVuID0gLyogQF9fUFVSRV9fICovIGpzeChcInNwYW5cIiwgeyByZWY6IHNwYW5SZWYsIGNoaWxkcmVuOiByZW5kZXJBbm5vdGF0aW9uKF9wcm9wc18wKSB9KTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmV0dXJuZWRDaGlsZHJlbiA9IC8qIEBfX1BVUkVfXyAqLyBqc3goRGVmYXVsdEFubm90YXRpb24sIHsgYW5ub3RhdGlvbiwgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJzcGFuXCIsIHsgcmVmOiBzcGFuUmVmLCBjaGlsZHJlbjogcmV0dXJuZWRDaGlsZHJlbiB9KSB9KTtcbiAgICB9KSwgYmxvY2sgJiYgcmVuZGVyQ2hpbGQpKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGJsb2NrLmNoaWxkcmVuLmZpbmQoKF9jaGlsZCkgPT4gX2NoaWxkLl9rZXkgPT09IGxlYWYuX2tleSk7XG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgY29uc3QgX3Byb3BzXzEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICAgIGFubm90YXRpb25zLFxuICAgICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KEZyYWdtZW50LCB7IGNoaWxkcmVuOiByZXR1cm5lZENoaWxkcmVuIH0pLFxuICAgICAgICAgIGVkaXRvckVsZW1lbnRSZWY6IHNwYW5SZWYsXG4gICAgICAgICAgZm9jdXNlZCxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHNjaGVtYVR5cGU6IHNjaGVtYVR5cGVzLnNwYW4sXG4gICAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgICAgdmFsdWU6IGNoaWxkXG4gICAgICAgIH0sIFwidHlwZVwiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcIlByb3BlcnR5ICd0eXBlJyBpcyBkZXByZWNhdGVkLCB1c2UgJ3NjaGVtYVR5cGUnIGluc3RlYWQuXCIpLCBzY2hlbWFUeXBlcy5zcGFuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybmVkQ2hpbGRyZW4gPSByZW5kZXJDaGlsZChfcHJvcHNfMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5lZENoaWxkcmVuO1xuICB9LCBbYW5ub3RhdGlvbnMsIGJsb2NrLCBjaGlsZHJlbiwgZm9jdXNlZCwgbGVhZiwgbWFya3MsIHBhdGgsIHJlbmRlckFubm90YXRpb24sIHJlbmRlckNoaWxkLCByZW5kZXJEZWNvcmF0b3IsIHNjaGVtYVR5cGVzLmFubm90YXRpb25zLCBzY2hlbWFUeXBlcy5kZWNvcmF0b3JzLCBzY2hlbWFUeXBlcy5zcGFuLCBzZWxlY3RlZF0pO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IC4uLmF0dHJpYnV0ZXMsIHJlZjogc3BhblJlZiwgY2hpbGRyZW46IGNvbnRlbnQgfSwgbGVhZi5fa2V5KSwgW2xlYWYsIGF0dHJpYnV0ZXMsIGNvbnRlbnRdKTtcbn07XG5MZWFmLmRpc3BsYXlOYW1lID0gXCJMZWFmXCI7XG5jb25zdCBkZWJ1ZyQyID0gZGVidWdXaXRoTmFtZShcInBsdWdpbjp3aXRoSG90S2V5c1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVdpdGhIb3RrZXlzKGVkaXRvckFjdG9yLCBwb3J0YWJsZVRleHRFZGl0b3IsIGhvdGtleXNGcm9tT3B0aW9ucykge1xuICBjb25zdCByZXNlcnZlZEhvdGtleXMgPSBbXCJlbnRlclwiLCBcInRhYlwiLCBcInNoaWZ0XCIsIFwiZGVsZXRlXCIsIFwiZW5kXCJdLCBhY3RpdmVIb3RrZXlzID0gaG90a2V5c0Zyb21PcHRpb25zID8/IHt9O1xuICByZXR1cm4gZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5wdGVXaXRoSG90S2V5cyA9IChldmVudCkgPT4ge1xuICAgICAgT2JqZWN0LmtleXMoYWN0aXZlSG90a2V5cykuZm9yRWFjaCgoY2F0KSA9PiB7XG4gICAgICAgIGlmIChjYXQgPT09IFwibWFya3NcIilcbiAgICAgICAgICBmb3IgKGNvbnN0IGhvdGtleSBpbiBhY3RpdmVIb3RrZXlzW2NhdF0pIHtcbiAgICAgICAgICAgIGlmIChyZXNlcnZlZEhvdGtleXMuaW5jbHVkZXMoaG90a2V5KSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgaG90a2V5ICR7aG90a2V5fSBpcyByZXNlcnZlZCFgKTtcbiAgICAgICAgICAgIGlmIChpc0hvdGtleShob3RrZXksIGV2ZW50Lm5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZU1hcmsgPSBhY3RpdmVIb3RrZXlzW2NhdF07XG4gICAgICAgICAgICAgIGlmIChwb3NzaWJsZU1hcmspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrID0gcG9zc2libGVNYXJrW2hvdGtleV07XG4gICAgICAgICAgICAgICAgZGVidWckMihgSG90S2V5ICR7aG90a2V5fSB0byB0b2dnbGUgJHttYXJrfWApLCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgICAgICAgICAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkZWNvcmF0b3IudG9nZ2xlXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlY29yYXRvcjogbWFya1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGVkaXRvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBpZiAoY2F0ID09PSBcImN1c3RvbVwiKVxuICAgICAgICAgIGZvciAoY29uc3QgaG90a2V5IGluIGFjdGl2ZUhvdGtleXNbY2F0XSkge1xuICAgICAgICAgICAgaWYgKHJlc2VydmVkSG90a2V5cy5pbmNsdWRlcyhob3RrZXkpKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBob3RrZXkgJHtob3RrZXl9IGlzIHJlc2VydmVkIWApO1xuICAgICAgICAgICAgaWYgKGlzSG90a2V5KGhvdGtleSwgZXZlbnQubmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlQ29tbWFuZCA9IGFjdGl2ZUhvdGtleXNbY2F0XTtcbiAgICAgICAgICAgICAgaWYgKHBvc3NpYmxlQ29tbWFuZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBwb3NzaWJsZUNvbW1hbmRbaG90a2V5XTtcbiAgICAgICAgICAgICAgICBjb21tYW5kKGV2ZW50LCBwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZWRpdG9yO1xuICB9O1xufVxuY29uc3QgZGVidWckMSA9IGRlYnVnV2l0aE5hbWUoXCJwbHVnaW46d2l0aEluc2VydERhdGFcIik7XG5mdW5jdGlvbiBjcmVhdGVXaXRoSW5zZXJ0RGF0YShlZGl0b3JBY3Rvciwgc2NoZW1hVHlwZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVkaXRvcikge1xuICAgIGNvbnN0IGJsb2NrVHlwZU5hbWUgPSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lLCBzcGFuVHlwZU5hbWUgPSBzY2hlbWFUeXBlcy5zcGFuLm5hbWUsIHdoaXRlc3BhY2VPblBhc3RlTW9kZSA9IHNjaGVtYVR5cGVzLmJsb2NrLm9wdGlvbnMudW5zdGFibGVfd2hpdGVzcGFjZU9uUGFzdGVNb2RlLCB0b1BsYWluVGV4dCA9IChibG9ja3MpID0+IGJsb2Nrcy5tYXAoKGJsb2NrKSA9PiBlZGl0b3IuaXNUZXh0QmxvY2soYmxvY2spID8gYmxvY2suY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQuX3R5cGUgPT09IHNwYW5UeXBlTmFtZSA/IGNoaWxkLnRleHQgOiBgWyR7c2NoZW1hVHlwZXMuaW5saW5lT2JqZWN0cy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGNoaWxkLl90eXBlKT8udGl0bGUgfHwgXCJPYmplY3RcIn1dYCkuam9pbihcIlwiKSA6IGBbJHtzY2hlbWFUeXBlcy5ibG9ja09iamVjdHMuZmluZCgodCkgPT4gdC5uYW1lID09PSBibG9jay5fdHlwZSk/LnRpdGxlIHx8IFwiT2JqZWN0XCJ9XWApLmpvaW4oYFxuXG5gKTtcbiAgICByZXR1cm4gZWRpdG9yLnNldEZyYWdtZW50RGF0YSA9IChkYXRhLCBvcmlnaW5FdmVudCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzZWxlY3Rpb25cbiAgICAgIH0gPSBlZGl0b3I7XG4gICAgICBpZiAoIXNlbGVjdGlvbilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgW3N0YXJ0LCBlbmRdID0gUmFuZ2UuZWRnZXMoc2VsZWN0aW9uKSwgc3RhcnRWb2lkID0gRWRpdG9yLnZvaWQoZWRpdG9yLCB7XG4gICAgICAgIGF0OiBzdGFydC5wYXRoXG4gICAgICB9KSwgZW5kVm9pZCA9IEVkaXRvci52b2lkKGVkaXRvciwge1xuICAgICAgICBhdDogZW5kLnBhdGhcbiAgICAgIH0pO1xuICAgICAgaWYgKFJhbmdlLmlzQ29sbGFwc2VkKHNlbGVjdGlvbikgJiYgIXN0YXJ0Vm9pZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgZG9tUmFuZ2UgPSBSZWFjdEVkaXRvci50b0RPTVJhbmdlKGVkaXRvciwgc2VsZWN0aW9uKTtcbiAgICAgIGxldCBjb250ZW50cyA9IGRvbVJhbmdlLmNsb25lQ29udGVudHMoKTtcbiAgICAgIGlmIChlbmRWb2lkKSB7XG4gICAgICAgIGNvbnN0IFt2b2lkTm9kZV0gPSBlbmRWb2lkLCByID0gZG9tUmFuZ2UuY2xvbmVSYW5nZSgpLCBkb21Ob2RlID0gUmVhY3RFZGl0b3IudG9ET01Ob2RlKGVkaXRvciwgdm9pZE5vZGUpO1xuICAgICAgICByLnNldEVuZEFmdGVyKGRvbU5vZGUpLCBjb250ZW50cyA9IHIuY2xvbmVDb250ZW50cygpO1xuICAgICAgfVxuICAgICAgQXJyYXkuZnJvbShjb250ZW50cy5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtc2xhdGUtemVyby13aWR0aF1cIikpLmZvckVhY2goKHp3KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzTmV3bGluZSA9IHp3LmdldEF0dHJpYnV0ZShcImRhdGEtc2xhdGUtemVyby13aWR0aFwiKSA9PT0gXCJuXCI7XG4gICAgICAgIHp3LnRleHRDb250ZW50ID0gaXNOZXdsaW5lID8gYFxuYCA6IFwiXCI7XG4gICAgICB9KSwgQXJyYXkuZnJvbShjb250ZW50cy5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSkuZm9yRWFjaCgoZWxtKSA9PiB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJjb250ZW50RWRpdGFibGVcIiksIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNsYXRlLWlubGluZVwiKSwgZWxtLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2xhdGUtbGVhZlwiKSwgZWxtLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2xhdGUtbm9kZVwiKSwgZWxtLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc2xhdGUtc3BhY2VyXCIpLCBlbG0ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zbGF0ZS1zdHJpbmdcIiksIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNsYXRlLXplcm8td2lkdGhcIiksIGVsbS5yZW1vdmVBdHRyaWJ1dGUoXCJkcmFnZ2FibGVcIik7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGVsbS5hdHRyaWJ1dGVzKVxuICAgICAgICAgIGVsbS5oYXNBdHRyaWJ1dGUoa2V5KSAmJiBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGRpdiA9IGNvbnRlbnRzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChjb250ZW50cyksIGRpdi5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJ0cnVlXCIpLCBjb250ZW50cy5vd25lckRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgIGNvbnN0IGFzSFRNTCA9IGRpdi5pbm5lckhUTUw7XG4gICAgICBjb250ZW50cy5vd25lckRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgIGNvbnN0IGZyYWdtZW50ID0gZWRpdG9yLmdldEZyYWdtZW50KCksIHBvcnRhYmxlVGV4dCA9IGZyb21TbGF0ZVZhbHVlKGZyYWdtZW50LCBibG9ja1R5cGVOYW1lKSwgYXNKU09OID0gSlNPTi5zdHJpbmdpZnkocG9ydGFibGVUZXh0KSwgYXNQbGFpblRleHQgPSB0b1BsYWluVGV4dChwb3J0YWJsZVRleHQpO1xuICAgICAgZGF0YS5jbGVhckRhdGEoKSwgZGF0YS5zZXREYXRhKFwidGV4dC9wbGFpblwiLCBhc1BsYWluVGV4dCksIGRhdGEuc2V0RGF0YShcInRleHQvaHRtbFwiLCBhc0hUTUwpLCBkYXRhLnNldERhdGEoXCJhcHBsaWNhdGlvbi9qc29uXCIsIGFzSlNPTiksIGRhdGEuc2V0RGF0YShcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dFwiLCBhc0pTT04pLCBkZWJ1ZyQxKFwidGV4dFwiLCBhc1BsYWluVGV4dCksIGRhdGEuc2V0RGF0YShcImFwcGxpY2F0aW9uL3gtcG9ydGFibGUtdGV4dC1ldmVudC1vcmlnaW5cIiwgb3JpZ2luRXZlbnQgfHwgXCJleHRlcm5hbFwiKSwgZGVidWckMShcIlNldCBmcmFnbWVudCBkYXRhXCIsIGFzSlNPTiwgYXNIVE1MKTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0UG9ydGFibGVUZXh0RGF0YSA9IChkYXRhKSA9PiB7XG4gICAgICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGNvbnN0IHBUZXh0ID0gZGF0YS5nZXREYXRhKFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIpLCBvcmlnaW4gPSBkYXRhLmdldERhdGEoXCJhcHBsaWNhdGlvbi94LXBvcnRhYmxlLXRleHQtZXZlbnQtb3JpZ2luXCIpO1xuICAgICAgaWYgKGRlYnVnJDEoYEluc2VydGluZyBwb3J0YWJsZSB0ZXh0IGZyb20gJHtvcmlnaW59IGV2ZW50YCwgcFRleHQpLCBwVGV4dCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHBUZXh0KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkKSAmJiBwYXJzZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHNsYXRlVmFsdWUgPSBfcmVnZW5lcmF0ZUtleXMoZWRpdG9yLCB0b1NsYXRlVmFsdWUocGFyc2VkLCB7XG4gICAgICAgICAgICBzY2hlbWFUeXBlc1xuICAgICAgICAgIH0pLCBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yLCBzcGFuVHlwZU5hbWUsIHNjaGVtYVR5cGVzKSwgdmFsaWRhdGlvbiA9IHZhbGlkYXRlVmFsdWUocGFyc2VkLCBzY2hlbWFUeXBlcywgZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvcik7XG4gICAgICAgICAgaWYgKCF2YWxpZGF0aW9uLnZhbGlkICYmICF2YWxpZGF0aW9uLnJlc29sdXRpb24/LmF1dG9SZXNvbHZlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckRlc2NyaXB0aW9uID0gYCR7dmFsaWRhdGlvbi5yZXNvbHV0aW9uPy5kZXNjcmlwdGlvbn1gO1xuICAgICAgICAgICAgcmV0dXJuIGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgIG5hbWU6IFwicGFzdGVFcnJvclwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3JEZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgZGF0YTogdmFsaWRhdGlvblxuICAgICAgICAgICAgfSksIGRlYnVnJDEoXCJJbnZhbGlkIGluc2VydCByZXN1bHRcIiwgdmFsaWRhdGlvbiksICExO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX2luc2VydEZyYWdtZW50KGVkaXRvciwgc2xhdGVWYWx1ZSwgc2NoZW1hVHlwZXMpLCAhMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sIGVkaXRvci5pbnNlcnRUZXh0T3JIVE1MRGF0YSA9IChkYXRhKSA9PiB7XG4gICAgICBpZiAoIWVkaXRvci5zZWxlY3Rpb24pXG4gICAgICAgIHJldHVybiBkZWJ1ZyQxKFwiTm8gc2VsZWN0aW9uLCBub3QgaW5zZXJ0aW5nXCIpLCAhMTtcbiAgICAgIGNvbnN0IGh0bWwgPSBkYXRhLmdldERhdGEoXCJ0ZXh0L2h0bWxcIiksIHRleHQgPSBkYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpO1xuICAgICAgaWYgKGh0bWwgfHwgdGV4dCkge1xuICAgICAgICBkZWJ1ZyQxKFwiSW5zZXJ0aW5nIGRhdGFcIiwgZGF0YSk7XG4gICAgICAgIGxldCBwb3J0YWJsZVRleHQsIGZyYWdtZW50LCBpbnNlcnRlZFR5cGU7XG4gICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgaWYgKHBvcnRhYmxlVGV4dCA9IGh0bWxUb0Jsb2NrcyhodG1sLCBzY2hlbWFUeXBlcy5wb3J0YWJsZVRleHQsIHtcbiAgICAgICAgICAgIHVuc3RhYmxlX3doaXRlc3BhY2VPblBhc3RlTW9kZTogd2hpdGVzcGFjZU9uUGFzdGVNb2RlLFxuICAgICAgICAgICAga2V5R2VuZXJhdG9yOiBlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLmNvbnRleHQua2V5R2VuZXJhdG9yXG4gICAgICAgICAgfSksIGZyYWdtZW50ID0gdG9TbGF0ZVZhbHVlKHBvcnRhYmxlVGV4dCwge1xuICAgICAgICAgICAgc2NoZW1hVHlwZXNcbiAgICAgICAgICB9KSwgaW5zZXJ0ZWRUeXBlID0gXCJIVE1MXCIsIHBvcnRhYmxlVGV4dC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGV4dFRvSHRtbCA9IGA8aHRtbD48Ym9keT4ke2VzY2FwZUh0bWwodGV4dCkuc3BsaXQoL1xcbnsyLH0vKS5tYXAoKGxpbmUpID0+IGxpbmUgPyBgPHA+JHtsaW5lLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCBcIjxici8+XCIpfTwvcD5gIDogXCI8cD48L3A+XCIpLmpvaW4oXCJcIil9PC9ib2R5PjwvaHRtbD5gO1xuICAgICAgICAgIHBvcnRhYmxlVGV4dCA9IGh0bWxUb0Jsb2Nrcyh0ZXh0VG9IdG1sLCBzY2hlbWFUeXBlcy5wb3J0YWJsZVRleHQsIHtcbiAgICAgICAgICAgIGtleUdlbmVyYXRvcjogZWRpdG9yQWN0b3IuZ2V0U25hcHNob3QoKS5jb250ZXh0LmtleUdlbmVyYXRvclxuICAgICAgICAgIH0pLCBmcmFnbWVudCA9IHRvU2xhdGVWYWx1ZShwb3J0YWJsZVRleHQsIHtcbiAgICAgICAgICAgIHNjaGVtYVR5cGVzXG4gICAgICAgICAgfSksIGluc2VydGVkVHlwZSA9IFwidGV4dFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZVZhbHVlKHBvcnRhYmxlVGV4dCwgc2NoZW1hVHlwZXMsIGVkaXRvckFjdG9yLmdldFNuYXBzaG90KCkuY29udGV4dC5rZXlHZW5lcmF0b3IpO1xuICAgICAgICBpZiAoIXZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgICAgICBjb25zdCBlcnJvckRlc2NyaXB0aW9uID0gYENvdWxkIG5vdCB2YWxpZGF0ZSB0aGUgcmVzdWx0aW5nIHBvcnRhYmxlIHRleHQgdG8gaW5zZXJ0LlxuJHt2YWxpZGF0aW9uLnJlc29sdXRpb24/LmRlc2NyaXB0aW9ufVxuVHJ5IHRvIGluc2VydCBhcyBwbGFpbiB0ZXh0IChzaGlmdC1wYXN0ZSkgaW5zdGVhZC5gO1xuICAgICAgICAgIHJldHVybiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGFzdGVFcnJvclwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGVycm9yRGVzY3JpcHRpb24sXG4gICAgICAgICAgICBkYXRhOiB2YWxpZGF0aW9uXG4gICAgICAgICAgfSksIGRlYnVnJDEoXCJJbnZhbGlkIGluc2VydCByZXN1bHRcIiwgdmFsaWRhdGlvbiksICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWJ1ZyQxKGBJbnNlcnRpbmcgJHtpbnNlcnRlZFR5cGV9IGZyYWdtZW50IGF0ICR7SlNPTi5zdHJpbmdpZnkoZWRpdG9yLnNlbGVjdGlvbil9YCksIF9pbnNlcnRGcmFnbWVudChlZGl0b3IsIGZyYWdtZW50LCBzY2hlbWFUeXBlcyksICEwO1xuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sIGVkaXRvci5pbnNlcnREYXRhID0gKGRhdGEpID0+IHtcbiAgICAgIGVkaXRvci5pbnNlcnRQb3J0YWJsZVRleHREYXRhKGRhdGEpIHx8IGVkaXRvci5pbnNlcnRUZXh0T3JIVE1MRGF0YShkYXRhKTtcbiAgICB9LCBlZGl0b3IuaW5zZXJ0RnJhZ21lbnREYXRhID0gKGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IGZyYWdtZW50ID0gZGF0YS5nZXREYXRhKFwiYXBwbGljYXRpb24veC1wb3J0YWJsZS10ZXh0XCIpO1xuICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoZnJhZ21lbnQpO1xuICAgICAgICByZXR1cm4gZWRpdG9yLmluc2VydEZyYWdtZW50KHBhcnNlZCksICEwO1xuICAgICAgfVxuICAgICAgcmV0dXJuICExO1xuICAgIH0sIGVkaXRvcjtcbiAgfTtcbn1cbmNvbnN0IGVudGl0eU1hcCA9IHtcbiAgXCImXCI6IFwiJmFtcDtcIixcbiAgXCI8XCI6IFwiJmx0O1wiLFxuICBcIj5cIjogXCImZ3Q7XCIsXG4gICdcIic6IFwiJnF1b3Q7XCIsXG4gIFwiJ1wiOiBcIiYjMzk7XCIsXG4gIFwiL1wiOiBcIiYjeDJGO1wiLFxuICBcImBcIjogXCImI3g2MDtcIixcbiAgXCI9XCI6IFwiJiN4M0Q7XCJcbn07XG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cikge1xuICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvWyY8PlwiJ2A9L10vZywgKHMpID0+IGVudGl0eU1hcFtzXSk7XG59XG5mdW5jdGlvbiBfcmVnZW5lcmF0ZUtleXMoZWRpdG9yLCBmcmFnbWVudCwga2V5R2VuZXJhdG9yLCBzcGFuVHlwZU5hbWUsIGVkaXRvclR5cGVzKSB7XG4gIHJldHVybiBmcmFnbWVudC5tYXAoKG5vZGUpID0+IHtcbiAgICBjb25zdCBuZXdOb2RlID0ge1xuICAgICAgLi4ubm9kZVxuICAgIH07XG4gICAgaWYgKGVkaXRvci5pc1RleHRCbG9jayhuZXdOb2RlKSkge1xuICAgICAgY29uc3QgYW5ub3RhdGlvbnMgPSBlZGl0b3JUeXBlcy5hbm5vdGF0aW9ucy5tYXAoKHQpID0+IHQubmFtZSk7XG4gICAgICBpZiAoYW5ub3RhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBtYXJrRGVmcyxcbiAgICAgICAgICAuLi5OZXdOb2RlTm9EZWZzXG4gICAgICAgIH0gPSBuZXdOb2RlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLk5ld05vZGVOb0RlZnMsXG4gICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICgobmV3Tm9kZS5tYXJrRGVmcyB8fCBbXSkuc29tZSgoZGVmKSA9PiAhYW5ub3RhdGlvbnMuaW5jbHVkZXMoZGVmLl90eXBlKSkpIHtcbiAgICAgICAgY29uc3QgYWxsb3dlZEFubm90YXRpb25zID0gKG5ld05vZGUubWFya0RlZnMgfHwgW10pLmZpbHRlcigoZGVmKSA9PiBhbm5vdGF0aW9ucy5pbmNsdWRlcyhkZWYuX3R5cGUpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5uZXdOb2RlLFxuICAgICAgICAgIG1hcmtEZWZzOiBhbGxvd2VkQW5ub3RhdGlvbnMsXG4gICAgICAgICAgX2tleToga2V5R2VuZXJhdG9yKClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG5ld05vZGUubWFya0RlZnMgPSAobmV3Tm9kZS5tYXJrRGVmcyB8fCBbXSkubWFwKChkZWYpID0+IHtcbiAgICAgICAgY29uc3Qgb2xkS2V5ID0gZGVmLl9rZXksIG5ld0tleSA9IGtleUdlbmVyYXRvcigpO1xuICAgICAgICByZXR1cm4gbmV3Tm9kZS5jaGlsZHJlbiA9IG5ld05vZGUuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQuX3R5cGUgPT09IHNwYW5UeXBlTmFtZSAmJiBlZGl0b3IuaXNUZXh0U3BhbihjaGlsZCkgPyB7XG4gICAgICAgICAgLi4uY2hpbGQsXG4gICAgICAgICAgbWFya3M6IGNoaWxkLm1hcmtzICYmIGNoaWxkLm1hcmtzLmluY2x1ZGVzKG9sZEtleSkgPyBbLi4uY2hpbGQubWFya3NdLmZpbHRlcigobWFyaykgPT4gbWFyayAhPT0gb2xkS2V5KS5jb25jYXQobmV3S2V5KSA6IGNoaWxkLm1hcmtzXG4gICAgICAgIH0gOiBjaGlsZCksIHtcbiAgICAgICAgICAuLi5kZWYsXG4gICAgICAgICAgX2tleTogbmV3S2V5XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZVdpdGhOZXdLZXlzID0ge1xuICAgICAgLi4ubmV3Tm9kZSxcbiAgICAgIF9rZXk6IGtleUdlbmVyYXRvcigpXG4gICAgfTtcbiAgICByZXR1cm4gZWRpdG9yLmlzVGV4dEJsb2NrKG5vZGVXaXRoTmV3S2V5cykgJiYgKG5vZGVXaXRoTmV3S2V5cy5jaGlsZHJlbiA9IG5vZGVXaXRoTmV3S2V5cy5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiAoe1xuICAgICAgLi4uY2hpbGQsXG4gICAgICBfa2V5OiBrZXlHZW5lcmF0b3IoKVxuICAgIH0pKSksIG5vZGVXaXRoTmV3S2V5cztcbiAgfSk7XG59XG5mdW5jdGlvbiBfaW5zZXJ0RnJhZ21lbnQoZWRpdG9yLCBmcmFnbWVudCwgc2NoZW1hVHlwZXMpIHtcbiAgZWRpdG9yLndpdGhvdXROb3JtYWxpemluZygoKSA9PiB7XG4gICAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IFtmb2N1c0Jsb2NrLCBmb2N1c1BhdGhdID0gRWRpdG9yLm5vZGUoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uLCB7XG4gICAgICBkZXB0aDogMVxuICAgIH0pO1xuICAgIGlmIChlZGl0b3IuaXNUZXh0QmxvY2soZm9jdXNCbG9jaykgJiYgZWRpdG9yLmlzVGV4dEJsb2NrKGZyYWdtZW50WzBdKSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBtYXJrRGVmc1xuICAgICAgfSA9IGZvY3VzQmxvY2s7XG4gICAgICBkZWJ1ZyQxKFwiTWl4aW5nIG1hcmtEZWZzIG9mIGZvY3VzQmxvY2sgYW5kIGZyYWdtZW50c1swXSBibG9ja1wiLCBtYXJrRGVmcywgZnJhZ21lbnRbMF0ubWFya0RlZnMpLCBpc0VxdWFsKG1hcmtEZWZzLCBmcmFnbWVudFswXS5tYXJrRGVmcykgfHwgVHJhbnNmb3Jtcy5zZXROb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgbWFya0RlZnM6IHVuaXEoWy4uLmZyYWdtZW50WzBdLm1hcmtEZWZzIHx8IFtdLCAuLi5tYXJrRGVmcyB8fCBbXV0pXG4gICAgICB9LCB7XG4gICAgICAgIGF0OiBmb2N1c1BhdGgsXG4gICAgICAgIG1vZGU6IFwibG93ZXN0XCIsXG4gICAgICAgIHZvaWRzOiAhMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlzRXF1YWxUb0VtcHR5RWRpdG9yKGVkaXRvci5jaGlsZHJlbiwgc2NoZW1hVHlwZXMpID8gKFRyYW5zZm9ybXMuc3BsaXROb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBbMCwgMF1cbiAgICB9KSwgZWRpdG9yLmluc2VydEZyYWdtZW50KGZyYWdtZW50KSwgVHJhbnNmb3Jtcy5yZW1vdmVOb2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBbMF1cbiAgICB9KSkgOiBlZGl0b3IuaW5zZXJ0RnJhZ21lbnQoZnJhZ21lbnQpO1xuICB9KSwgZWRpdG9yLm9uQ2hhbmdlKCk7XG59XG5mdW5jdGlvbiB3aXRoU3luY1JhbmdlRGVjb3JhdGlvbnMoe1xuICBlZGl0b3JBY3RvcixcbiAgc2xhdGVFZGl0b3IsXG4gIHN5bmNSYW5nZURlY29yYXRpb25zXG59KSB7XG4gIGNvbnN0IG9yaWdpbmFsQXBwbHkgPSBzbGF0ZUVkaXRvci5hcHBseTtcbiAgcmV0dXJuIHNsYXRlRWRpdG9yLmFwcGx5ID0gKG9wKSA9PiB7XG4gICAgb3JpZ2luYWxBcHBseShvcCksICFlZGl0b3JBY3Rvci5nZXRTbmFwc2hvdCgpLm1hdGNoZXMoe1xuICAgICAgXCJlZGl0IG1vZGVcIjogXCJyZWFkIG9ubHlcIlxuICAgIH0pICYmIG9wLnR5cGUgIT09IFwic2V0X3NlbGVjdGlvblwiICYmIHN5bmNSYW5nZURlY29yYXRpb25zKG9wKTtcbiAgfSwgKCkgPT4ge1xuICAgIHNsYXRlRWRpdG9yLmFwcGx5ID0gb3JpZ2luYWxBcHBseTtcbiAgfTtcbn1cbmNvbnN0IGRlYnVnID0gZGVidWdXaXRoTmFtZShcImNvbXBvbmVudDpFZGl0YWJsZVwiKSwgUExBQ0VIT0xERVJfU1RZTEUgPSB7XG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDBcbn0sIFBvcnRhYmxlVGV4dEVkaXRhYmxlID0gZm9yd2FyZFJlZihmdW5jdGlvbihwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gIGNvbnN0IHtcbiAgICBob3RrZXlzLFxuICAgIG9uQmx1cixcbiAgICBvbkZvY3VzLFxuICAgIG9uQmVmb3JlSW5wdXQsXG4gICAgb25QYXN0ZSxcbiAgICBvbkNvcHksXG4gICAgb25DbGljayxcbiAgICByYW5nZURlY29yYXRpb25zLFxuICAgIHJlbmRlckFubm90YXRpb24sXG4gICAgcmVuZGVyQmxvY2ssXG4gICAgcmVuZGVyQ2hpbGQsXG4gICAgcmVuZGVyRGVjb3JhdG9yLFxuICAgIHJlbmRlckxpc3RJdGVtLFxuICAgIHJlbmRlclBsYWNlaG9sZGVyLFxuICAgIHJlbmRlclN0eWxlLFxuICAgIHNlbGVjdGlvbjogcHJvcHNTZWxlY3Rpb24sXG4gICAgc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcsXG4gICAgc3BlbGxDaGVjayxcbiAgICAuLi5yZXN0UHJvcHNcbiAgfSA9IHByb3BzLCBwb3J0YWJsZVRleHRFZGl0b3IgPSB1c2VQb3J0YWJsZVRleHRFZGl0b3IoKSwgcmVmID0gdXNlUmVmKG51bGwpLCBbZWRpdGFibGVFbGVtZW50LCBzZXRFZGl0YWJsZUVsZW1lbnRdID0gdXNlU3RhdGUobnVsbCksIFtoYXNJbnZhbGlkVmFsdWUsIHNldEhhc0ludmFsaWRWYWx1ZV0gPSB1c2VTdGF0ZSghMSksIFtyYW5nZURlY29yYXRpb25TdGF0ZSwgc2V0UmFuZ2VEZWNvcmF0aW9uc1N0YXRlXSA9IHVzZVN0YXRlKFtdKTtcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShmb3J3YXJkZWRSZWYsICgpID0+IHJlZi5jdXJyZW50KTtcbiAgY29uc3QgcmFuZ2VEZWNvcmF0aW9uc1JlZiA9IHVzZVJlZihyYW5nZURlY29yYXRpb25zKSwgZWRpdG9yQWN0b3IgPSB1c2VDb250ZXh0KEVkaXRvckFjdG9yQ29udGV4dCksIHJlYWRPbmx5ID0gdXNlU2VsZWN0b3IoZWRpdG9yQWN0b3IsIChzKSA9PiBzLm1hdGNoZXMoe1xuICAgIFwiZWRpdCBtb2RlXCI6IFwicmVhZCBvbmx5XCJcbiAgfSkpLCBzY2hlbWFUeXBlcyA9IHVzZVNlbGVjdG9yKGVkaXRvckFjdG9yLCAoc18wKSA9PiBzXzAuY29udGV4dC5zY2hlbWEpLCBzbGF0ZUVkaXRvciA9IHVzZVNsYXRlKCksIGJsb2NrVHlwZU5hbWUgPSBzY2hlbWFUeXBlcy5ibG9jay5uYW1lO1xuICB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCB3aXRoSW5zZXJ0RGF0YSA9IGNyZWF0ZVdpdGhJbnNlcnREYXRhKGVkaXRvckFjdG9yLCBzY2hlbWFUeXBlcyk7XG4gICAgaWYgKHJlYWRPbmx5KVxuICAgICAgcmV0dXJuIGRlYnVnKFwiRWRpdGFibGUgaXMgaW4gcmVhZCBvbmx5IG1vZGVcIiksIHdpdGhJbnNlcnREYXRhKHNsYXRlRWRpdG9yKTtcbiAgICBjb25zdCB3aXRoSG90S2V5cyA9IGNyZWF0ZVdpdGhIb3RrZXlzKGVkaXRvckFjdG9yLCBwb3J0YWJsZVRleHRFZGl0b3IsIGhvdGtleXMpO1xuICAgIHJldHVybiBkZWJ1ZyhcIkVkaXRhYmxlIGlzIGluIGVkaXQgbW9kZVwiKSwgd2l0aEluc2VydERhdGEod2l0aEhvdEtleXMoc2xhdGVFZGl0b3IpKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBob3RrZXlzLCBwb3J0YWJsZVRleHRFZGl0b3IsIHJlYWRPbmx5LCBzY2hlbWFUeXBlcywgc2xhdGVFZGl0b3JdKTtcbiAgY29uc3QgcmVuZGVyRWxlbWVudCA9IHVzZUNhbGxiYWNrKChlUHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBqc3goRWxlbWVudCwgeyAuLi5lUHJvcHMsIHJlYWRPbmx5LCByZW5kZXJCbG9jaywgcmVuZGVyQ2hpbGQsIHJlbmRlckxpc3RJdGVtLCByZW5kZXJTdHlsZSwgc2NoZW1hVHlwZXMsIHNwZWxsQ2hlY2sgfSksIFtzY2hlbWFUeXBlcywgc3BlbGxDaGVjaywgcmVhZE9ubHksIHJlbmRlckJsb2NrLCByZW5kZXJDaGlsZCwgcmVuZGVyTGlzdEl0ZW0sIHJlbmRlclN0eWxlXSksIHJlbmRlckxlYWYgPSB1c2VDYWxsYmFjaygobFByb3BzKSA9PiB7XG4gICAgaWYgKGxQcm9wcy5sZWFmLl90eXBlID09PSBcInNwYW5cIikge1xuICAgICAgbGV0IHJlbmRlcmVkID0gLyogQF9fUFVSRV9fICovIGpzeChMZWFmLCB7IC4uLmxQcm9wcywgZWRpdG9yQWN0b3IsIHNjaGVtYVR5cGVzLCByZW5kZXJBbm5vdGF0aW9uLCByZW5kZXJDaGlsZCwgcmVuZGVyRGVjb3JhdG9yLCByZWFkT25seSB9KTtcbiAgICAgIGlmIChyZW5kZXJQbGFjZWhvbGRlciAmJiBsUHJvcHMubGVhZi5wbGFjZWhvbGRlciAmJiBsUHJvcHMudGV4dC50ZXh0ID09PSBcIlwiKVxuICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHMoRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4KFwic3BhblwiLCB7IHN0eWxlOiBQTEFDRUhPTERFUl9TVFlMRSwgY29udGVudEVkaXRhYmxlOiAhMSwgY2hpbGRyZW46IHJlbmRlclBsYWNlaG9sZGVyKCkgfSksXG4gICAgICAgICAgcmVuZGVyZWRcbiAgICAgICAgXSB9KTtcbiAgICAgIGNvbnN0IGRlY29yYXRpb24gPSBsUHJvcHMubGVhZi5yYW5nZURlY29yYXRpb247XG4gICAgICByZXR1cm4gZGVjb3JhdGlvbiAmJiAocmVuZGVyZWQgPSBkZWNvcmF0aW9uLmNvbXBvbmVudCh7XG4gICAgICAgIGNoaWxkcmVuOiByZW5kZXJlZFxuICAgICAgfSkpLCByZW5kZXJlZDtcbiAgICB9XG4gICAgcmV0dXJuIGxQcm9wcy5jaGlsZHJlbjtcbiAgfSwgW2VkaXRvckFjdG9yLCByZWFkT25seSwgcmVuZGVyQW5ub3RhdGlvbiwgcmVuZGVyQ2hpbGQsIHJlbmRlckRlY29yYXRvciwgcmVuZGVyUGxhY2Vob2xkZXIsIHNjaGVtYVR5cGVzXSksIHJlc3RvcmVTZWxlY3Rpb25Gcm9tUHJvcHMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHByb3BzU2VsZWN0aW9uKSB7XG4gICAgICBkZWJ1ZyhgU2VsZWN0aW9uIGZyb20gcHJvcHMgJHtKU09OLnN0cmluZ2lmeShwcm9wc1NlbGVjdGlvbil9YCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkU2VsZWN0aW9uID0gbm9ybWFsaXplU2VsZWN0aW9uKHByb3BzU2VsZWN0aW9uLCBmcm9tU2xhdGVWYWx1ZShzbGF0ZUVkaXRvci5jaGlsZHJlbiwgYmxvY2tUeXBlTmFtZSkpO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRTZWxlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgZGVidWcoYE5vcm1hbGl6ZWQgc2VsZWN0aW9uIGZyb20gcHJvcHMgJHtKU09OLnN0cmluZ2lmeShub3JtYWxpemVkU2VsZWN0aW9uKX1gKTtcbiAgICAgICAgY29uc3Qgc2xhdGVSYW5nZSA9IHRvU2xhdGVSYW5nZShub3JtYWxpemVkU2VsZWN0aW9uLCBzbGF0ZUVkaXRvcik7XG4gICAgICAgIHNsYXRlUmFuZ2UgJiYgKFRyYW5zZm9ybXMuc2VsZWN0KHNsYXRlRWRpdG9yLCBzbGF0ZVJhbmdlKSwgc2xhdGVFZGl0b3Iub3BlcmF0aW9ucy5zb21lKChvKSA9PiBvLnR5cGUgPT09IFwic2V0X3NlbGVjdGlvblwiKSB8fCBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcInNlbGVjdGlvblwiLFxuICAgICAgICAgIHNlbGVjdGlvbjogbm9ybWFsaXplZFNlbGVjdGlvblxuICAgICAgICB9KSwgc2xhdGVFZGl0b3Iub25DaGFuZ2UoKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tUeXBlTmFtZSwgZWRpdG9yQWN0b3IsIHByb3BzU2VsZWN0aW9uLCBzbGF0ZUVkaXRvcl0pLCBzeW5jUmFuZ2VEZWNvcmF0aW9ucyA9IHVzZUNhbGxiYWNrKChvcGVyYXRpb24pID0+IHtcbiAgICBpZiAocmFuZ2VEZWNvcmF0aW9ucyAmJiByYW5nZURlY29yYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG5ld1NsYXRlUmFuZ2VzID0gW107XG4gICAgICBpZiAocmFuZ2VEZWNvcmF0aW9ucy5mb3JFYWNoKChyYW5nZURlY29yYXRpb25JdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IHNsYXRlUmFuZ2VfMCA9IHRvU2xhdGVSYW5nZShyYW5nZURlY29yYXRpb25JdGVtLnNlbGVjdGlvbiwgc2xhdGVFZGl0b3IpO1xuICAgICAgICBpZiAoIVJhbmdlLmlzUmFuZ2Uoc2xhdGVSYW5nZV8wKSkge1xuICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbkl0ZW0ub25Nb3ZlZCAmJiByYW5nZURlY29yYXRpb25JdGVtLm9uTW92ZWQoe1xuICAgICAgICAgICAgbmV3U2VsZWN0aW9uOiBudWxsLFxuICAgICAgICAgICAgcmFuZ2VEZWNvcmF0aW9uOiByYW5nZURlY29yYXRpb25JdGVtLFxuICAgICAgICAgICAgb3JpZ2luOiBcImxvY2FsXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld1JhbmdlO1xuICAgICAgICBpZiAob3BlcmF0aW9uICYmIChuZXdSYW5nZSA9IG1vdmVSYW5nZUJ5T3BlcmF0aW9uKHNsYXRlUmFuZ2VfMCwgb3BlcmF0aW9uKSwgbmV3UmFuZ2UgJiYgbmV3UmFuZ2UgIT09IHNsYXRlUmFuZ2VfMCB8fCBuZXdSYW5nZSA9PT0gbnVsbCAmJiBzbGF0ZVJhbmdlXzApKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBQb3J0YWJsZVRleHRFZGl0b3IuZ2V0VmFsdWUocG9ydGFibGVUZXh0RWRpdG9yKSwgbmV3UmFuZ2VTZWxlY3Rpb24gPSB0b1BvcnRhYmxlVGV4dFJhbmdlKHZhbHVlLCBuZXdSYW5nZSwgc2NoZW1hVHlwZXMpO1xuICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbkl0ZW0ub25Nb3ZlZCAmJiByYW5nZURlY29yYXRpb25JdGVtLm9uTW92ZWQoe1xuICAgICAgICAgICAgbmV3U2VsZWN0aW9uOiBuZXdSYW5nZVNlbGVjdGlvbixcbiAgICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbjogcmFuZ2VEZWNvcmF0aW9uSXRlbSxcbiAgICAgICAgICAgIG9yaWdpbjogXCJsb2NhbFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3UmFuZ2UgIT09IG51bGwgJiYgbmV3U2xhdGVSYW5nZXMucHVzaCh7XG4gICAgICAgICAgLi4ubmV3UmFuZ2UgfHwgc2xhdGVSYW5nZV8wLFxuICAgICAgICAgIHJhbmdlRGVjb3JhdGlvbjogcmFuZ2VEZWNvcmF0aW9uSXRlbVxuICAgICAgICB9KTtcbiAgICAgIH0pLCBuZXdTbGF0ZVJhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNldFJhbmdlRGVjb3JhdGlvbnNTdGF0ZShuZXdTbGF0ZVJhbmdlcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0UmFuZ2VEZWNvcmF0aW9uc1N0YXRlKChyYW5nZURlY29yYXRpb25TdGF0ZV8wKSA9PiByYW5nZURlY29yYXRpb25TdGF0ZV8wLmxlbmd0aCA+IDAgPyBbXSA6IHJhbmdlRGVjb3JhdGlvblN0YXRlXzApO1xuICB9LCBbcG9ydGFibGVUZXh0RWRpdG9yLCByYW5nZURlY29yYXRpb25zLCBzY2hlbWFUeXBlcywgc2xhdGVFZGl0b3JdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvblJlYWR5ID0gZWRpdG9yQWN0b3Iub24oXCJyZWFkeVwiLCAoKSA9PiB7XG4gICAgICBzeW5jUmFuZ2VEZWNvcmF0aW9ucygpLCByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzKCk7XG4gICAgfSksIG9uSW52YWxpZFZhbHVlID0gZWRpdG9yQWN0b3Iub24oXCJpbnZhbGlkIHZhbHVlXCIsICgpID0+IHtcbiAgICAgIHNldEhhc0ludmFsaWRWYWx1ZSghMCk7XG4gICAgfSksIG9uVmFsdWVDaGFuZ2VkID0gZWRpdG9yQWN0b3Iub24oXCJ2YWx1ZSBjaGFuZ2VkXCIsICgpID0+IHtcbiAgICAgIHNldEhhc0ludmFsaWRWYWx1ZSghMSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG9uUmVhZHkudW5zdWJzY3JpYmUoKSwgb25JbnZhbGlkVmFsdWUudW5zdWJzY3JpYmUoKSwgb25WYWx1ZUNoYW5nZWQudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbZWRpdG9yQWN0b3IsIHJlc3RvcmVTZWxlY3Rpb25Gcm9tUHJvcHMsIHN5bmNSYW5nZURlY29yYXRpb25zXSksIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvcHNTZWxlY3Rpb24gJiYgIWhhc0ludmFsaWRWYWx1ZSAmJiByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzKCk7XG4gIH0sIFtoYXNJbnZhbGlkVmFsdWUsIHByb3BzU2VsZWN0aW9uLCByZXN0b3JlU2VsZWN0aW9uRnJvbVByb3BzXSk7XG4gIGNvbnN0IFtzeW5jZWRSYW5nZURlY29yYXRpb25zLCBzZXRTeW5jZWRSYW5nZURlY29yYXRpb25zXSA9IHVzZVN0YXRlKCExKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzeW5jZWRSYW5nZURlY29yYXRpb25zIHx8IChzZXRTeW5jZWRSYW5nZURlY29yYXRpb25zKCEwKSwgc3luY1JhbmdlRGVjb3JhdGlvbnMoKSk7XG4gIH0sIFtzeW5jUmFuZ2VEZWNvcmF0aW9ucywgc3luY2VkUmFuZ2VEZWNvcmF0aW9uc10pLCB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlzRXF1YWwocmFuZ2VEZWNvcmF0aW9ucywgcmFuZ2VEZWNvcmF0aW9uc1JlZi5jdXJyZW50KSB8fCBzeW5jUmFuZ2VEZWNvcmF0aW9ucygpLCByYW5nZURlY29yYXRpb25zUmVmLmN1cnJlbnQgPSByYW5nZURlY29yYXRpb25zO1xuICB9LCBbcmFuZ2VEZWNvcmF0aW9ucywgc3luY1JhbmdlRGVjb3JhdGlvbnNdKSwgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB0ZWFyZG93biA9IHdpdGhTeW5jUmFuZ2VEZWNvcmF0aW9ucyh7XG4gICAgICBlZGl0b3JBY3RvcixcbiAgICAgIHNsYXRlRWRpdG9yLFxuICAgICAgc3luY1JhbmdlRGVjb3JhdGlvbnNcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gdGVhcmRvd24oKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBzbGF0ZUVkaXRvciwgc3luY1JhbmdlRGVjb3JhdGlvbnNdKTtcbiAgY29uc3QgaGFuZGxlQ29weSA9IHVzZUNhbGxiYWNrKChldmVudCkgPT4ge1xuICAgIG9uQ29weSA/IG9uQ29weShldmVudCkgIT09IHZvaWQgMCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpIDogZXZlbnQubmF0aXZlRXZlbnQuY2xpcGJvYXJkRGF0YSAmJiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgdHlwZTogXCJjb3B5XCIsXG4gICAgICAgIGRhdGE6IGV2ZW50Lm5hdGl2ZUV2ZW50LmNsaXBib2FyZERhdGFcbiAgICAgIH0sXG4gICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLFxuICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50XG4gICAgfSk7XG4gIH0sIFtvbkNvcHksIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVQYXN0ZSA9IHVzZUNhbGxiYWNrKChldmVudF8wKSA9PiB7XG4gICAgY29uc3QgdmFsdWVfMCA9IFBvcnRhYmxlVGV4dEVkaXRvci5nZXRWYWx1ZShwb3J0YWJsZVRleHRFZGl0b3IpLCBwYXRoID0gdG9Qb3J0YWJsZVRleHRSYW5nZSh2YWx1ZV8wLCBzbGF0ZUVkaXRvci5zZWxlY3Rpb24sIHNjaGVtYVR5cGVzKT8uZm9jdXMucGF0aCB8fCBbXSwgb25QYXN0ZVJlc3VsdCA9IG9uUGFzdGU/Lih7XG4gICAgICBldmVudDogZXZlbnRfMCxcbiAgICAgIHZhbHVlOiB2YWx1ZV8wLFxuICAgICAgcGF0aCxcbiAgICAgIHNjaGVtYVR5cGVzXG4gICAgfSk7XG4gICAgb25QYXN0ZVJlc3VsdCB8fCAhc2xhdGVFZGl0b3Iuc2VsZWN0aW9uID8gKGV2ZW50XzAucHJldmVudERlZmF1bHQoKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImxvYWRpbmdcIlxuICAgIH0pLCBQcm9taXNlLnJlc29sdmUob25QYXN0ZVJlc3VsdCkudGhlbigocmVzdWx0XzApID0+IHtcbiAgICAgIGRlYnVnKFwiQ3VzdG9tIHBhc3RlIGZ1bmN0aW9uIGZyb20gY2xpZW50IHJlc29sdmVkXCIsIHJlc3VsdF8wKSwgIXJlc3VsdF8wIHx8ICFyZXN1bHRfMC5pbnNlcnQgPyAoZGVidWcoXCJObyByZXN1bHQgZnJvbSBjdXN0b20gcGFzdGUgaGFuZGxlciwgcGFzdGluZyBub3JtYWxseVwiKSwgc2xhdGVFZGl0b3IuaW5zZXJ0RGF0YShldmVudF8wLmNsaXBib2FyZERhdGEpKSA6IHJlc3VsdF8wLmluc2VydCA/IHNsYXRlRWRpdG9yLmluc2VydEZyYWdtZW50KHRvU2xhdGVWYWx1ZShyZXN1bHRfMC5pbnNlcnQsIHtcbiAgICAgICAgc2NoZW1hVHlwZXNcbiAgICAgIH0pKSA6IGNvbnNvbGUud2FybihcIllvdXIgb25QYXN0ZSBmdW5jdGlvbiByZXR1cm5lZCBzb21ldGhpbmcgdW5leHBlY3RlZDpcIiwgcmVzdWx0XzApO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4gKGNvbnNvbGUuZXJyb3IoZXJyb3IpLCBlcnJvcikpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiZG9uZSBsb2FkaW5nXCJcbiAgICAgIH0pO1xuICAgIH0pKSA6IGV2ZW50XzAubmF0aXZlRXZlbnQuY2xpcGJvYXJkRGF0YSAmJiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgIHR5cGU6IFwiYmVoYXZpb3IgZXZlbnRcIixcbiAgICAgIGJlaGF2aW9yRXZlbnQ6IHtcbiAgICAgICAgdHlwZTogXCJwYXN0ZVwiLFxuICAgICAgICBkYXRhOiBldmVudF8wLm5hdGl2ZUV2ZW50LmNsaXBib2FyZERhdGFcbiAgICAgIH0sXG4gICAgICBlZGl0b3I6IHNsYXRlRWRpdG9yLFxuICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50XzBcbiAgICB9KSwgZGVidWcoXCJObyByZXN1bHQgZnJvbSBjdXN0b20gcGFzdGUgaGFuZGxlciwgcGFzdGluZyBub3JtYWxseVwiKTtcbiAgfSwgW2VkaXRvckFjdG9yLCBvblBhc3RlLCBwb3J0YWJsZVRleHRFZGl0b3IsIHNjaGVtYVR5cGVzLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVPbkZvY3VzID0gdXNlQ2FsbGJhY2soKGV2ZW50XzEpID0+IHtcbiAgICBpZiAob25Gb2N1cyAmJiBvbkZvY3VzKGV2ZW50XzEpLCAhZXZlbnRfMS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uID0gUG9ydGFibGVUZXh0RWRpdG9yLmdldFNlbGVjdGlvbihwb3J0YWJsZVRleHRFZGl0b3IpO1xuICAgICAgc2VsZWN0aW9uID09PSBudWxsICYmIChUcmFuc2Zvcm1zLnNlbGVjdChzbGF0ZUVkaXRvciwgRWRpdG9yLnN0YXJ0KHNsYXRlRWRpdG9yLCBbXSkpLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKSwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiZm9jdXNlZFwiLFxuICAgICAgICBldmVudDogZXZlbnRfMVxuICAgICAgfSk7XG4gICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBQb3J0YWJsZVRleHRFZGl0b3IuZ2V0U2VsZWN0aW9uKHBvcnRhYmxlVGV4dEVkaXRvcik7XG4gICAgICBzZWxlY3Rpb24gPT09IG5ld1NlbGVjdGlvbiAmJiBlZGl0b3JBY3Rvci5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJzZWxlY3Rpb25cIixcbiAgICAgICAgc2VsZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtlZGl0b3JBY3Rvciwgb25Gb2N1cywgcG9ydGFibGVUZXh0RWRpdG9yLCBzbGF0ZUVkaXRvcl0pLCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKChldmVudF8yKSA9PiB7XG4gICAgb25DbGljayAmJiBvbkNsaWNrKGV2ZW50XzIpO1xuICAgIGNvbnN0IGZvY3VzQmxvY2tQYXRoID0gc2xhdGVFZGl0b3Iuc2VsZWN0aW9uID8gc2xhdGVFZGl0b3Iuc2VsZWN0aW9uLmZvY3VzLnBhdGguc2xpY2UoMCwgMSkgOiB2b2lkIDAsIGZvY3VzQmxvY2sgPSBmb2N1c0Jsb2NrUGF0aCA/IE5vZGUuZGVzY2VuZGFudChzbGF0ZUVkaXRvciwgZm9jdXNCbG9ja1BhdGgpIDogdm9pZCAwLCBbXywgbGFzdE5vZGVQYXRoXSA9IE5vZGUubGFzdChzbGF0ZUVkaXRvciwgW10pLCBsYXN0QmxvY2tQYXRoID0gbGFzdE5vZGVQYXRoLnNsaWNlKDAsIDEpLCBsYXN0Tm9kZUZvY3VzZWQgPSBmb2N1c0Jsb2NrUGF0aCA/IFBhdGguZXF1YWxzKGxhc3RCbG9ja1BhdGgsIGZvY3VzQmxvY2tQYXRoKSA6ICExLCBsYXN0QmxvY2tJc1ZvaWQgPSBmb2N1c0Jsb2NrID8gIXNsYXRlRWRpdG9yLmlzVGV4dEJsb2NrKGZvY3VzQmxvY2spIDogITE7XG4gICAgc2xhdGVFZGl0b3Iuc2VsZWN0aW9uICYmIFJhbmdlLmlzQ29sbGFwc2VkKHNsYXRlRWRpdG9yLnNlbGVjdGlvbikgJiYgbGFzdE5vZGVGb2N1c2VkICYmIGxhc3RCbG9ja0lzVm9pZCAmJiAoVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhzbGF0ZUVkaXRvciwgc2xhdGVFZGl0b3IucHRlQ3JlYXRlVGV4dEJsb2NrKHtcbiAgICAgIGRlY29yYXRvcnM6IFtdXG4gICAgfSkpLCBzbGF0ZUVkaXRvci5vbkNoYW5nZSgpKTtcbiAgfSwgW29uQ2xpY2ssIHNsYXRlRWRpdG9yXSksIGhhbmRsZU9uQmx1ciA9IHVzZUNhbGxiYWNrKChldmVudF8zKSA9PiB7XG4gICAgb25CbHVyICYmIG9uQmx1cihldmVudF8zKSwgZXZlbnRfMy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpIHx8IGVkaXRvckFjdG9yLnNlbmQoe1xuICAgICAgdHlwZTogXCJibHVycmVkXCIsXG4gICAgICBldmVudDogZXZlbnRfM1xuICAgIH0pO1xuICB9LCBbZWRpdG9yQWN0b3IsIG9uQmx1cl0pLCBoYW5kbGVPbkJlZm9yZUlucHV0ID0gdXNlQ2FsbGJhY2soKGV2ZW50XzQpID0+IHtcbiAgICBvbkJlZm9yZUlucHV0ICYmIG9uQmVmb3JlSW5wdXQoZXZlbnRfNCk7XG4gIH0sIFtvbkJlZm9yZUlucHV0XSksIHZhbGlkYXRlU2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghc2xhdGVFZGl0b3Iuc2VsZWN0aW9uKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHJvb3QgPSBSZWFjdEVkaXRvci5maW5kRG9jdW1lbnRPclNoYWRvd1Jvb3Qoc2xhdGVFZGl0b3IpLCB7XG4gICAgICBhY3RpdmVFbGVtZW50XG4gICAgfSA9IHJvb3Q7XG4gICAgaWYgKHJlZi5jdXJyZW50ICE9PSBhY3RpdmVFbGVtZW50KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbVNlbGVjdGlvbiA9IFJlYWN0RWRpdG9yLmdldFdpbmRvdyhzbGF0ZUVkaXRvcikuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCFkb21TZWxlY3Rpb24gfHwgZG9tU2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgZXhpc3RpbmdET01SYW5nZSA9IGRvbVNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBuZXdET01SYW5nZSA9IFJlYWN0RWRpdG9yLnRvRE9NUmFuZ2Uoc2xhdGVFZGl0b3IsIHNsYXRlRWRpdG9yLnNlbGVjdGlvbik7XG4gICAgICAobmV3RE9NUmFuZ2Uuc3RhcnRPZmZzZXQgIT09IGV4aXN0aW5nRE9NUmFuZ2Uuc3RhcnRPZmZzZXQgfHwgbmV3RE9NUmFuZ2UuZW5kT2Zmc2V0ICE9PSBleGlzdGluZ0RPTVJhbmdlLmVuZE9mZnNldCkgJiYgKGRlYnVnKFwiRE9NIHJhbmdlIG91dCBvZiBzeW5jLCB2YWxpZGF0aW5nIHNlbGVjdGlvblwiKSwgZG9tU2VsZWN0aW9uPy5yZW1vdmVBbGxSYW5nZXMoKSwgZG9tU2VsZWN0aW9uLmFkZFJhbmdlKG5ld0RPTVJhbmdlKSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBkZWJ1ZyhcIkNvdWxkIG5vdCByZXNvbHZlIHNlbGVjdGlvbiwgc2VsZWN0aW5nIHRvcCBkb2N1bWVudFwiKSwgVHJhbnNmb3Jtcy5kZXNlbGVjdChzbGF0ZUVkaXRvciksIHNsYXRlRWRpdG9yLmNoaWxkcmVuLmxlbmd0aCA+IDAgJiYgVHJhbnNmb3Jtcy5zZWxlY3Qoc2xhdGVFZGl0b3IsIFswLCAwXSksIHNsYXRlRWRpdG9yLm9uQ2hhbmdlKCk7XG4gICAgfVxuICB9LCBbcmVmLCBzbGF0ZUVkaXRvcl0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlZGl0YWJsZUVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IG11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih2YWxpZGF0ZVNlbGVjdGlvbik7XG4gICAgICByZXR1cm4gbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKGVkaXRhYmxlRWxlbWVudCwge1xuICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogITEsXG4gICAgICAgIGF0dHJpYnV0ZXM6ICExLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiAhMSxcbiAgICAgICAgY2hpbGRMaXN0OiAhMCxcbiAgICAgICAgc3VidHJlZTogITBcbiAgICAgIH0pLCAoKSA9PiB7XG4gICAgICAgIG11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFt2YWxpZGF0ZVNlbGVjdGlvbiwgZWRpdGFibGVFbGVtZW50XSk7XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VDYWxsYmFjaygoZXZlbnRfNSkgPT4ge1xuICAgIHByb3BzLm9uS2V5RG93biAmJiBwcm9wcy5vbktleURvd24oZXZlbnRfNSksIGV2ZW50XzUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgc2xhdGVFZGl0b3IucHRlV2l0aEhvdEtleXMoZXZlbnRfNSksIGV2ZW50XzUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwia2V5LmRvd25cIixcbiAgICAgICAga2V5Ym9hcmRFdmVudDoge1xuICAgICAgICAgIGtleTogZXZlbnRfNS5rZXksXG4gICAgICAgICAgY29kZTogZXZlbnRfNS5jb2RlLFxuICAgICAgICAgIGFsdEtleTogZXZlbnRfNS5hbHRLZXksXG4gICAgICAgICAgY3RybEtleTogZXZlbnRfNS5jdHJsS2V5LFxuICAgICAgICAgIG1ldGFLZXk6IGV2ZW50XzUubWV0YUtleSxcbiAgICAgICAgICBzaGlmdEtleTogZXZlbnRfNS5zaGlmdEtleVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZWRpdG9yOiBzbGF0ZUVkaXRvcixcbiAgICAgIG5hdGl2ZUV2ZW50OiBldmVudF81XG4gICAgfSk7XG4gIH0sIFtwcm9wcywgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yXSksIGhhbmRsZUtleVVwID0gdXNlQ2FsbGJhY2soKGV2ZW50XzYpID0+IHtcbiAgICBwcm9wcy5vbktleVVwICYmIHByb3BzLm9uS2V5VXAoZXZlbnRfNiksIGV2ZW50XzYuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZWRpdG9yQWN0b3Iuc2VuZCh7XG4gICAgICB0eXBlOiBcImJlaGF2aW9yIGV2ZW50XCIsXG4gICAgICBiZWhhdmlvckV2ZW50OiB7XG4gICAgICAgIHR5cGU6IFwia2V5LnVwXCIsXG4gICAgICAgIGtleWJvYXJkRXZlbnQ6IHtcbiAgICAgICAgICBrZXk6IGV2ZW50XzYua2V5LFxuICAgICAgICAgIGNvZGU6IGV2ZW50XzYuY29kZSxcbiAgICAgICAgICBhbHRLZXk6IGV2ZW50XzYuYWx0S2V5LFxuICAgICAgICAgIGN0cmxLZXk6IGV2ZW50XzYuY3RybEtleSxcbiAgICAgICAgICBtZXRhS2V5OiBldmVudF82Lm1ldGFLZXksXG4gICAgICAgICAgc2hpZnRLZXk6IGV2ZW50XzYuc2hpZnRLZXlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVkaXRvcjogc2xhdGVFZGl0b3IsXG4gICAgICBuYXRpdmVFdmVudDogZXZlbnRfNlxuICAgIH0pO1xuICB9LCBbcHJvcHMsIGVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvcl0pLCBzY3JvbGxTZWxlY3Rpb25JbnRvVmlld1RvU2xhdGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiBzY3JvbGxTZWxlY3Rpb25JbnRvVmlldyA9PT0gbnVsbCA/IG5vb3AgOiAoX2VkaXRvciwgZG9tUmFuZ2UpID0+IHtcbiAgICAgICAgc2Nyb2xsU2VsZWN0aW9uSW50b1ZpZXcocG9ydGFibGVUZXh0RWRpdG9yLCBkb21SYW5nZSk7XG4gICAgICB9O1xuICB9LCBbcG9ydGFibGVUZXh0RWRpdG9yLCBzY3JvbGxTZWxlY3Rpb25JbnRvVmlld10pLCBkZWNvcmF0ZSA9IHVzZUNhbGxiYWNrKChbLCBwYXRoXzBdKSA9PiB7XG4gICAgaWYgKGlzRXF1YWxUb0VtcHR5RWRpdG9yKHNsYXRlRWRpdG9yLmNoaWxkcmVuLCBzY2hlbWFUeXBlcykpXG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgYW5jaG9yOiB7XG4gICAgICAgICAgcGF0aDogWzAsIDBdLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgICAgICBmb2N1czoge1xuICAgICAgICAgIHBhdGg6IFswLCAwXSxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICEwXG4gICAgICB9XTtcbiAgICBpZiAocGF0aF8wLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCByZXN1bHRfMSA9IHJhbmdlRGVjb3JhdGlvblN0YXRlLmZpbHRlcigoaXRlbSkgPT4gUmFuZ2UuaXNDb2xsYXBzZWQoaXRlbSkgPyBwYXRoXzAubGVuZ3RoICE9PSAyID8gITEgOiBQYXRoLmVxdWFscyhpdGVtLmZvY3VzLnBhdGgsIHBhdGhfMCkgJiYgUGF0aC5lcXVhbHMoaXRlbS5hbmNob3IucGF0aCwgcGF0aF8wKSA6IFJhbmdlLmludGVyc2VjdGlvbihpdGVtLCB7XG4gICAgICBhbmNob3I6IHtcbiAgICAgICAgcGF0aDogcGF0aF8wLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0sXG4gICAgICBmb2N1czoge1xuICAgICAgICBwYXRoOiBwYXRoXzAsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfVxuICAgIH0pIHx8IFJhbmdlLmluY2x1ZGVzKGl0ZW0sIHBhdGhfMCkpO1xuICAgIHJldHVybiByZXN1bHRfMS5sZW5ndGggPiAwID8gcmVzdWx0XzEgOiBbXTtcbiAgfSwgW3NsYXRlRWRpdG9yLCBzY2hlbWFUeXBlcywgcmFuZ2VEZWNvcmF0aW9uU3RhdGVdKTtcbiAgcmV0dXJuIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBSZWFjdEVkaXRvci50b0RPTU5vZGUoc2xhdGVFZGl0b3IsIHNsYXRlRWRpdG9yKSwgc2V0RWRpdGFibGVFbGVtZW50KHJlZi5jdXJyZW50KTtcbiAgfSwgW3NsYXRlRWRpdG9yLCByZWZdKSwgcG9ydGFibGVUZXh0RWRpdG9yID8gaGFzSW52YWxpZFZhbHVlID8gbnVsbCA6IC8qIEBfX1BVUkVfXyAqLyBqc3goXG4gICAgRWRpdGFibGUsXG4gICAge1xuICAgICAgLi4ucmVzdFByb3BzLFxuICAgICAgYXV0b0ZvY3VzOiAhMSxcbiAgICAgIGNsYXNzTmFtZTogcmVzdFByb3BzLmNsYXNzTmFtZSB8fCBcInB0LWVkaXRhYmxlXCIsXG4gICAgICBkZWNvcmF0ZSxcbiAgICAgIG9uQmx1cjogaGFuZGxlT25CbHVyLFxuICAgICAgb25Db3B5OiBoYW5kbGVDb3B5LFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICBvbkRPTUJlZm9yZUlucHV0OiBoYW5kbGVPbkJlZm9yZUlucHV0LFxuICAgICAgb25Gb2N1czogaGFuZGxlT25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgICAgb25QYXN0ZTogaGFuZGxlUGFzdGUsXG4gICAgICByZWFkT25seSxcbiAgICAgIHJlbmRlclBsYWNlaG9sZGVyOiB2b2lkIDAsXG4gICAgICByZW5kZXJFbGVtZW50LFxuICAgICAgcmVuZGVyTGVhZixcbiAgICAgIHNjcm9sbFNlbGVjdGlvbkludG9WaWV3OiBzY3JvbGxTZWxlY3Rpb25JbnRvVmlld1RvU2xhdGVcbiAgICB9XG4gICkgOiBudWxsO1xufSk7XG5Qb3J0YWJsZVRleHRFZGl0YWJsZS5kaXNwbGF5TmFtZSA9IFwiRm9yd2FyZFJlZihQb3J0YWJsZVRleHRFZGl0YWJsZSlcIjtcbmNvbnN0IEVkaXRvckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHZvaWQgMCk7XG5mdW5jdGlvbiBFZGl0b3JQcm92aWRlcihwcm9wcykge1xuICBjb25zdCAkID0gYygyOCksIGVkaXRvciA9IHVzZUNyZWF0ZUVkaXRvcihwcm9wcy5pbml0aWFsQ29uZmlnKSwgZWRpdG9yQWN0b3IgPSBlZGl0b3IuX2ludGVybmFsLmVkaXRvckFjdG9yLCBzbGF0ZUVkaXRvciA9IGVkaXRvci5faW50ZXJuYWwuc2xhdGVFZGl0b3I7XG4gIGxldCB0MCwgdDE7XG4gICRbMF0gIT09IGVkaXRvciA/ICh0MSA9IG5ldyBQb3J0YWJsZVRleHRFZGl0b3Ioe1xuICAgIGVkaXRvclxuICB9KSwgJFswXSA9IGVkaXRvciwgJFsxXSA9IHQxKSA6IHQxID0gJFsxXSwgdDAgPSB0MTtcbiAgY29uc3QgcG9ydGFibGVUZXh0RWRpdG9yID0gdDA7XG4gIGxldCB0MjtcbiAgJFsyXSAhPT0gcG9ydGFibGVUZXh0RWRpdG9yLmNoYW5nZSQgPyAodDIgPSAoY2hhbmdlKSA9PiB7XG4gICAgcG9ydGFibGVUZXh0RWRpdG9yLmNoYW5nZSQubmV4dChjaGFuZ2UpO1xuICB9LCAkWzJdID0gcG9ydGFibGVUZXh0RWRpdG9yLmNoYW5nZSQsICRbM10gPSB0MikgOiB0MiA9ICRbM107XG4gIGxldCB0MztcbiAgJFs0XSAhPT0gZWRpdG9yQWN0b3IgfHwgJFs1XSAhPT0gdDIgPyAodDMgPSAvKiBAX19QVVJFX18gKi8ganN4KFJvdXRlRXZlbnRzVG9DaGFuZ2VzLCB7IGVkaXRvckFjdG9yLCBvbkNoYW5nZTogdDIgfSksICRbNF0gPSBlZGl0b3JBY3RvciwgJFs1XSA9IHQyLCAkWzZdID0gdDMpIDogdDMgPSAkWzZdO1xuICBsZXQgdDQ7XG4gICRbN10gIT09IGVkaXRvckFjdG9yIHx8ICRbOF0gIT09IHNsYXRlRWRpdG9yLmluc3RhbmNlID8gKHQ0ID0gLyogQF9fUFVSRV9fICovIGpzeChTeW5jaHJvbml6ZXIsIHsgZWRpdG9yQWN0b3IsIHNsYXRlRWRpdG9yOiBzbGF0ZUVkaXRvci5pbnN0YW5jZSB9KSwgJFs3XSA9IGVkaXRvckFjdG9yLCAkWzhdID0gc2xhdGVFZGl0b3IuaW5zdGFuY2UsICRbOV0gPSB0NCkgOiB0NCA9ICRbOV07XG4gIGxldCB0NTtcbiAgJFsxMF0gIT09IGVkaXRvckFjdG9yIHx8ICRbMTFdICE9PSBwcm9wcy5jaGlsZHJlbiA/ICh0NSA9IC8qIEBfX1BVUkVfXyAqLyBqc3goUG9ydGFibGVUZXh0RWRpdG9yU2VsZWN0aW9uUHJvdmlkZXIsIHsgZWRpdG9yQWN0b3IsIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSwgJFsxMF0gPSBlZGl0b3JBY3RvciwgJFsxMV0gPSBwcm9wcy5jaGlsZHJlbiwgJFsxMl0gPSB0NSkgOiB0NSA9ICRbMTJdO1xuICBsZXQgdDY7XG4gICRbMTNdICE9PSBwb3J0YWJsZVRleHRFZGl0b3IgfHwgJFsxNF0gIT09IHQ1ID8gKHQ2ID0gLyogQF9fUFVSRV9fICovIGpzeChQb3J0YWJsZVRleHRFZGl0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBwb3J0YWJsZVRleHRFZGl0b3IsIGNoaWxkcmVuOiB0NSB9KSwgJFsxM10gPSBwb3J0YWJsZVRleHRFZGl0b3IsICRbMTRdID0gdDUsICRbMTVdID0gdDYpIDogdDYgPSAkWzE1XTtcbiAgbGV0IHQ3O1xuICAkWzE2XSAhPT0gc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlIHx8ICRbMTddICE9PSBzbGF0ZUVkaXRvci5pbnN0YW5jZSB8fCAkWzE4XSAhPT0gdDYgPyAodDcgPSAvKiBAX19QVVJFX18gKi8ganN4KFNsYXRlLCB7IGVkaXRvcjogc2xhdGVFZGl0b3IuaW5zdGFuY2UsIGluaXRpYWxWYWx1ZTogc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlLCBjaGlsZHJlbjogdDYgfSksICRbMTZdID0gc2xhdGVFZGl0b3IuaW5pdGlhbFZhbHVlLCAkWzE3XSA9IHNsYXRlRWRpdG9yLmluc3RhbmNlLCAkWzE4XSA9IHQ2LCAkWzE5XSA9IHQ3KSA6IHQ3ID0gJFsxOV07XG4gIGxldCB0ODtcbiAgJFsyMF0gIT09IGVkaXRvckFjdG9yIHx8ICRbMjFdICE9PSB0NyA/ICh0OCA9IC8qIEBfX1BVUkVfXyAqLyBqc3goRWRpdG9yQWN0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBlZGl0b3JBY3RvciwgY2hpbGRyZW46IHQ3IH0pLCAkWzIwXSA9IGVkaXRvckFjdG9yLCAkWzIxXSA9IHQ3LCAkWzIyXSA9IHQ4KSA6IHQ4ID0gJFsyMl07XG4gIGxldCB0OTtcbiAgcmV0dXJuICRbMjNdICE9PSBlZGl0b3IgfHwgJFsyNF0gIT09IHQzIHx8ICRbMjVdICE9PSB0NCB8fCAkWzI2XSAhPT0gdDggPyAodDkgPSAvKiBAX19QVVJFX18gKi8ganN4cyhFZGl0b3JDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBlZGl0b3IsIGNoaWxkcmVuOiBbXG4gICAgdDMsXG4gICAgdDQsXG4gICAgdDhcbiAgXSB9KSwgJFsyM10gPSBlZGl0b3IsICRbMjRdID0gdDMsICRbMjVdID0gdDQsICRbMjZdID0gdDgsICRbMjddID0gdDkpIDogdDkgPSAkWzI3XSwgdDk7XG59XG5mdW5jdGlvbiB1c2VFZGl0b3IoKSB7XG4gIGNvbnN0IGVkaXRvciA9IFJlYWN0LnVzZUNvbnRleHQoRWRpdG9yQ29udGV4dCk7XG4gIGlmICghZWRpdG9yKVxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIEVkaXRvciBzZXQuIFVzZSBFZGl0b3JQcm92aWRlciB0byBzZXQgb25lLlwiKTtcbiAgcmV0dXJuIGVkaXRvcjtcbn1cbmZ1bmN0aW9uIEVkaXRvckV2ZW50TGlzdGVuZXIocHJvcHMpIHtcbiAgY29uc3QgJCA9IGMoNCksIGVkaXRvciA9IHVzZUVkaXRvcigpLCBvbiA9IHVzZUVmZmVjdEV2ZW50KHByb3BzLm9uKTtcbiAgbGV0IHQwLCB0MTtcbiAgcmV0dXJuICRbMF0gIT09IGVkaXRvciB8fCAkWzFdICE9PSBvbiA/ICh0MCA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBlZGl0b3Iub24oXCIqXCIsIG9uKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgdDEgPSBbZWRpdG9yLCBvbl0sICRbMF0gPSBlZGl0b3IsICRbMV0gPSBvbiwgJFsyXSA9IHQwLCAkWzNdID0gdDEpIDogKHQwID0gJFsyXSwgdDEgPSAkWzNdKSwgdXNlRWZmZWN0KHQwLCB0MSksIG51bGw7XG59XG5leHBvcnQge1xuICBFZGl0b3JFdmVudExpc3RlbmVyLFxuICBFZGl0b3JQcm92aWRlcixcbiAgUG9ydGFibGVUZXh0RWRpdGFibGUsXG4gIFBvcnRhYmxlVGV4dEVkaXRvcixcbiAgZGVmaW5lU2NoZW1hLFxuICBlZGl0b3JNYWNoaW5lLFxuICBkZWZhdWx0S2V5R2VuZXJhdG9yIGFzIGtleUdlbmVyYXRvcixcbiAgdXNlRWRpdG9yLFxuICB1c2VFZGl0b3JTZWxlY3RvcixcbiAgdXNlUG9ydGFibGVUZXh0RWRpdG9yLFxuICB1c2VQb3J0YWJsZVRleHRFZGl0b3JTZWxlY3Rpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/patches/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/patches/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isObject.js */ \"(ssr)/./node_modules/lodash/isObject.js\");\n/* harmony import */ var lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString.js */ \"(ssr)/./node_modules/lodash/isString.js\");\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/./node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n  if (position !== BEFORE && position !== AFTER)\n    throw new Error(\n      `Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`\n    );\n  const items = flatten(...args);\n  if (array.length === 0)\n    return items;\n  const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n  return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n  return values.reduce((prev, item) => prev.concat(item), []);\n}\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(\n  Object.prototype.hasOwnProperty\n);\nfunction move(arr, from, to) {\n  const nextValue = arr.slice(), val = nextValue[from];\n  return nextValue.splice(from, 1), nextValue.splice(to, 0, val), nextValue;\n}\nfunction findTargetIndex(array, pathSegment) {\n  if (typeof pathSegment == \"number\")\n    return pathSegment;\n  const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__(array, pathSegment);\n  return index === -1 ? !1 : index;\n}\nfunction apply$3(value, patch) {\n  const nextValue = value.slice();\n  if (patch.path.length === 0) {\n    if (patch.type === \"setIfMissing\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return value === void 0 ? patch.value : value;\n    } else if (patch.type === \"set\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"move\") {\n        if (!patch.value || !hasOwn(patch.value, \"from\") || !hasOwn(patch.value, \"to\"))\n          throw new Error(\n            `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n              patch.value\n            )}`\n          );\n        return move(nextValue, patch.value.from, patch.value.to);\n      }\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n  if (index === !1)\n    return nextValue;\n  if (tail.length === 0) {\n    if (patch.type === \"insert\") {\n      const { position, items } = patch;\n      return insert$1(value, position, index, items);\n    } else if (patch.type === \"unset\") {\n      if (typeof index != \"number\")\n        throw new Error(\n          `Expected array index to be a number, instead got \"${index}\"`\n        );\n      return nextValue.splice(index, 1), nextValue;\n    }\n  }\n  return nextValue[index] = _apply(nextValue[index], {\n    ...patch,\n    path: tail\n  }), nextValue;\n}\nfunction apply$2(value, patch) {\n  const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__(value);\n  if (patch.path.length === 0) {\n    if (patch.type === \"set\") {\n      if (!lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(patch.value))\n        throw new Error(\"Cannot set value of an object to a non-object\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"setIfMissing\")\n        return value === void 0 ? patch.value : value;\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path;\n  if (typeof head != \"string\")\n    throw new Error(`Expected field name to be a string, instad got: ${head}`);\n  return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__(nextValue, head) : (nextValue[head] = _apply(nextValue[head], {\n    ...patch,\n    path: tail\n  }), nextValue);\n}\nconst OPERATIONS$1 = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  inc(currentValue, nextValue) {\n    return currentValue + nextValue;\n  },\n  dec(currentValue, nextValue) {\n    return currentValue - nextValue;\n  }\n}, SUPPORTED_PATCH_TYPES$1 = Object.keys(OPERATIONS$1);\nfunction apply$1(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES$1.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  return OPERATIONS$1[patch.type](value, patch.value);\n}\nconst OPERATIONS = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  diffMatchPatch(currentValue, nextValue) {\n    const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.parsePatch)(nextValue), currentValue, {\n      allowExceedingIndices: !0\n    });\n    return result;\n  }\n}, SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);\nfunction apply(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  const func = OPERATIONS[patch.type];\n  if (func)\n    return func(value, patch.value);\n  throw new Error(\"Unknown patch type\");\n}\nfunction applyAll(value, patches) {\n  return patches.reduce(_apply, value);\n}\nfunction applyPatch(value, patch) {\n  return Array.isArray(value) ? apply$3(value, patch) : lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__(value) ? apply(value, patch) : lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(value) ? apply$2(value, patch) : apply$1(value, patch);\n}\nfunction _apply(value, patch) {\n  return applyPatch(value, patch);\n}\nfunction setIfMissing(value, path = []) {\n  return {\n    type: \"setIfMissing\",\n    path,\n    value\n  };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n  const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.stringifyPatches)(patches);\n  return { type: \"diffMatchPatch\", path, value: patch };\n}\nfunction insert(items, position, path = []) {\n  return {\n    type: \"insert\",\n    path,\n    position,\n    items\n  };\n}\nfunction set(value, path = []) {\n  return { type: \"set\", path, value };\n}\nfunction unset(path = []) {\n  return { type: \"unset\", path };\n}\nfunction prefixPath(patch, segment) {\n  return {\n    ...patch,\n    path: [segment, ...patch.path]\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n\n\n\n\nconst defaultLists = {\n    number: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", {\n      children\n    }),\n    bullet: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n      children\n    })\n  },\n  DefaultListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  link = ({\n    children,\n    value\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n    href: value?.href,\n    children\n  }),\n  underlineStyle = {\n    textDecoration: \"underline\"\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", {\n      children\n    }),\n    strong: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n      children\n    }),\n    code: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n      children\n    }),\n    underline: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: underlineStyle,\n      children\n    }),\n    \"strike-through\": ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", {\n      children\n    }),\n    link\n  },\n  getTemplate = (type, prop) => `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n  },\n  DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: hidden,\n      children: warning\n    }) : /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      style: hidden,\n      children: warning\n    });\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n    className: `unknown__pt__mark__${markType}`,\n    children\n  }),\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n    children\n  }),\n  DefaultUnknownList = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n    children\n  }),\n  DefaultUnknownListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  DefaultHardBreak = () => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n  defaultBlockStyles = {\n    normal: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      children\n    }),\n    blockquote: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", {\n      children\n    }),\n    h1: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", {\n      children\n    }),\n    h2: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", {\n      children\n    }),\n    h3: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children\n    }),\n    h4: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", {\n      children\n    }),\n    h5: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", {\n      children\n    }),\n    h6: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", {\n      children\n    })\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction PortableText({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning\n}) {\n  const handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(input) ? input : [input],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML),\n    components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]),\n    renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getNodeRenderer(components, handleMissingComponent), [components, handleMissingComponent]),\n    rendered = nested.map((node, index) => renderNode({\n      node,\n      index,\n      isInline: !1,\n      renderNode\n    }));\n  return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: rendered\n  });\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n        node,\n        index,\n        isInline\n      } = options,\n      key = node._key || `node-${index}`;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n  }\n  function hasCustomComponentForNode(node) {\n    return node._type in components.types;\n  }\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1,\n        renderNode\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderList(node, index, key) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index: childIndex,\n        isInline: !1,\n        renderNode\n      })),\n      component = components.list,\n      List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderSpan(node, _index, key) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      Span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0,\n        renderNode\n      }));\n    return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Span, {\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderBlock(node, index, key, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }), key);\n  }\n  function renderText(node, key) {\n    if (node.text === `\n`) {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n    }\n    return node.text;\n  }\n  function renderUnknownType(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n    handleMissingComponent(unknownTypeWarning(node._type), {\n      nodeType: \"block\",\n      type: node._type\n    });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n  }\n  function renderCustomBlock(node, index, key, isInline) {\n    const nodeOptions = {\n        value: node,\n        isInline,\n        index,\n        renderNode\n      },\n      Node = components.types[node._type];\n    return Node ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;